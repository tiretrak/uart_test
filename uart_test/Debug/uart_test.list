
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa0  08003fa0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fa8  08003fa8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa8  08003fa8  00013fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fac  08003fac  00013fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000017c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b9f4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ae2  00000000  00000000  0002ba94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0002d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000718  00000000  00000000  0002dd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003098  00000000  00000000  0002e440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009681  00000000  00000000  000314d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c64e5  00000000  00000000  0003ab59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010103e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002498  00000000  00000000  00101094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003eec 	.word	0x08003eec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003eec 	.word	0x08003eec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d013      	beq.n	8000500 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d00b      	beq.n	8000500 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004e8:	e000      	b.n	80004ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80004ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f9      	beq.n	80004ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	b2d2      	uxtb	r2, r2
 80004fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000500:	687b      	ldr	r3, [r7, #4]
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <__io_putchar>:
//		I2C_send((uint8_t)(*str), 1);               // передача первого символа строки
//        str++;                                      // сдвиг строки налево на 1 символ
//    }
//}
int __io_putchar(int ch)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 // Write character to ITM ch.0
 ITM_SendChar(ch);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ffd1 	bl	80004c0 <ITM_SendChar>
 return(ch);
 800051e:	687b      	ldr	r3, [r7, #4]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fba6 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */
  /* Configure LED3, LED4, LED5 and LED6 */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f83a 	bl	80005a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f916 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000538:	f000 f8ca 	bl	80006d0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800053c:	f000 f8f2 	bl	8000724 <MX_DMA_Init>
//  MX_I2C1_Init();
  MX_USART1_UART_Init();
 8000540:	f000 f89c 	bl	800067c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //start MIDI message reception with interrupt.
  HAL_UART_Receive_DMA(&huart2, &midi_recieved_buf, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	4914      	ldr	r1, [pc, #80]	; (8000598 <main+0x70>)
 8000548:	4814      	ldr	r0, [pc, #80]	; (800059c <main+0x74>)
 800054a:	f001 ffd2 	bl	80024f2 <HAL_UART_Receive_DMA>
//		I2C_send(0b10000000,0);   // переход на 1 строку, тут не обязателен
//		LCD_SendString((char)midi_recieved_buf);

//	  b = (char*) counter;

	  printf("«Hello STM32 world!\r\n");
 800054e:	4814      	ldr	r0, [pc, #80]	; (80005a0 <main+0x78>)
 8000550:	f003 f874 	bl	800363c <puts>
//	  LCD_SendString((char*)midi_recieved_buf);

//	  HAL_UART_Transmit(&huart1,"cheers\n",7,1000);
//	  HAL_Delay(1000);

	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8000554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000558:	4812      	ldr	r0, [pc, #72]	; (80005a4 <main+0x7c>)
 800055a:	f001 faee 	bl	8001b3a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800055e:	2064      	movs	r0, #100	; 0x64
 8000560:	f000 fbfe 	bl	8000d60 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8000564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000568:	480e      	ldr	r0, [pc, #56]	; (80005a4 <main+0x7c>)
 800056a:	f001 fae6 	bl	8001b3a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f000 fbf6 	bl	8000d60 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 8000574:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000578:	480a      	ldr	r0, [pc, #40]	; (80005a4 <main+0x7c>)
 800057a:	f001 fade 	bl	8001b3a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800057e:	2064      	movs	r0, #100	; 0x64
 8000580:	f000 fbee 	bl	8000d60 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 8000584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <main+0x7c>)
 800058a:	f001 fad6 	bl	8001b3a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800058e:	2064      	movs	r0, #100	; 0x64
 8000590:	f000 fbe6 	bl	8000d60 <HAL_Delay>
  {
 8000594:	e7db      	b.n	800054e <main+0x26>
 8000596:	bf00      	nop
 8000598:	2000014c 	.word	0x2000014c
 800059c:	20000194 	.word	0x20000194
 80005a0:	08003f04 	.word	0x08003f04
 80005a4:	40020c00 	.word	0x40020c00

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 ffca 	bl	8003550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a27      	ldr	r2, [pc, #156]	; (8000674 <SystemClock_Config+0xcc>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <SystemClock_Config+0xd0>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000618:	2308      	movs	r3, #8
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800061c:	23a8      	movs	r3, #168	; 0xa8
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000624:	2307      	movs	r3, #7
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fa9f 	bl	8001b70 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000638:	f000 f91c 	bl	8000874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2105      	movs	r1, #5
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fd00 	bl	8002060 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000666:	f000 f905 	bl	8000874 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance 			= USART1;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_USART1_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate 		= 115200;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength 	= UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits 		= UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity 		= UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode 			= UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling 	= UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006b4:	f001 fed0 	bl	8002458 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f8d9 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000150 	.word	0x20000150
 80006cc:	40011000 	.word	0x40011000

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance 			= USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate 		= 31250;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f647 2212 	movw	r2, #31250	; 0x7a12
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength 	= UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits 		= UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity 		= UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode 			= UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f001 fea6 	bl	8002458 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f8af 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000194 	.word	0x20000194
 8000720:	40004400 	.word	0x40004400

08000724 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_DMA_Init+0x3c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a0b      	ldr	r2, [pc, #44]	; (8000760 <MX_DMA_Init+0x3c>)
 8000734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_DMA_Init+0x3c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	2010      	movs	r0, #16
 800074c:	f000 fc07 	bl	8000f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000750:	2010      	movs	r0, #16
 8000752:	f000 fc20 	bl	8000f96 <HAL_NVIC_EnableIRQ>

}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <MX_GPIO_Init+0xc8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a2a      	ldr	r2, [pc, #168]	; (800082c <MX_GPIO_Init+0xc8>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_GPIO_Init+0xc8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b24      	ldr	r3, [pc, #144]	; (800082c <MX_GPIO_Init+0xc8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a23      	ldr	r2, [pc, #140]	; (800082c <MX_GPIO_Init+0xc8>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_GPIO_Init+0xc8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_GPIO_Init+0xc8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_GPIO_Init+0xc8>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_GPIO_Init+0xc8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80007ce:	2200      	movs	r2, #0
 80007d0:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 80007d4:	4816      	ldr	r0, [pc, #88]	; (8000830 <MX_GPIO_Init+0xcc>)
 80007d6:	f001 f997 	bl	8001b08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80007e0:	4814      	ldr	r0, [pc, #80]	; (8000834 <MX_GPIO_Init+0xd0>)
 80007e2:	f001 f991 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80007e6:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 80007ea:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4619      	mov	r1, r3
 80007fe:	480c      	ldr	r0, [pc, #48]	; (8000830 <MX_GPIO_Init+0xcc>)
 8000800:	f000 ffe6 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000804:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_GPIO_Init+0xd0>)
 800081e:	f000 ffd7 	bl	80017d0 <HAL_GPIO_Init>

}
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40020c00 	.word	0x40020c00
 8000834:	40020400 	.word	0x40020400

08000838 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
//HAL_UART_Receive_IT(&huart2, &midi_recieved_buf,1);
//buf = midi_recieved_buf;
//HAL_UART_Transmit	(&huart2,&midi_recieved_buf,1,10);
//HAL_UART_Transmit_IT(&huart2,&midi_recieved_buf,1);

HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8000840:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000844:	480a      	ldr	r0, [pc, #40]	; (8000870 <HAL_UART_RxCpltCallback+0x38>)
 8000846:	f001 f978 	bl	8001b3a <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 800084a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084e:	4808      	ldr	r0, [pc, #32]	; (8000870 <HAL_UART_RxCpltCallback+0x38>)
 8000850:	f001 f973 	bl	8001b3a <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 8000854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <HAL_UART_RxCpltCallback+0x38>)
 800085a:	f001 f96e 	bl	8001b3a <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 800085e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <HAL_UART_RxCpltCallback+0x38>)
 8000864:	f001 f969 	bl	8001b3a <HAL_GPIO_TogglePin>
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40020c00 	.word	0x40020c00

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_MspInit+0x4c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008be:	2007      	movs	r0, #7
 80008c0:	f000 fb42 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	; 0x30
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a4e      	ldr	r2, [pc, #312]	; (8000a28 <HAL_UART_MspInit+0x158>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d12d      	bne.n	800094e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
 80008f6:	4b4d      	ldr	r3, [pc, #308]	; (8000a2c <HAL_UART_MspInit+0x15c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a4c      	ldr	r2, [pc, #304]	; (8000a2c <HAL_UART_MspInit+0x15c>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b4a      	ldr	r3, [pc, #296]	; (8000a2c <HAL_UART_MspInit+0x15c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	4b46      	ldr	r3, [pc, #280]	; (8000a2c <HAL_UART_MspInit+0x15c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a45      	ldr	r2, [pc, #276]	; (8000a2c <HAL_UART_MspInit+0x15c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b43      	ldr	r3, [pc, #268]	; (8000a2c <HAL_UART_MspInit+0x15c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800092a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800093c:	2307      	movs	r3, #7
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	483a      	ldr	r0, [pc, #232]	; (8000a30 <HAL_UART_MspInit+0x160>)
 8000948:	f000 ff42 	bl	80017d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800094c:	e067      	b.n	8000a1e <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a38      	ldr	r2, [pc, #224]	; (8000a34 <HAL_UART_MspInit+0x164>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d162      	bne.n	8000a1e <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	4b33      	ldr	r3, [pc, #204]	; (8000a2c <HAL_UART_MspInit+0x15c>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a32      	ldr	r2, [pc, #200]	; (8000a2c <HAL_UART_MspInit+0x15c>)
 8000962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
 8000968:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <HAL_UART_MspInit+0x15c>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <HAL_UART_MspInit+0x15c>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a2b      	ldr	r2, [pc, #172]	; (8000a2c <HAL_UART_MspInit+0x15c>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <HAL_UART_MspInit+0x15c>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000990:	230c      	movs	r3, #12
 8000992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a0:	2307      	movs	r3, #7
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4821      	ldr	r0, [pc, #132]	; (8000a30 <HAL_UART_MspInit+0x160>)
 80009ac:	f000 ff10 	bl	80017d0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <HAL_UART_MspInit+0x168>)
 80009b2:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <HAL_UART_MspInit+0x16c>)
 80009b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <HAL_UART_MspInit+0x168>)
 80009b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <HAL_UART_MspInit+0x168>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_UART_MspInit+0x168>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <HAL_UART_MspInit+0x168>)
 80009cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_UART_MspInit+0x168>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_UART_MspInit+0x168>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <HAL_UART_MspInit+0x168>)
 80009e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_UART_MspInit+0x168>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_UART_MspInit+0x168>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009f2:	4811      	ldr	r0, [pc, #68]	; (8000a38 <HAL_UART_MspInit+0x168>)
 80009f4:	f000 faea 	bl	8000fcc <HAL_DMA_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_UART_MspInit+0x132>
      Error_Handler();
 80009fe:	f7ff ff39 	bl	8000874 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <HAL_UART_MspInit+0x168>)
 8000a06:	639a      	str	r2, [r3, #56]	; 0x38
 8000a08:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <HAL_UART_MspInit+0x168>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2026      	movs	r0, #38	; 0x26
 8000a14:	f000 faa3 	bl	8000f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a18:	2026      	movs	r0, #38	; 0x26
 8000a1a:	f000 fabc 	bl	8000f96 <HAL_NVIC_EnableIRQ>
}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	; 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40011000 	.word	0x40011000
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40004400 	.word	0x40004400
 8000a38:	20000098 	.word	0x20000098
 8000a3c:	40026088 	.word	0x40026088

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f948 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <DMA1_Stream5_IRQHandler+0x10>)
 8000a9a:	f000 fc2f 	bl	80012fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000098 	.word	0x20000098

08000aa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <USART2_IRQHandler+0x10>)
 8000aae:	f001 fd51 	bl	8002554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000194 	.word	0x20000194

08000abc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e00a      	b.n	8000ae4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ace:	f3af 8000 	nop.w
 8000ad2:	4601      	mov	r1, r0
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	b2ca      	uxtb	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	dbf0      	blt.n	8000ace <_read+0x12>
	}

return len;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	e009      	b.n	8000b1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fcfc 	bl	800050e <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf1      	blt.n	8000b08 <_write+0x12>
	}
	return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_close>:

int _close(int file)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
	return -1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b56:	605a      	str	r2, [r3, #4]
	return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <_isatty>:

int _isatty(int file)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	return 0;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f002 fc98 	bl	80034fc <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <_sbrk+0x64>)
 8000be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20020000 	.word	0x20020000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	2000008c 	.word	0x2000008c
 8000c00:	200001f0 	.word	0x200001f0

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ffd7 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f002 fc57 	bl	8003508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fc65 	bl	8000528 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c6c:	08003fb0 	.word	0x08003fb0
  ldr r2, =_sbss
 8000c70:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c74:	200001ec 	.word	0x200001ec

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f94f 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f808 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fde6 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x54>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x58>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f967 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00e      	b.n	8000d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d80a      	bhi.n	8000d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f000 f92f 	bl	8000f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_InitTick+0x5c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000004 	.word	0x20000004

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	200001d8 	.word	0x200001d8

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	200001d8 	.word	0x200001d8

08000d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff ffee 	bl	8000d48 <HAL_GetTick>
 8000d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d78:	d005      	beq.n	8000d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_Delay+0x44>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d86:	bf00      	nop
 8000d88:	f7ff ffde 	bl	8000d48 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d8f7      	bhi.n	8000d88 <HAL_Delay+0x28>
  {
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008

08000da8 <__NVIC_SetPriorityGrouping>:
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_EnableIRQ>:
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 021f 	and.w	r2, r3, #31
 8000e24:	4907      	ldr	r1, [pc, #28]	; (8000e44 <__NVIC_EnableIRQ+0x38>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <__NVIC_SetPriority>:
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <SysTick_Config>:
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f14:	d301      	bcc.n	8000f1a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00f      	b.n	8000f3a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <SysTick_Config+0x40>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f22:	210f      	movs	r1, #15
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f7ff ff8e 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x40>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff29 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f70:	f7ff ff3e 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff8e 	bl	8000e9c <NVIC_EncodePriority>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff5d 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff31 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffa2 	bl	8000f04 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff feb6 	bl	8000d48 <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e099      	b.n	800111c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2202      	movs	r2, #2
 8000fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001008:	e00f      	b.n	800102a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800100a:	f7ff fe9d 	bl	8000d48 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b05      	cmp	r3, #5
 8001016:	d908      	bls.n	800102a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2220      	movs	r2, #32
 800101c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e078      	b.n	800111c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1e8      	bne.n	800100a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	4b38      	ldr	r3, [pc, #224]	; (8001124 <HAL_DMA_Init+0x158>)
 8001044:	4013      	ands	r3, r2
 8001046:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001056:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800106e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4313      	orrs	r3, r2
 800107a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	2b04      	cmp	r3, #4
 8001082:	d107      	bne.n	8001094 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	4313      	orrs	r3, r2
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4313      	orrs	r3, r2
 8001092:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f023 0307 	bic.w	r3, r3, #7
 80010aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d117      	bne.n	80010ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fb01 	bl	80016d8 <DMA_CheckFifoParam>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2240      	movs	r2, #64	; 0x40
 80010e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010ea:	2301      	movs	r3, #1
 80010ec:	e016      	b.n	800111c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 fab8 	bl	800166c <DMA_CalcBaseAndBitshift>
 80010fc:	4603      	mov	r3, r0
 80010fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001104:	223f      	movs	r2, #63	; 0x3f
 8001106:	409a      	lsls	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	f010803f 	.word	0xf010803f

08001128 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001146:	2b01      	cmp	r3, #1
 8001148:	d101      	bne.n	800114e <HAL_DMA_Start_IT+0x26>
 800114a:	2302      	movs	r3, #2
 800114c:	e040      	b.n	80011d0 <HAL_DMA_Start_IT+0xa8>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d12f      	bne.n	80011c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2202      	movs	r2, #2
 8001166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2200      	movs	r2, #0
 800116e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f000 fa4a 	bl	8001610 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001180:	223f      	movs	r2, #63	; 0x3f
 8001182:	409a      	lsls	r2, r3
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0216 	orr.w	r2, r2, #22
 8001196:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	2b00      	cmp	r3, #0
 800119e:	d007      	beq.n	80011b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0208 	orr.w	r2, r2, #8
 80011ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0201 	orr.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e005      	b.n	80011ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011ca:	2302      	movs	r3, #2
 80011cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011e6:	f7ff fdaf 	bl	8000d48 <HAL_GetTick>
 80011ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d008      	beq.n	800120a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e052      	b.n	80012b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0216 	bic.w	r2, r2, #22
 8001218:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	695a      	ldr	r2, [r3, #20]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001228:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	2b00      	cmp	r3, #0
 8001230:	d103      	bne.n	800123a <HAL_DMA_Abort+0x62>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0208 	bic.w	r2, r2, #8
 8001248:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0201 	bic.w	r2, r2, #1
 8001258:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800125a:	e013      	b.n	8001284 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800125c:	f7ff fd74 	bl	8000d48 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b05      	cmp	r3, #5
 8001268:	d90c      	bls.n	8001284 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2220      	movs	r2, #32
 800126e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2203      	movs	r2, #3
 8001274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e015      	b.n	80012b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1e4      	bne.n	800125c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001296:	223f      	movs	r2, #63	; 0x3f
 8001298:	409a      	lsls	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d004      	beq.n	80012d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00c      	b.n	80012f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2205      	movs	r2, #5
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001308:	4b92      	ldr	r3, [pc, #584]	; (8001554 <HAL_DMA_IRQHandler+0x258>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a92      	ldr	r2, [pc, #584]	; (8001558 <HAL_DMA_IRQHandler+0x25c>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	0a9b      	lsrs	r3, r3, #10
 8001314:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001326:	2208      	movs	r2, #8
 8001328:	409a      	lsls	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d01a      	beq.n	8001368 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0204 	bic.w	r2, r2, #4
 800134e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001354:	2208      	movs	r2, #8
 8001356:	409a      	lsls	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001360:	f043 0201 	orr.w	r2, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136c:	2201      	movs	r2, #1
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d012      	beq.n	800139e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00b      	beq.n	800139e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138a:	2201      	movs	r2, #1
 800138c:	409a      	lsls	r2, r3
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001396:	f043 0202 	orr.w	r2, r3, #2
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a2:	2204      	movs	r2, #4
 80013a4:	409a      	lsls	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d012      	beq.n	80013d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00b      	beq.n	80013d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c0:	2204      	movs	r2, #4
 80013c2:	409a      	lsls	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013cc:	f043 0204 	orr.w	r2, r3, #4
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	2210      	movs	r2, #16
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d043      	beq.n	800146c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d03c      	beq.n	800146c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f6:	2210      	movs	r2, #16
 80013f8:	409a      	lsls	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d018      	beq.n	800143e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d108      	bne.n	800142c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	2b00      	cmp	r3, #0
 8001420:	d024      	beq.n	800146c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4798      	blx	r3
 800142a:	e01f      	b.n	800146c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01b      	beq.n	800146c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	4798      	blx	r3
 800143c:	e016      	b.n	800146c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001448:	2b00      	cmp	r3, #0
 800144a:	d107      	bne.n	800145c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0208 	bic.w	r2, r2, #8
 800145a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001470:	2220      	movs	r2, #32
 8001472:	409a      	lsls	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 808e 	beq.w	800159a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8086 	beq.w	800159a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001492:	2220      	movs	r2, #32
 8001494:	409a      	lsls	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d136      	bne.n	8001514 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0216 	bic.w	r2, r2, #22
 80014b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d103      	bne.n	80014d6 <HAL_DMA_IRQHandler+0x1da>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0208 	bic.w	r2, r2, #8
 80014e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ea:	223f      	movs	r2, #63	; 0x3f
 80014ec:	409a      	lsls	r2, r3
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001506:	2b00      	cmp	r3, #0
 8001508:	d07d      	beq.n	8001606 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	4798      	blx	r3
        }
        return;
 8001512:	e078      	b.n	8001606 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d01c      	beq.n	800155c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d108      	bne.n	8001542 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	2b00      	cmp	r3, #0
 8001536:	d030      	beq.n	800159a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	4798      	blx	r3
 8001540:	e02b      	b.n	800159a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001546:	2b00      	cmp	r3, #0
 8001548:	d027      	beq.n	800159a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4798      	blx	r3
 8001552:	e022      	b.n	800159a <HAL_DMA_IRQHandler+0x29e>
 8001554:	20000000 	.word	0x20000000
 8001558:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10f      	bne.n	800158a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0210 	bic.w	r2, r2, #16
 8001578:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d032      	beq.n	8001608 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d022      	beq.n	80015f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2205      	movs	r2, #5
 80015b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0201 	bic.w	r2, r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	3301      	adds	r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d307      	bcc.n	80015e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f2      	bne.n	80015c6 <HAL_DMA_IRQHandler+0x2ca>
 80015e0:	e000      	b.n	80015e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	4798      	blx	r3
 8001604:	e000      	b.n	8001608 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001606:	bf00      	nop
    }
  }
}
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop

08001610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800162c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b40      	cmp	r3, #64	; 0x40
 800163c:	d108      	bne.n	8001650 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800164e:	e007      	b.n	8001660 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	60da      	str	r2, [r3, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	3b10      	subs	r3, #16
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <DMA_CalcBaseAndBitshift+0x64>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001686:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <DMA_CalcBaseAndBitshift+0x68>)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d909      	bls.n	80016ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016a2:	f023 0303 	bic.w	r3, r3, #3
 80016a6:	1d1a      	adds	r2, r3, #4
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	659a      	str	r2, [r3, #88]	; 0x58
 80016ac:	e007      	b.n	80016be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016b6:	f023 0303 	bic.w	r3, r3, #3
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	aaaaaaab 	.word	0xaaaaaaab
 80016d4:	08003f34 	.word	0x08003f34

080016d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d11f      	bne.n	8001732 <DMA_CheckFifoParam+0x5a>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d856      	bhi.n	80017a6 <DMA_CheckFifoParam+0xce>
 80016f8:	a201      	add	r2, pc, #4	; (adr r2, 8001700 <DMA_CheckFifoParam+0x28>)
 80016fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fe:	bf00      	nop
 8001700:	08001711 	.word	0x08001711
 8001704:	08001723 	.word	0x08001723
 8001708:	08001711 	.word	0x08001711
 800170c:	080017a7 	.word	0x080017a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d046      	beq.n	80017aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001720:	e043      	b.n	80017aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800172a:	d140      	bne.n	80017ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001730:	e03d      	b.n	80017ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800173a:	d121      	bne.n	8001780 <DMA_CheckFifoParam+0xa8>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d837      	bhi.n	80017b2 <DMA_CheckFifoParam+0xda>
 8001742:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <DMA_CheckFifoParam+0x70>)
 8001744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001748:	08001759 	.word	0x08001759
 800174c:	0800175f 	.word	0x0800175f
 8001750:	08001759 	.word	0x08001759
 8001754:	08001771 	.word	0x08001771
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
      break;
 800175c:	e030      	b.n	80017c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d025      	beq.n	80017b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800176e:	e022      	b.n	80017b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001778:	d11f      	bne.n	80017ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800177e:	e01c      	b.n	80017ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d903      	bls.n	800178e <DMA_CheckFifoParam+0xb6>
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d003      	beq.n	8001794 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800178c:	e018      	b.n	80017c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	73fb      	strb	r3, [r7, #15]
      break;
 8001792:	e015      	b.n	80017c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00e      	beq.n	80017be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
      break;
 80017a4:	e00b      	b.n	80017be <DMA_CheckFifoParam+0xe6>
      break;
 80017a6:	bf00      	nop
 80017a8:	e00a      	b.n	80017c0 <DMA_CheckFifoParam+0xe8>
      break;
 80017aa:	bf00      	nop
 80017ac:	e008      	b.n	80017c0 <DMA_CheckFifoParam+0xe8>
      break;
 80017ae:	bf00      	nop
 80017b0:	e006      	b.n	80017c0 <DMA_CheckFifoParam+0xe8>
      break;
 80017b2:	bf00      	nop
 80017b4:	e004      	b.n	80017c0 <DMA_CheckFifoParam+0xe8>
      break;
 80017b6:	bf00      	nop
 80017b8:	e002      	b.n	80017c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80017ba:	bf00      	nop
 80017bc:	e000      	b.n	80017c0 <DMA_CheckFifoParam+0xe8>
      break;
 80017be:	bf00      	nop
    }
  } 
  
  return status; 
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	e16b      	b.n	8001ac4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	429a      	cmp	r2, r3
 8001806:	f040 815a 	bne.w	8001abe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b01      	cmp	r3, #1
 8001814:	d005      	beq.n	8001822 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181e:	2b02      	cmp	r3, #2
 8001820:	d130      	bne.n	8001884 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2203      	movs	r2, #3
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001858:	2201      	movs	r2, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	f003 0201 	and.w	r2, r3, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b03      	cmp	r3, #3
 800188e:	d017      	beq.n	80018c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d123      	bne.n	8001914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	08da      	lsrs	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3208      	adds	r2, #8
 80018d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	220f      	movs	r2, #15
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3208      	adds	r2, #8
 800190e:	69b9      	ldr	r1, [r7, #24]
 8001910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2203      	movs	r2, #3
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0203 	and.w	r2, r3, #3
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80b4 	beq.w	8001abe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b60      	ldr	r3, [pc, #384]	; (8001adc <HAL_GPIO_Init+0x30c>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a5f      	ldr	r2, [pc, #380]	; (8001adc <HAL_GPIO_Init+0x30c>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	4b5d      	ldr	r3, [pc, #372]	; (8001adc <HAL_GPIO_Init+0x30c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001972:	4a5b      	ldr	r2, [pc, #364]	; (8001ae0 <HAL_GPIO_Init+0x310>)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a52      	ldr	r2, [pc, #328]	; (8001ae4 <HAL_GPIO_Init+0x314>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d02b      	beq.n	80019f6 <HAL_GPIO_Init+0x226>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a51      	ldr	r2, [pc, #324]	; (8001ae8 <HAL_GPIO_Init+0x318>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d025      	beq.n	80019f2 <HAL_GPIO_Init+0x222>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a50      	ldr	r2, [pc, #320]	; (8001aec <HAL_GPIO_Init+0x31c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d01f      	beq.n	80019ee <HAL_GPIO_Init+0x21e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4f      	ldr	r2, [pc, #316]	; (8001af0 <HAL_GPIO_Init+0x320>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d019      	beq.n	80019ea <HAL_GPIO_Init+0x21a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4e      	ldr	r2, [pc, #312]	; (8001af4 <HAL_GPIO_Init+0x324>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0x216>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4d      	ldr	r2, [pc, #308]	; (8001af8 <HAL_GPIO_Init+0x328>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00d      	beq.n	80019e2 <HAL_GPIO_Init+0x212>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <HAL_GPIO_Init+0x32c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <HAL_GPIO_Init+0x20e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4b      	ldr	r2, [pc, #300]	; (8001b00 <HAL_GPIO_Init+0x330>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d101      	bne.n	80019da <HAL_GPIO_Init+0x20a>
 80019d6:	2307      	movs	r3, #7
 80019d8:	e00e      	b.n	80019f8 <HAL_GPIO_Init+0x228>
 80019da:	2308      	movs	r3, #8
 80019dc:	e00c      	b.n	80019f8 <HAL_GPIO_Init+0x228>
 80019de:	2306      	movs	r3, #6
 80019e0:	e00a      	b.n	80019f8 <HAL_GPIO_Init+0x228>
 80019e2:	2305      	movs	r3, #5
 80019e4:	e008      	b.n	80019f8 <HAL_GPIO_Init+0x228>
 80019e6:	2304      	movs	r3, #4
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x228>
 80019ea:	2303      	movs	r3, #3
 80019ec:	e004      	b.n	80019f8 <HAL_GPIO_Init+0x228>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_Init+0x228>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_GPIO_Init+0x228>
 80019f6:	2300      	movs	r3, #0
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	f002 0203 	and.w	r2, r2, #3
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	4093      	lsls	r3, r2
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a08:	4935      	ldr	r1, [pc, #212]	; (8001ae0 <HAL_GPIO_Init+0x310>)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a16:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <HAL_GPIO_Init+0x334>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a3a:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <HAL_GPIO_Init+0x334>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a40:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <HAL_GPIO_Init+0x334>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a64:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <HAL_GPIO_Init+0x334>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <HAL_GPIO_Init+0x334>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_GPIO_Init+0x334>)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_GPIO_Init+0x334>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab8:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_GPIO_Init+0x334>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b0f      	cmp	r3, #15
 8001ac8:	f67f ae90 	bls.w	80017ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40021400 	.word	0x40021400
 8001afc:	40021800 	.word	0x40021800
 8001b00:	40021c00 	.word	0x40021c00
 8001b04:	40013c00 	.word	0x40013c00

08001b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b18:	787b      	ldrb	r3, [r7, #1]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b24:	e003      	b.n	8001b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b26:	887b      	ldrh	r3, [r7, #2]
 8001b28:	041a      	lsls	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	619a      	str	r2, [r3, #24]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b4c:	887a      	ldrh	r2, [r7, #2]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4013      	ands	r3, r2
 8001b52:	041a      	lsls	r2, r3, #16
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	400b      	ands	r3, r1
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	619a      	str	r2, [r3, #24]
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e264      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d075      	beq.n	8001c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b8e:	4ba3      	ldr	r3, [pc, #652]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d00c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9a:	4ba0      	ldr	r3, [pc, #640]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d112      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba6:	4b9d      	ldr	r3, [pc, #628]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bb2:	d10b      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	4b99      	ldr	r3, [pc, #612]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d05b      	beq.n	8001c78 <HAL_RCC_OscConfig+0x108>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d157      	bne.n	8001c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e23f      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCC_OscConfig+0x74>
 8001bd6:	4b91      	ldr	r3, [pc, #580]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a90      	ldr	r2, [pc, #576]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0xb0>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x98>
 8001bee:	4b8b      	ldr	r3, [pc, #556]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a8a      	ldr	r2, [pc, #552]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b88      	ldr	r3, [pc, #544]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a87      	ldr	r2, [pc, #540]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xb0>
 8001c08:	4b84      	ldr	r3, [pc, #528]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a83      	ldr	r2, [pc, #524]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b81      	ldr	r3, [pc, #516]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a80      	ldr	r2, [pc, #512]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff f88e 	bl	8000d48 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff f88a 	bl	8000d48 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e204      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xc0>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff f87a 	bl	8000d48 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff f876 	bl	8000d48 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1f0      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	4b6c      	ldr	r3, [pc, #432]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0xe8>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d063      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c86:	4b65      	ldr	r3, [pc, #404]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c92:	4b62      	ldr	r3, [pc, #392]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d11c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9e:	4b5f      	ldr	r3, [pc, #380]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d116      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x152>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e1c4      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4952      	ldr	r1, [pc, #328]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	e03a      	b.n	8001d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d020      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce0:	4b4f      	ldr	r3, [pc, #316]	; (8001e20 <HAL_RCC_OscConfig+0x2b0>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff f82f 	bl	8000d48 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cee:	f7ff f82b 	bl	8000d48 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1a5      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4940      	ldr	r1, [pc, #256]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
 8001d20:	e015      	b.n	8001d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d22:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <HAL_RCC_OscConfig+0x2b0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f80e 	bl	8000d48 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d30:	f7ff f80a 	bl	8000d48 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e184      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d030      	beq.n	8001dbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d016      	beq.n	8001d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d62:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_RCC_OscConfig+0x2b4>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7fe ffee 	bl	8000d48 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d70:	f7fe ffea 	bl	8000d48 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e164      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x200>
 8001d8e:	e015      	b.n	8001dbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_OscConfig+0x2b4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7fe ffd7 	bl	8000d48 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7fe ffd3 	bl	8000d48 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e14d      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80a0 	beq.w	8001f0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10f      	bne.n	8001dfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_OscConfig+0x2b8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d121      	bne.n	8001e4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_RCC_OscConfig+0x2b8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_RCC_OscConfig+0x2b8>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7fe ff99 	bl	8000d48 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	e011      	b.n	8001e3e <HAL_RCC_OscConfig+0x2ce>
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	42470000 	.word	0x42470000
 8001e24:	42470e80 	.word	0x42470e80
 8001e28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2c:	f7fe ff8c 	bl	8000d48 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e106      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	4b85      	ldr	r3, [pc, #532]	; (8002054 <HAL_RCC_OscConfig+0x4e4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d106      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2f0>
 8001e52:	4b81      	ldr	r3, [pc, #516]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e56:	4a80      	ldr	r2, [pc, #512]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5e:	e01c      	b.n	8001e9a <HAL_RCC_OscConfig+0x32a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d10c      	bne.n	8001e82 <HAL_RCC_OscConfig+0x312>
 8001e68:	4b7b      	ldr	r3, [pc, #492]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	4a7a      	ldr	r2, [pc, #488]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	6713      	str	r3, [r2, #112]	; 0x70
 8001e74:	4b78      	ldr	r3, [pc, #480]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	4a77      	ldr	r2, [pc, #476]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e80:	e00b      	b.n	8001e9a <HAL_RCC_OscConfig+0x32a>
 8001e82:	4b75      	ldr	r3, [pc, #468]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	4a74      	ldr	r2, [pc, #464]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8e:	4b72      	ldr	r3, [pc, #456]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	4a71      	ldr	r2, [pc, #452]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d015      	beq.n	8001ece <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea2:	f7fe ff51 	bl	8000d48 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7fe ff4d 	bl	8000d48 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0c5      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec0:	4b65      	ldr	r3, [pc, #404]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ee      	beq.n	8001eaa <HAL_RCC_OscConfig+0x33a>
 8001ecc:	e014      	b.n	8001ef8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7fe ff3b 	bl	8000d48 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7fe ff37 	bl	8000d48 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e0af      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eec:	4b5a      	ldr	r3, [pc, #360]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1ee      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d105      	bne.n	8001f0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efe:	4b56      	ldr	r3, [pc, #344]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a55      	ldr	r2, [pc, #340]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 809b 	beq.w	800204a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f14:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d05c      	beq.n	8001fda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d141      	bne.n	8001fac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f28:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_RCC_OscConfig+0x4ec>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7fe ff0b 	bl	8000d48 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f36:	f7fe ff07 	bl	8000d48 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e081      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f48:	4b43      	ldr	r3, [pc, #268]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	019b      	lsls	r3, r3, #6
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	041b      	lsls	r3, r3, #16
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	061b      	lsls	r3, r3, #24
 8001f78:	4937      	ldr	r1, [pc, #220]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_RCC_OscConfig+0x4ec>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7fe fee0 	bl	8000d48 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7fe fedc 	bl	8000d48 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e056      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x41c>
 8001faa:	e04e      	b.n	800204a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_OscConfig+0x4ec>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7fe fec9 	bl	8000d48 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fba:	f7fe fec5 	bl	8000d48 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e03f      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fcc:	4b22      	ldr	r3, [pc, #136]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f0      	bne.n	8001fba <HAL_RCC_OscConfig+0x44a>
 8001fd8:	e037      	b.n	800204a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e032      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d028      	beq.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d121      	bne.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d11a      	bne.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002016:	4013      	ands	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800201c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800201e:	4293      	cmp	r3, r2
 8002020:	d111      	bne.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	085b      	lsrs	r3, r3, #1
 800202e:	3b01      	subs	r3, #1
 8002030:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d107      	bne.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40007000 	.word	0x40007000
 8002058:	40023800 	.word	0x40023800
 800205c:	42470060 	.word	0x42470060

08002060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0cc      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b68      	ldr	r3, [pc, #416]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d90c      	bls.n	800209c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b65      	ldr	r3, [pc, #404]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b8      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b4:	4b59      	ldr	r3, [pc, #356]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a58      	ldr	r2, [pc, #352]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a52      	ldr	r2, [pc, #328]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	494d      	ldr	r1, [pc, #308]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d044      	beq.n	8002180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d119      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e07f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d003      	beq.n	800211e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211a:	2b03      	cmp	r3, #3
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	4b3f      	ldr	r3, [pc, #252]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e06f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e067      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4934      	ldr	r1, [pc, #208]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002150:	f7fe fdfa 	bl	8000d48 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7fe fdf6 	bl	8000d48 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e04f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d20c      	bcs.n	80021a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e032      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4916      	ldr	r1, [pc, #88]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	490e      	ldr	r1, [pc, #56]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021e6:	f000 f821 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	490a      	ldr	r1, [pc, #40]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	5ccb      	ldrb	r3, [r1, r3]
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1c8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fd5a 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023c00 	.word	0x40023c00
 800221c:	40023800 	.word	0x40023800
 8002220:	08003f1c 	.word	0x08003f1c
 8002224:	20000000 	.word	0x20000000
 8002228:	20000004 	.word	0x20000004

0800222c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	2300      	movs	r3, #0
 800223e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002244:	4b67      	ldr	r3, [pc, #412]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b08      	cmp	r3, #8
 800224e:	d00d      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x40>
 8002250:	2b08      	cmp	r3, #8
 8002252:	f200 80bd 	bhi.w	80023d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x34>
 800225a:	2b04      	cmp	r3, #4
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x3a>
 800225e:	e0b7      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002260:	4b61      	ldr	r3, [pc, #388]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002262:	60bb      	str	r3, [r7, #8]
       break;
 8002264:	e0b7      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002266:	4b61      	ldr	r3, [pc, #388]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002268:	60bb      	str	r3, [r7, #8]
      break;
 800226a:	e0b4      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800226c:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002274:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002276:	4b5b      	ldr	r3, [pc, #364]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d04d      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002282:	4b58      	ldr	r3, [pc, #352]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	099b      	lsrs	r3, r3, #6
 8002288:	461a      	mov	r2, r3
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	ea02 0800 	and.w	r8, r2, r0
 800229a:	ea03 0901 	and.w	r9, r3, r1
 800229e:	4640      	mov	r0, r8
 80022a0:	4649      	mov	r1, r9
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	014b      	lsls	r3, r1, #5
 80022ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022b0:	0142      	lsls	r2, r0, #5
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	ebb0 0008 	subs.w	r0, r0, r8
 80022ba:	eb61 0109 	sbc.w	r1, r1, r9
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	018b      	lsls	r3, r1, #6
 80022c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022cc:	0182      	lsls	r2, r0, #6
 80022ce:	1a12      	subs	r2, r2, r0
 80022d0:	eb63 0301 	sbc.w	r3, r3, r1
 80022d4:	f04f 0000 	mov.w	r0, #0
 80022d8:	f04f 0100 	mov.w	r1, #0
 80022dc:	00d9      	lsls	r1, r3, #3
 80022de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022e2:	00d0      	lsls	r0, r2, #3
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	eb12 0208 	adds.w	r2, r2, r8
 80022ec:	eb43 0309 	adc.w	r3, r3, r9
 80022f0:	f04f 0000 	mov.w	r0, #0
 80022f4:	f04f 0100 	mov.w	r1, #0
 80022f8:	0259      	lsls	r1, r3, #9
 80022fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80022fe:	0250      	lsls	r0, r2, #9
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	461a      	mov	r2, r3
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	f7fd ff5a 	bl	80001c8 <__aeabi_uldivmod>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4613      	mov	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e04a      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231e:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	099b      	lsrs	r3, r3, #6
 8002324:	461a      	mov	r2, r3
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	ea02 0400 	and.w	r4, r2, r0
 8002336:	ea03 0501 	and.w	r5, r3, r1
 800233a:	4620      	mov	r0, r4
 800233c:	4629      	mov	r1, r5
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	014b      	lsls	r3, r1, #5
 8002348:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800234c:	0142      	lsls	r2, r0, #5
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	1b00      	subs	r0, r0, r4
 8002354:	eb61 0105 	sbc.w	r1, r1, r5
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	018b      	lsls	r3, r1, #6
 8002362:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002366:	0182      	lsls	r2, r0, #6
 8002368:	1a12      	subs	r2, r2, r0
 800236a:	eb63 0301 	sbc.w	r3, r3, r1
 800236e:	f04f 0000 	mov.w	r0, #0
 8002372:	f04f 0100 	mov.w	r1, #0
 8002376:	00d9      	lsls	r1, r3, #3
 8002378:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800237c:	00d0      	lsls	r0, r2, #3
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	1912      	adds	r2, r2, r4
 8002384:	eb45 0303 	adc.w	r3, r5, r3
 8002388:	f04f 0000 	mov.w	r0, #0
 800238c:	f04f 0100 	mov.w	r1, #0
 8002390:	0299      	lsls	r1, r3, #10
 8002392:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002396:	0290      	lsls	r0, r2, #10
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	f7fd ff0e 	bl	80001c8 <__aeabi_uldivmod>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4613      	mov	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	0c1b      	lsrs	r3, r3, #16
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	3301      	adds	r3, #1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023cc:	60bb      	str	r3, [r7, #8]
      break;
 80023ce:	e002      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023d2:	60bb      	str	r3, [r7, #8]
      break;
 80023d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d6:	68bb      	ldr	r3, [r7, #8]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	00f42400 	.word	0x00f42400
 80023ec:	007a1200 	.word	0x007a1200

080023f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_RCC_GetHCLKFreq+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000000 	.word	0x20000000

08002408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800240c:	f7ff fff0 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0a9b      	lsrs	r3, r3, #10
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4903      	ldr	r1, [pc, #12]	; (800242c <HAL_RCC_GetPCLK1Freq+0x24>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800
 800242c:	08003f2c 	.word	0x08003f2c

08002430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002434:	f7ff ffdc 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002438:	4602      	mov	r2, r0
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	0b5b      	lsrs	r3, r3, #13
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	4903      	ldr	r1, [pc, #12]	; (8002454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002446:	5ccb      	ldrb	r3, [r1, r3]
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	08003f2c 	.word	0x08003f2c

08002458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e03f      	b.n	80024ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fa26 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2224      	movs	r2, #36	; 0x24
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800249a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fe65 	bl	800316c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	4613      	mov	r3, r2
 80024fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b20      	cmp	r3, #32
 800250a:	d11d      	bne.n	8002548 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_UART_Receive_DMA+0x26>
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e016      	b.n	800254a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_UART_Receive_DMA+0x38>
 8002526:	2302      	movs	r3, #2
 8002528:	e00f      	b.n	800254a <HAL_UART_Receive_DMA+0x58>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	461a      	mov	r2, r3
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fbb8 	bl	8002cb4 <UART_Start_Receive_DMA>
 8002544:	4603      	mov	r3, r0
 8002546:	e000      	b.n	800254a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002548:	2302      	movs	r3, #2
  }
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0ba      	sub	sp, #232	; 0xe8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10f      	bne.n	80025ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800259a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_UART_IRQHandler+0x66>
 80025a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fd1f 	bl	8002ff6 <UART_Receive_IT>
      return;
 80025b8:	e256      	b.n	8002a68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80de 	beq.w	8002780 <HAL_UART_IRQHandler+0x22c>
 80025c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80d1 	beq.w	8002780 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_UART_IRQHandler+0xae>
 80025ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f043 0201 	orr.w	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_UART_IRQHandler+0xd2>
 800260e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f043 0202 	orr.w	r2, r3, #2
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_UART_IRQHandler+0xf6>
 8002632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f043 0204 	orr.w	r2, r3, #4
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800264a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d011      	beq.n	800267a <HAL_UART_IRQHandler+0x126>
 8002656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f043 0208 	orr.w	r2, r3, #8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 81ed 	beq.w	8002a5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_UART_IRQHandler+0x14e>
 8002690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fcaa 	bl	8002ff6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <HAL_UART_IRQHandler+0x17a>
 80026c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d04f      	beq.n	800276e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fbb2 	bl	8002e38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b40      	cmp	r3, #64	; 0x40
 80026e0:	d141      	bne.n	8002766 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3314      	adds	r3, #20
 80026e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026f0:	e853 3f00 	ldrex	r3, [r3]
 80026f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3314      	adds	r3, #20
 800270a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800270e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800271a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800271e:	e841 2300 	strex	r3, r2, [r1]
 8002722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1d9      	bne.n	80026e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	2b00      	cmp	r3, #0
 8002734:	d013      	beq.n	800275e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273a:	4a7d      	ldr	r2, [pc, #500]	; (8002930 <HAL_UART_IRQHandler+0x3dc>)
 800273c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fdb8 	bl	80012b8 <HAL_DMA_Abort_IT>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002758:	4610      	mov	r0, r2
 800275a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275c:	e00e      	b.n	800277c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f99a 	bl	8002a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002764:	e00a      	b.n	800277c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f996 	bl	8002a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800276c:	e006      	b.n	800277c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f992 	bl	8002a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800277a:	e170      	b.n	8002a5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277c:	bf00      	nop
    return;
 800277e:	e16e      	b.n	8002a5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	2b01      	cmp	r3, #1
 8002786:	f040 814a 	bne.w	8002a1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800278a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8143 	beq.w	8002a1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 813c 	beq.w	8002a1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	f040 80b4 	bne.w	8002934 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8140 	beq.w	8002a62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027ea:	429a      	cmp	r2, r3
 80027ec:	f080 8139 	bcs.w	8002a62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002802:	f000 8088 	beq.w	8002916 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	330c      	adds	r3, #12
 800280c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800281c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002832:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800283e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002842:	e841 2300 	strex	r3, r2, [r1]
 8002846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800284a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1d9      	bne.n	8002806 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3314      	adds	r3, #20
 8002858:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800285c:	e853 3f00 	ldrex	r3, [r3]
 8002860:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3314      	adds	r3, #20
 8002872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002876:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800287a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800287e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002882:	e841 2300 	strex	r3, r2, [r1]
 8002886:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e1      	bne.n	8002852 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3314      	adds	r3, #20
 8002894:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002898:	e853 3f00 	ldrex	r3, [r3]
 800289c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800289e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3314      	adds	r3, #20
 80028ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028ba:	e841 2300 	strex	r3, r2, [r1]
 80028be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1e3      	bne.n	800288e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	330c      	adds	r3, #12
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028de:	e853 3f00 	ldrex	r3, [r3]
 80028e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028e6:	f023 0310 	bic.w	r3, r3, #16
 80028ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	330c      	adds	r3, #12
 80028f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80028f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80028fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002900:	e841 2300 	strex	r3, r2, [r1]
 8002904:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e3      	bne.n	80028d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fc61 	bl	80011d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800291e:	b29b      	uxth	r3, r3
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	b29b      	uxth	r3, r3
 8002924:	4619      	mov	r1, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8c0 	bl	8002aac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800292c:	e099      	b.n	8002a62 <HAL_UART_IRQHandler+0x50e>
 800292e:	bf00      	nop
 8002930:	08002eff 	.word	0x08002eff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800293c:	b29b      	uxth	r3, r3
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 808b 	beq.w	8002a66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8086 	beq.w	8002a66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	330c      	adds	r3, #12
 8002960:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800296a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002970:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	330c      	adds	r3, #12
 800297a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800297e:	647a      	str	r2, [r7, #68]	; 0x44
 8002980:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800298c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e3      	bne.n	800295a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	e853 3f00 	ldrex	r3, [r3]
 80029a0:	623b      	str	r3, [r7, #32]
   return(result);
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3314      	adds	r3, #20
 80029b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029b6:	633a      	str	r2, [r7, #48]	; 0x30
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029be:	e841 2300 	strex	r3, r2, [r1]
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1e3      	bne.n	8002992 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	330c      	adds	r3, #12
 80029de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	e853 3f00 	ldrex	r3, [r3]
 80029e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0310 	bic.w	r3, r3, #16
 80029ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	330c      	adds	r3, #12
 80029f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80029fc:	61fa      	str	r2, [r7, #28]
 80029fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	69b9      	ldr	r1, [r7, #24]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	e841 2300 	strex	r3, r2, [r1]
 8002a08:	617b      	str	r3, [r7, #20]
   return(result);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e3      	bne.n	80029d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f848 	bl	8002aac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a1c:	e023      	b.n	8002a66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_UART_IRQHandler+0x4ea>
 8002a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fa75 	bl	8002f26 <UART_Transmit_IT>
    return;
 8002a3c:	e014      	b.n	8002a68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00e      	beq.n	8002a68 <HAL_UART_IRQHandler+0x514>
 8002a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fab5 	bl	8002fc6 <UART_EndTransmit_IT>
    return;
 8002a5c:	e004      	b.n	8002a68 <HAL_UART_IRQHandler+0x514>
    return;
 8002a5e:	bf00      	nop
 8002a60:	e002      	b.n	8002a68 <HAL_UART_IRQHandler+0x514>
      return;
 8002a62:	bf00      	nop
 8002a64:	e000      	b.n	8002a68 <HAL_UART_IRQHandler+0x514>
      return;
 8002a66:	bf00      	nop
  }
}
 8002a68:	37e8      	adds	r7, #232	; 0xe8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop

08002a70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b09c      	sub	sp, #112	; 0x70
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d172      	bne.n	8002bc6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002afc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	330c      	adds	r3, #12
 8002b04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b06:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b08:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b0e:	e841 2300 	strex	r3, r2, [r1]
 8002b12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1e5      	bne.n	8002ae6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3314      	adds	r3, #20
 8002b20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	667b      	str	r3, [r7, #100]	; 0x64
 8002b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3314      	adds	r3, #20
 8002b38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b3a:	647a      	str	r2, [r7, #68]	; 0x44
 8002b3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e5      	bne.n	8002b1a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3314      	adds	r3, #20
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	e853 3f00 	ldrex	r3, [r3]
 8002b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b64:	663b      	str	r3, [r7, #96]	; 0x60
 8002b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b6e:	633a      	str	r2, [r7, #48]	; 0x30
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b76:	e841 2300 	strex	r3, r2, [r1]
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1e5      	bne.n	8002b4e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d119      	bne.n	8002bc6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	330c      	adds	r3, #12
 8002b98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f023 0310 	bic.w	r3, r3, #16
 8002ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	330c      	adds	r3, #12
 8002bb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002bb2:	61fa      	str	r2, [r7, #28]
 8002bb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e5      	bne.n	8002b92 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d106      	bne.n	8002bdc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002bd6:	f7ff ff69 	bl	8002aac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002bda:	e002      	b.n	8002be2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002bdc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002bde:	f7fd fe2b 	bl	8000838 <HAL_UART_RxCpltCallback>
}
 8002be2:	bf00      	nop
 8002be4:	3770      	adds	r7, #112	; 0x70
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d108      	bne.n	8002c12 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	4619      	mov	r1, r3
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff ff4e 	bl	8002aac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c10:	e002      	b.n	8002c18 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f7ff ff36 	bl	8002a84 <HAL_UART_RxHalfCpltCallback>
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	2b80      	cmp	r3, #128	; 0x80
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b21      	cmp	r3, #33	; 0x21
 8002c52:	d108      	bne.n	8002c66 <UART_DMAError+0x46>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002c60:	68b8      	ldr	r0, [r7, #8]
 8002c62:	f000 f8c1 	bl	8002de8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b22      	cmp	r3, #34	; 0x22
 8002c86:	d108      	bne.n	8002c9a <UART_DMAError+0x7a>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2200      	movs	r2, #0
 8002c92:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002c94:	68b8      	ldr	r0, [r7, #8]
 8002c96:	f000 f8cf 	bl	8002e38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f043 0210 	orr.w	r2, r3, #16
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ca6:	68b8      	ldr	r0, [r7, #8]
 8002ca8:	f7ff fef6 	bl	8002a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b098      	sub	sp, #96	; 0x60
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2222      	movs	r2, #34	; 0x22
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	4a3e      	ldr	r2, [pc, #248]	; (8002ddc <UART_Start_Receive_DMA+0x128>)
 8002ce2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	4a3d      	ldr	r2, [pc, #244]	; (8002de0 <UART_Start_Receive_DMA+0x12c>)
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	4a3c      	ldr	r2, [pc, #240]	; (8002de4 <UART_Start_Receive_DMA+0x130>)
 8002cf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002cfc:	f107 0308 	add.w	r3, r7, #8
 8002d00:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	f7fe fa08 	bl	8001128 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	330c      	adds	r3, #12
 8002d54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d56:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d5e:	e841 2300 	strex	r3, r2, [r1]
 8002d62:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e5      	bne.n	8002d36 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3314      	adds	r3, #20
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	657b      	str	r3, [r7, #84]	; 0x54
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3314      	adds	r3, #20
 8002d88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d92:	e841 2300 	strex	r3, r2, [r1]
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1e5      	bne.n	8002d6a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3314      	adds	r3, #20
 8002da4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	e853 3f00 	ldrex	r3, [r3]
 8002dac:	617b      	str	r3, [r7, #20]
   return(result);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db4:	653b      	str	r3, [r7, #80]	; 0x50
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3314      	adds	r3, #20
 8002dbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dbe:	627a      	str	r2, [r7, #36]	; 0x24
 8002dc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc2:	6a39      	ldr	r1, [r7, #32]
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc6:	e841 2300 	strex	r3, r2, [r1]
 8002dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1e5      	bne.n	8002d9e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3760      	adds	r7, #96	; 0x60
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	08002ac5 	.word	0x08002ac5
 8002de0:	08002beb 	.word	0x08002beb
 8002de4:	08002c21 	.word	0x08002c21

08002de8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	61ba      	str	r2, [r7, #24]
 8002e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	6979      	ldr	r1, [r7, #20]
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e5      	bne.n	8002df0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002e2c:	bf00      	nop
 8002e2e:	3724      	adds	r7, #36	; 0x24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b095      	sub	sp, #84	; 0x54
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4a:	e853 3f00 	ldrex	r3, [r3]
 8002e4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e60:	643a      	str	r2, [r7, #64]	; 0x40
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e68:	e841 2300 	strex	r3, r2, [r1]
 8002e6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e5      	bne.n	8002e40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3314      	adds	r3, #20
 8002e7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	e853 3f00 	ldrex	r3, [r3]
 8002e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3314      	adds	r3, #20
 8002e92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e5      	bne.n	8002e74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d119      	bne.n	8002ee4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	e853 3f00 	ldrex	r3, [r3]
 8002ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f023 0310 	bic.w	r3, r3, #16
 8002ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ed0:	61ba      	str	r2, [r7, #24]
 8002ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed4:	6979      	ldr	r1, [r7, #20]
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	e841 2300 	strex	r3, r2, [r1]
 8002edc:	613b      	str	r3, [r7, #16]
   return(result);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e5      	bne.n	8002eb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ef2:	bf00      	nop
 8002ef4:	3754      	adds	r7, #84	; 0x54
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7ff fdbd 	bl	8002a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b21      	cmp	r3, #33	; 0x21
 8002f38:	d13e      	bne.n	8002fb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f42:	d114      	bne.n	8002f6e <UART_Transmit_IT+0x48>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d110      	bne.n	8002f6e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	1c9a      	adds	r2, r3, #2
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	621a      	str	r2, [r3, #32]
 8002f6c:	e008      	b.n	8002f80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	1c59      	adds	r1, r3, #1
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6211      	str	r1, [r2, #32]
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10f      	bne.n	8002fb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e000      	b.n	8002fba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fb8:	2302      	movs	r3, #2
  }
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff fd42 	bl	8002a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b08c      	sub	sp, #48	; 0x30
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b22      	cmp	r3, #34	; 0x22
 8003008:	f040 80ab 	bne.w	8003162 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003014:	d117      	bne.n	8003046 <UART_Receive_IT+0x50>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d113      	bne.n	8003046 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800301e:	2300      	movs	r3, #0
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	b29b      	uxth	r3, r3
 8003030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003034:	b29a      	uxth	r2, r3
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	1c9a      	adds	r2, r3, #2
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
 8003044:	e026      	b.n	8003094 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800304c:	2300      	movs	r3, #0
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003058:	d007      	beq.n	800306a <UART_Receive_IT+0x74>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <UART_Receive_IT+0x82>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	e008      	b.n	800308a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003084:	b2da      	uxtb	r2, r3
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29b      	uxth	r3, r3
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4619      	mov	r1, r3
 80030a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d15a      	bne.n	800315e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0220 	bic.w	r2, r2, #32
 80030b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d135      	bne.n	8003154 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	613b      	str	r3, [r7, #16]
   return(result);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f023 0310 	bic.w	r3, r3, #16
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	330c      	adds	r3, #12
 800310c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310e:	623a      	str	r2, [r7, #32]
 8003110:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	69f9      	ldr	r1, [r7, #28]
 8003114:	6a3a      	ldr	r2, [r7, #32]
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	61bb      	str	r3, [r7, #24]
   return(result);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e5      	bne.n	80030ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b10      	cmp	r3, #16
 800312e:	d10a      	bne.n	8003146 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800314a:	4619      	mov	r1, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fcad 	bl	8002aac <HAL_UARTEx_RxEventCallback>
 8003152:	e002      	b.n	800315a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7fd fb6f 	bl	8000838 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e002      	b.n	8003164 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003162:	2302      	movs	r3, #2
  }
}
 8003164:	4618      	mov	r0, r3
 8003166:	3730      	adds	r7, #48	; 0x30
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800316c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003170:	b09f      	sub	sp, #124	; 0x7c
 8003172:	af00      	add	r7, sp, #0
 8003174:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003182:	68d9      	ldr	r1, [r3, #12]
 8003184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	ea40 0301 	orr.w	r3, r0, r1
 800318c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800318e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	431a      	orrs	r2, r3
 8003198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	431a      	orrs	r2, r3
 800319e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80031a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031b0:	f021 010c 	bic.w	r1, r1, #12
 80031b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ba:	430b      	orrs	r3, r1
 80031bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ca:	6999      	ldr	r1, [r3, #24]
 80031cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	ea40 0301 	orr.w	r3, r0, r1
 80031d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4bc5      	ldr	r3, [pc, #788]	; (80034f0 <UART_SetConfig+0x384>)
 80031dc:	429a      	cmp	r2, r3
 80031de:	d004      	beq.n	80031ea <UART_SetConfig+0x7e>
 80031e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4bc3      	ldr	r3, [pc, #780]	; (80034f4 <UART_SetConfig+0x388>)
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d103      	bne.n	80031f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031ea:	f7ff f921 	bl	8002430 <HAL_RCC_GetPCLK2Freq>
 80031ee:	6778      	str	r0, [r7, #116]	; 0x74
 80031f0:	e002      	b.n	80031f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031f2:	f7ff f909 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 80031f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003200:	f040 80b6 	bne.w	8003370 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003206:	461c      	mov	r4, r3
 8003208:	f04f 0500 	mov.w	r5, #0
 800320c:	4622      	mov	r2, r4
 800320e:	462b      	mov	r3, r5
 8003210:	1891      	adds	r1, r2, r2
 8003212:	6439      	str	r1, [r7, #64]	; 0x40
 8003214:	415b      	adcs	r3, r3
 8003216:	647b      	str	r3, [r7, #68]	; 0x44
 8003218:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800321c:	1912      	adds	r2, r2, r4
 800321e:	eb45 0303 	adc.w	r3, r5, r3
 8003222:	f04f 0000 	mov.w	r0, #0
 8003226:	f04f 0100 	mov.w	r1, #0
 800322a:	00d9      	lsls	r1, r3, #3
 800322c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003230:	00d0      	lsls	r0, r2, #3
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	1911      	adds	r1, r2, r4
 8003238:	6639      	str	r1, [r7, #96]	; 0x60
 800323a:	416b      	adcs	r3, r5
 800323c:	667b      	str	r3, [r7, #100]	; 0x64
 800323e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	1891      	adds	r1, r2, r2
 800324a:	63b9      	str	r1, [r7, #56]	; 0x38
 800324c:	415b      	adcs	r3, r3
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003254:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003258:	f7fc ffb6 	bl	80001c8 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4ba5      	ldr	r3, [pc, #660]	; (80034f8 <UART_SetConfig+0x38c>)
 8003262:	fba3 2302 	umull	r2, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	011e      	lsls	r6, r3, #4
 800326a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800326c:	461c      	mov	r4, r3
 800326e:	f04f 0500 	mov.w	r5, #0
 8003272:	4622      	mov	r2, r4
 8003274:	462b      	mov	r3, r5
 8003276:	1891      	adds	r1, r2, r2
 8003278:	6339      	str	r1, [r7, #48]	; 0x30
 800327a:	415b      	adcs	r3, r3
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
 800327e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003282:	1912      	adds	r2, r2, r4
 8003284:	eb45 0303 	adc.w	r3, r5, r3
 8003288:	f04f 0000 	mov.w	r0, #0
 800328c:	f04f 0100 	mov.w	r1, #0
 8003290:	00d9      	lsls	r1, r3, #3
 8003292:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003296:	00d0      	lsls	r0, r2, #3
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	1911      	adds	r1, r2, r4
 800329e:	65b9      	str	r1, [r7, #88]	; 0x58
 80032a0:	416b      	adcs	r3, r5
 80032a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	461a      	mov	r2, r3
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	1891      	adds	r1, r2, r2
 80032b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80032b2:	415b      	adcs	r3, r3
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032be:	f7fc ff83 	bl	80001c8 <__aeabi_uldivmod>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4b8c      	ldr	r3, [pc, #560]	; (80034f8 <UART_SetConfig+0x38c>)
 80032c8:	fba3 1302 	umull	r1, r3, r3, r2
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	2164      	movs	r1, #100	; 0x64
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	3332      	adds	r3, #50	; 0x32
 80032da:	4a87      	ldr	r2, [pc, #540]	; (80034f8 <UART_SetConfig+0x38c>)
 80032dc:	fba2 2303 	umull	r2, r3, r2, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032e8:	441e      	add	r6, r3
 80032ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ec:	4618      	mov	r0, r3
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	1894      	adds	r4, r2, r2
 80032f8:	623c      	str	r4, [r7, #32]
 80032fa:	415b      	adcs	r3, r3
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
 80032fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003302:	1812      	adds	r2, r2, r0
 8003304:	eb41 0303 	adc.w	r3, r1, r3
 8003308:	f04f 0400 	mov.w	r4, #0
 800330c:	f04f 0500 	mov.w	r5, #0
 8003310:	00dd      	lsls	r5, r3, #3
 8003312:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003316:	00d4      	lsls	r4, r2, #3
 8003318:	4622      	mov	r2, r4
 800331a:	462b      	mov	r3, r5
 800331c:	1814      	adds	r4, r2, r0
 800331e:	653c      	str	r4, [r7, #80]	; 0x50
 8003320:	414b      	adcs	r3, r1
 8003322:	657b      	str	r3, [r7, #84]	; 0x54
 8003324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	461a      	mov	r2, r3
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	1891      	adds	r1, r2, r2
 8003330:	61b9      	str	r1, [r7, #24]
 8003332:	415b      	adcs	r3, r3
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800333a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800333e:	f7fc ff43 	bl	80001c8 <__aeabi_uldivmod>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4b6c      	ldr	r3, [pc, #432]	; (80034f8 <UART_SetConfig+0x38c>)
 8003348:	fba3 1302 	umull	r1, r3, r3, r2
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	2164      	movs	r1, #100	; 0x64
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	3332      	adds	r3, #50	; 0x32
 800335a:	4a67      	ldr	r2, [pc, #412]	; (80034f8 <UART_SetConfig+0x38c>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	f003 0207 	and.w	r2, r3, #7
 8003366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4432      	add	r2, r6
 800336c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800336e:	e0b9      	b.n	80034e4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003372:	461c      	mov	r4, r3
 8003374:	f04f 0500 	mov.w	r5, #0
 8003378:	4622      	mov	r2, r4
 800337a:	462b      	mov	r3, r5
 800337c:	1891      	adds	r1, r2, r2
 800337e:	6139      	str	r1, [r7, #16]
 8003380:	415b      	adcs	r3, r3
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003388:	1912      	adds	r2, r2, r4
 800338a:	eb45 0303 	adc.w	r3, r5, r3
 800338e:	f04f 0000 	mov.w	r0, #0
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	00d9      	lsls	r1, r3, #3
 8003398:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800339c:	00d0      	lsls	r0, r2, #3
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	eb12 0804 	adds.w	r8, r2, r4
 80033a6:	eb43 0905 	adc.w	r9, r3, r5
 80033aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	008b      	lsls	r3, r1, #2
 80033be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033c2:	0082      	lsls	r2, r0, #2
 80033c4:	4640      	mov	r0, r8
 80033c6:	4649      	mov	r1, r9
 80033c8:	f7fc fefe 	bl	80001c8 <__aeabi_uldivmod>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4b49      	ldr	r3, [pc, #292]	; (80034f8 <UART_SetConfig+0x38c>)
 80033d2:	fba3 2302 	umull	r2, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	011e      	lsls	r6, r3, #4
 80033da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033dc:	4618      	mov	r0, r3
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	1894      	adds	r4, r2, r2
 80033e8:	60bc      	str	r4, [r7, #8]
 80033ea:	415b      	adcs	r3, r3
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033f2:	1812      	adds	r2, r2, r0
 80033f4:	eb41 0303 	adc.w	r3, r1, r3
 80033f8:	f04f 0400 	mov.w	r4, #0
 80033fc:	f04f 0500 	mov.w	r5, #0
 8003400:	00dd      	lsls	r5, r3, #3
 8003402:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003406:	00d4      	lsls	r4, r2, #3
 8003408:	4622      	mov	r2, r4
 800340a:	462b      	mov	r3, r5
 800340c:	1814      	adds	r4, r2, r0
 800340e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003410:	414b      	adcs	r3, r1
 8003412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4618      	mov	r0, r3
 800341a:	f04f 0100 	mov.w	r1, #0
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	008b      	lsls	r3, r1, #2
 8003428:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800342c:	0082      	lsls	r2, r0, #2
 800342e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003432:	f7fc fec9 	bl	80001c8 <__aeabi_uldivmod>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4b2f      	ldr	r3, [pc, #188]	; (80034f8 <UART_SetConfig+0x38c>)
 800343c:	fba3 1302 	umull	r1, r3, r3, r2
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	2164      	movs	r1, #100	; 0x64
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	3332      	adds	r3, #50	; 0x32
 800344e:	4a2a      	ldr	r2, [pc, #168]	; (80034f8 <UART_SetConfig+0x38c>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345a:	441e      	add	r6, r3
 800345c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800345e:	4618      	mov	r0, r3
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	1894      	adds	r4, r2, r2
 800346a:	603c      	str	r4, [r7, #0]
 800346c:	415b      	adcs	r3, r3
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003474:	1812      	adds	r2, r2, r0
 8003476:	eb41 0303 	adc.w	r3, r1, r3
 800347a:	f04f 0400 	mov.w	r4, #0
 800347e:	f04f 0500 	mov.w	r5, #0
 8003482:	00dd      	lsls	r5, r3, #3
 8003484:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003488:	00d4      	lsls	r4, r2, #3
 800348a:	4622      	mov	r2, r4
 800348c:	462b      	mov	r3, r5
 800348e:	eb12 0a00 	adds.w	sl, r2, r0
 8003492:	eb43 0b01 	adc.w	fp, r3, r1
 8003496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4618      	mov	r0, r3
 800349c:	f04f 0100 	mov.w	r1, #0
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	008b      	lsls	r3, r1, #2
 80034aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034ae:	0082      	lsls	r2, r0, #2
 80034b0:	4650      	mov	r0, sl
 80034b2:	4659      	mov	r1, fp
 80034b4:	f7fc fe88 	bl	80001c8 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <UART_SetConfig+0x38c>)
 80034be:	fba3 1302 	umull	r1, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2164      	movs	r1, #100	; 0x64
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	3332      	adds	r3, #50	; 0x32
 80034d0:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <UART_SetConfig+0x38c>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	f003 020f 	and.w	r2, r3, #15
 80034dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4432      	add	r2, r6
 80034e2:	609a      	str	r2, [r3, #8]
}
 80034e4:	bf00      	nop
 80034e6:	377c      	adds	r7, #124	; 0x7c
 80034e8:	46bd      	mov	sp, r7
 80034ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ee:	bf00      	nop
 80034f0:	40011000 	.word	0x40011000
 80034f4:	40011400 	.word	0x40011400
 80034f8:	51eb851f 	.word	0x51eb851f

080034fc <__errno>:
 80034fc:	4b01      	ldr	r3, [pc, #4]	; (8003504 <__errno+0x8>)
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	2000000c 	.word	0x2000000c

08003508 <__libc_init_array>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	4d0d      	ldr	r5, [pc, #52]	; (8003540 <__libc_init_array+0x38>)
 800350c:	4c0d      	ldr	r4, [pc, #52]	; (8003544 <__libc_init_array+0x3c>)
 800350e:	1b64      	subs	r4, r4, r5
 8003510:	10a4      	asrs	r4, r4, #2
 8003512:	2600      	movs	r6, #0
 8003514:	42a6      	cmp	r6, r4
 8003516:	d109      	bne.n	800352c <__libc_init_array+0x24>
 8003518:	4d0b      	ldr	r5, [pc, #44]	; (8003548 <__libc_init_array+0x40>)
 800351a:	4c0c      	ldr	r4, [pc, #48]	; (800354c <__libc_init_array+0x44>)
 800351c:	f000 fce6 	bl	8003eec <_init>
 8003520:	1b64      	subs	r4, r4, r5
 8003522:	10a4      	asrs	r4, r4, #2
 8003524:	2600      	movs	r6, #0
 8003526:	42a6      	cmp	r6, r4
 8003528:	d105      	bne.n	8003536 <__libc_init_array+0x2e>
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003530:	4798      	blx	r3
 8003532:	3601      	adds	r6, #1
 8003534:	e7ee      	b.n	8003514 <__libc_init_array+0xc>
 8003536:	f855 3b04 	ldr.w	r3, [r5], #4
 800353a:	4798      	blx	r3
 800353c:	3601      	adds	r6, #1
 800353e:	e7f2      	b.n	8003526 <__libc_init_array+0x1e>
 8003540:	08003fa8 	.word	0x08003fa8
 8003544:	08003fa8 	.word	0x08003fa8
 8003548:	08003fa8 	.word	0x08003fa8
 800354c:	08003fac 	.word	0x08003fac

08003550 <memset>:
 8003550:	4402      	add	r2, r0
 8003552:	4603      	mov	r3, r0
 8003554:	4293      	cmp	r3, r2
 8003556:	d100      	bne.n	800355a <memset+0xa>
 8003558:	4770      	bx	lr
 800355a:	f803 1b01 	strb.w	r1, [r3], #1
 800355e:	e7f9      	b.n	8003554 <memset+0x4>

08003560 <_puts_r>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	460e      	mov	r6, r1
 8003564:	4605      	mov	r5, r0
 8003566:	b118      	cbz	r0, 8003570 <_puts_r+0x10>
 8003568:	6983      	ldr	r3, [r0, #24]
 800356a:	b90b      	cbnz	r3, 8003570 <_puts_r+0x10>
 800356c:	f000 fa48 	bl	8003a00 <__sinit>
 8003570:	69ab      	ldr	r3, [r5, #24]
 8003572:	68ac      	ldr	r4, [r5, #8]
 8003574:	b913      	cbnz	r3, 800357c <_puts_r+0x1c>
 8003576:	4628      	mov	r0, r5
 8003578:	f000 fa42 	bl	8003a00 <__sinit>
 800357c:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <_puts_r+0xd0>)
 800357e:	429c      	cmp	r4, r3
 8003580:	d120      	bne.n	80035c4 <_puts_r+0x64>
 8003582:	686c      	ldr	r4, [r5, #4]
 8003584:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003586:	07db      	lsls	r3, r3, #31
 8003588:	d405      	bmi.n	8003596 <_puts_r+0x36>
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	0598      	lsls	r0, r3, #22
 800358e:	d402      	bmi.n	8003596 <_puts_r+0x36>
 8003590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003592:	f000 fad3 	bl	8003b3c <__retarget_lock_acquire_recursive>
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	0719      	lsls	r1, r3, #28
 800359a:	d51d      	bpl.n	80035d8 <_puts_r+0x78>
 800359c:	6923      	ldr	r3, [r4, #16]
 800359e:	b1db      	cbz	r3, 80035d8 <_puts_r+0x78>
 80035a0:	3e01      	subs	r6, #1
 80035a2:	68a3      	ldr	r3, [r4, #8]
 80035a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035a8:	3b01      	subs	r3, #1
 80035aa:	60a3      	str	r3, [r4, #8]
 80035ac:	bb39      	cbnz	r1, 80035fe <_puts_r+0x9e>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	da38      	bge.n	8003624 <_puts_r+0xc4>
 80035b2:	4622      	mov	r2, r4
 80035b4:	210a      	movs	r1, #10
 80035b6:	4628      	mov	r0, r5
 80035b8:	f000 f848 	bl	800364c <__swbuf_r>
 80035bc:	3001      	adds	r0, #1
 80035be:	d011      	beq.n	80035e4 <_puts_r+0x84>
 80035c0:	250a      	movs	r5, #10
 80035c2:	e011      	b.n	80035e8 <_puts_r+0x88>
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <_puts_r+0xd4>)
 80035c6:	429c      	cmp	r4, r3
 80035c8:	d101      	bne.n	80035ce <_puts_r+0x6e>
 80035ca:	68ac      	ldr	r4, [r5, #8]
 80035cc:	e7da      	b.n	8003584 <_puts_r+0x24>
 80035ce:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <_puts_r+0xd8>)
 80035d0:	429c      	cmp	r4, r3
 80035d2:	bf08      	it	eq
 80035d4:	68ec      	ldreq	r4, [r5, #12]
 80035d6:	e7d5      	b.n	8003584 <_puts_r+0x24>
 80035d8:	4621      	mov	r1, r4
 80035da:	4628      	mov	r0, r5
 80035dc:	f000 f888 	bl	80036f0 <__swsetup_r>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d0dd      	beq.n	80035a0 <_puts_r+0x40>
 80035e4:	f04f 35ff 	mov.w	r5, #4294967295
 80035e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035ea:	07da      	lsls	r2, r3, #31
 80035ec:	d405      	bmi.n	80035fa <_puts_r+0x9a>
 80035ee:	89a3      	ldrh	r3, [r4, #12]
 80035f0:	059b      	lsls	r3, r3, #22
 80035f2:	d402      	bmi.n	80035fa <_puts_r+0x9a>
 80035f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035f6:	f000 faa2 	bl	8003b3e <__retarget_lock_release_recursive>
 80035fa:	4628      	mov	r0, r5
 80035fc:	bd70      	pop	{r4, r5, r6, pc}
 80035fe:	2b00      	cmp	r3, #0
 8003600:	da04      	bge.n	800360c <_puts_r+0xac>
 8003602:	69a2      	ldr	r2, [r4, #24]
 8003604:	429a      	cmp	r2, r3
 8003606:	dc06      	bgt.n	8003616 <_puts_r+0xb6>
 8003608:	290a      	cmp	r1, #10
 800360a:	d004      	beq.n	8003616 <_puts_r+0xb6>
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	6022      	str	r2, [r4, #0]
 8003612:	7019      	strb	r1, [r3, #0]
 8003614:	e7c5      	b.n	80035a2 <_puts_r+0x42>
 8003616:	4622      	mov	r2, r4
 8003618:	4628      	mov	r0, r5
 800361a:	f000 f817 	bl	800364c <__swbuf_r>
 800361e:	3001      	adds	r0, #1
 8003620:	d1bf      	bne.n	80035a2 <_puts_r+0x42>
 8003622:	e7df      	b.n	80035e4 <_puts_r+0x84>
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	250a      	movs	r5, #10
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	6022      	str	r2, [r4, #0]
 800362c:	701d      	strb	r5, [r3, #0]
 800362e:	e7db      	b.n	80035e8 <_puts_r+0x88>
 8003630:	08003f60 	.word	0x08003f60
 8003634:	08003f80 	.word	0x08003f80
 8003638:	08003f40 	.word	0x08003f40

0800363c <puts>:
 800363c:	4b02      	ldr	r3, [pc, #8]	; (8003648 <puts+0xc>)
 800363e:	4601      	mov	r1, r0
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	f7ff bf8d 	b.w	8003560 <_puts_r>
 8003646:	bf00      	nop
 8003648:	2000000c 	.word	0x2000000c

0800364c <__swbuf_r>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	460e      	mov	r6, r1
 8003650:	4614      	mov	r4, r2
 8003652:	4605      	mov	r5, r0
 8003654:	b118      	cbz	r0, 800365e <__swbuf_r+0x12>
 8003656:	6983      	ldr	r3, [r0, #24]
 8003658:	b90b      	cbnz	r3, 800365e <__swbuf_r+0x12>
 800365a:	f000 f9d1 	bl	8003a00 <__sinit>
 800365e:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <__swbuf_r+0x98>)
 8003660:	429c      	cmp	r4, r3
 8003662:	d12b      	bne.n	80036bc <__swbuf_r+0x70>
 8003664:	686c      	ldr	r4, [r5, #4]
 8003666:	69a3      	ldr	r3, [r4, #24]
 8003668:	60a3      	str	r3, [r4, #8]
 800366a:	89a3      	ldrh	r3, [r4, #12]
 800366c:	071a      	lsls	r2, r3, #28
 800366e:	d52f      	bpl.n	80036d0 <__swbuf_r+0x84>
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	b36b      	cbz	r3, 80036d0 <__swbuf_r+0x84>
 8003674:	6923      	ldr	r3, [r4, #16]
 8003676:	6820      	ldr	r0, [r4, #0]
 8003678:	1ac0      	subs	r0, r0, r3
 800367a:	6963      	ldr	r3, [r4, #20]
 800367c:	b2f6      	uxtb	r6, r6
 800367e:	4283      	cmp	r3, r0
 8003680:	4637      	mov	r7, r6
 8003682:	dc04      	bgt.n	800368e <__swbuf_r+0x42>
 8003684:	4621      	mov	r1, r4
 8003686:	4628      	mov	r0, r5
 8003688:	f000 f926 	bl	80038d8 <_fflush_r>
 800368c:	bb30      	cbnz	r0, 80036dc <__swbuf_r+0x90>
 800368e:	68a3      	ldr	r3, [r4, #8]
 8003690:	3b01      	subs	r3, #1
 8003692:	60a3      	str	r3, [r4, #8]
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	6022      	str	r2, [r4, #0]
 800369a:	701e      	strb	r6, [r3, #0]
 800369c:	6963      	ldr	r3, [r4, #20]
 800369e:	3001      	adds	r0, #1
 80036a0:	4283      	cmp	r3, r0
 80036a2:	d004      	beq.n	80036ae <__swbuf_r+0x62>
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	07db      	lsls	r3, r3, #31
 80036a8:	d506      	bpl.n	80036b8 <__swbuf_r+0x6c>
 80036aa:	2e0a      	cmp	r6, #10
 80036ac:	d104      	bne.n	80036b8 <__swbuf_r+0x6c>
 80036ae:	4621      	mov	r1, r4
 80036b0:	4628      	mov	r0, r5
 80036b2:	f000 f911 	bl	80038d8 <_fflush_r>
 80036b6:	b988      	cbnz	r0, 80036dc <__swbuf_r+0x90>
 80036b8:	4638      	mov	r0, r7
 80036ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <__swbuf_r+0x9c>)
 80036be:	429c      	cmp	r4, r3
 80036c0:	d101      	bne.n	80036c6 <__swbuf_r+0x7a>
 80036c2:	68ac      	ldr	r4, [r5, #8]
 80036c4:	e7cf      	b.n	8003666 <__swbuf_r+0x1a>
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <__swbuf_r+0xa0>)
 80036c8:	429c      	cmp	r4, r3
 80036ca:	bf08      	it	eq
 80036cc:	68ec      	ldreq	r4, [r5, #12]
 80036ce:	e7ca      	b.n	8003666 <__swbuf_r+0x1a>
 80036d0:	4621      	mov	r1, r4
 80036d2:	4628      	mov	r0, r5
 80036d4:	f000 f80c 	bl	80036f0 <__swsetup_r>
 80036d8:	2800      	cmp	r0, #0
 80036da:	d0cb      	beq.n	8003674 <__swbuf_r+0x28>
 80036dc:	f04f 37ff 	mov.w	r7, #4294967295
 80036e0:	e7ea      	b.n	80036b8 <__swbuf_r+0x6c>
 80036e2:	bf00      	nop
 80036e4:	08003f60 	.word	0x08003f60
 80036e8:	08003f80 	.word	0x08003f80
 80036ec:	08003f40 	.word	0x08003f40

080036f0 <__swsetup_r>:
 80036f0:	4b32      	ldr	r3, [pc, #200]	; (80037bc <__swsetup_r+0xcc>)
 80036f2:	b570      	push	{r4, r5, r6, lr}
 80036f4:	681d      	ldr	r5, [r3, #0]
 80036f6:	4606      	mov	r6, r0
 80036f8:	460c      	mov	r4, r1
 80036fa:	b125      	cbz	r5, 8003706 <__swsetup_r+0x16>
 80036fc:	69ab      	ldr	r3, [r5, #24]
 80036fe:	b913      	cbnz	r3, 8003706 <__swsetup_r+0x16>
 8003700:	4628      	mov	r0, r5
 8003702:	f000 f97d 	bl	8003a00 <__sinit>
 8003706:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <__swsetup_r+0xd0>)
 8003708:	429c      	cmp	r4, r3
 800370a:	d10f      	bne.n	800372c <__swsetup_r+0x3c>
 800370c:	686c      	ldr	r4, [r5, #4]
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003714:	0719      	lsls	r1, r3, #28
 8003716:	d42c      	bmi.n	8003772 <__swsetup_r+0x82>
 8003718:	06dd      	lsls	r5, r3, #27
 800371a:	d411      	bmi.n	8003740 <__swsetup_r+0x50>
 800371c:	2309      	movs	r3, #9
 800371e:	6033      	str	r3, [r6, #0]
 8003720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003724:	81a3      	strh	r3, [r4, #12]
 8003726:	f04f 30ff 	mov.w	r0, #4294967295
 800372a:	e03e      	b.n	80037aa <__swsetup_r+0xba>
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <__swsetup_r+0xd4>)
 800372e:	429c      	cmp	r4, r3
 8003730:	d101      	bne.n	8003736 <__swsetup_r+0x46>
 8003732:	68ac      	ldr	r4, [r5, #8]
 8003734:	e7eb      	b.n	800370e <__swsetup_r+0x1e>
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <__swsetup_r+0xd8>)
 8003738:	429c      	cmp	r4, r3
 800373a:	bf08      	it	eq
 800373c:	68ec      	ldreq	r4, [r5, #12]
 800373e:	e7e6      	b.n	800370e <__swsetup_r+0x1e>
 8003740:	0758      	lsls	r0, r3, #29
 8003742:	d512      	bpl.n	800376a <__swsetup_r+0x7a>
 8003744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003746:	b141      	cbz	r1, 800375a <__swsetup_r+0x6a>
 8003748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800374c:	4299      	cmp	r1, r3
 800374e:	d002      	beq.n	8003756 <__swsetup_r+0x66>
 8003750:	4630      	mov	r0, r6
 8003752:	f000 fa59 	bl	8003c08 <_free_r>
 8003756:	2300      	movs	r3, #0
 8003758:	6363      	str	r3, [r4, #52]	; 0x34
 800375a:	89a3      	ldrh	r3, [r4, #12]
 800375c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003760:	81a3      	strh	r3, [r4, #12]
 8003762:	2300      	movs	r3, #0
 8003764:	6063      	str	r3, [r4, #4]
 8003766:	6923      	ldr	r3, [r4, #16]
 8003768:	6023      	str	r3, [r4, #0]
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	f043 0308 	orr.w	r3, r3, #8
 8003770:	81a3      	strh	r3, [r4, #12]
 8003772:	6923      	ldr	r3, [r4, #16]
 8003774:	b94b      	cbnz	r3, 800378a <__swsetup_r+0x9a>
 8003776:	89a3      	ldrh	r3, [r4, #12]
 8003778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800377c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003780:	d003      	beq.n	800378a <__swsetup_r+0x9a>
 8003782:	4621      	mov	r1, r4
 8003784:	4630      	mov	r0, r6
 8003786:	f000 f9ff 	bl	8003b88 <__smakebuf_r>
 800378a:	89a0      	ldrh	r0, [r4, #12]
 800378c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003790:	f010 0301 	ands.w	r3, r0, #1
 8003794:	d00a      	beq.n	80037ac <__swsetup_r+0xbc>
 8003796:	2300      	movs	r3, #0
 8003798:	60a3      	str	r3, [r4, #8]
 800379a:	6963      	ldr	r3, [r4, #20]
 800379c:	425b      	negs	r3, r3
 800379e:	61a3      	str	r3, [r4, #24]
 80037a0:	6923      	ldr	r3, [r4, #16]
 80037a2:	b943      	cbnz	r3, 80037b6 <__swsetup_r+0xc6>
 80037a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037a8:	d1ba      	bne.n	8003720 <__swsetup_r+0x30>
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
 80037ac:	0781      	lsls	r1, r0, #30
 80037ae:	bf58      	it	pl
 80037b0:	6963      	ldrpl	r3, [r4, #20]
 80037b2:	60a3      	str	r3, [r4, #8]
 80037b4:	e7f4      	b.n	80037a0 <__swsetup_r+0xb0>
 80037b6:	2000      	movs	r0, #0
 80037b8:	e7f7      	b.n	80037aa <__swsetup_r+0xba>
 80037ba:	bf00      	nop
 80037bc:	2000000c 	.word	0x2000000c
 80037c0:	08003f60 	.word	0x08003f60
 80037c4:	08003f80 	.word	0x08003f80
 80037c8:	08003f40 	.word	0x08003f40

080037cc <__sflush_r>:
 80037cc:	898a      	ldrh	r2, [r1, #12]
 80037ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037d2:	4605      	mov	r5, r0
 80037d4:	0710      	lsls	r0, r2, #28
 80037d6:	460c      	mov	r4, r1
 80037d8:	d458      	bmi.n	800388c <__sflush_r+0xc0>
 80037da:	684b      	ldr	r3, [r1, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	dc05      	bgt.n	80037ec <__sflush_r+0x20>
 80037e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	dc02      	bgt.n	80037ec <__sflush_r+0x20>
 80037e6:	2000      	movs	r0, #0
 80037e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037ee:	2e00      	cmp	r6, #0
 80037f0:	d0f9      	beq.n	80037e6 <__sflush_r+0x1a>
 80037f2:	2300      	movs	r3, #0
 80037f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037f8:	682f      	ldr	r7, [r5, #0]
 80037fa:	602b      	str	r3, [r5, #0]
 80037fc:	d032      	beq.n	8003864 <__sflush_r+0x98>
 80037fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	075a      	lsls	r2, r3, #29
 8003804:	d505      	bpl.n	8003812 <__sflush_r+0x46>
 8003806:	6863      	ldr	r3, [r4, #4]
 8003808:	1ac0      	subs	r0, r0, r3
 800380a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800380c:	b10b      	cbz	r3, 8003812 <__sflush_r+0x46>
 800380e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003810:	1ac0      	subs	r0, r0, r3
 8003812:	2300      	movs	r3, #0
 8003814:	4602      	mov	r2, r0
 8003816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003818:	6a21      	ldr	r1, [r4, #32]
 800381a:	4628      	mov	r0, r5
 800381c:	47b0      	blx	r6
 800381e:	1c43      	adds	r3, r0, #1
 8003820:	89a3      	ldrh	r3, [r4, #12]
 8003822:	d106      	bne.n	8003832 <__sflush_r+0x66>
 8003824:	6829      	ldr	r1, [r5, #0]
 8003826:	291d      	cmp	r1, #29
 8003828:	d82c      	bhi.n	8003884 <__sflush_r+0xb8>
 800382a:	4a2a      	ldr	r2, [pc, #168]	; (80038d4 <__sflush_r+0x108>)
 800382c:	40ca      	lsrs	r2, r1
 800382e:	07d6      	lsls	r6, r2, #31
 8003830:	d528      	bpl.n	8003884 <__sflush_r+0xb8>
 8003832:	2200      	movs	r2, #0
 8003834:	6062      	str	r2, [r4, #4]
 8003836:	04d9      	lsls	r1, r3, #19
 8003838:	6922      	ldr	r2, [r4, #16]
 800383a:	6022      	str	r2, [r4, #0]
 800383c:	d504      	bpl.n	8003848 <__sflush_r+0x7c>
 800383e:	1c42      	adds	r2, r0, #1
 8003840:	d101      	bne.n	8003846 <__sflush_r+0x7a>
 8003842:	682b      	ldr	r3, [r5, #0]
 8003844:	b903      	cbnz	r3, 8003848 <__sflush_r+0x7c>
 8003846:	6560      	str	r0, [r4, #84]	; 0x54
 8003848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800384a:	602f      	str	r7, [r5, #0]
 800384c:	2900      	cmp	r1, #0
 800384e:	d0ca      	beq.n	80037e6 <__sflush_r+0x1a>
 8003850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003854:	4299      	cmp	r1, r3
 8003856:	d002      	beq.n	800385e <__sflush_r+0x92>
 8003858:	4628      	mov	r0, r5
 800385a:	f000 f9d5 	bl	8003c08 <_free_r>
 800385e:	2000      	movs	r0, #0
 8003860:	6360      	str	r0, [r4, #52]	; 0x34
 8003862:	e7c1      	b.n	80037e8 <__sflush_r+0x1c>
 8003864:	6a21      	ldr	r1, [r4, #32]
 8003866:	2301      	movs	r3, #1
 8003868:	4628      	mov	r0, r5
 800386a:	47b0      	blx	r6
 800386c:	1c41      	adds	r1, r0, #1
 800386e:	d1c7      	bne.n	8003800 <__sflush_r+0x34>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0c4      	beq.n	8003800 <__sflush_r+0x34>
 8003876:	2b1d      	cmp	r3, #29
 8003878:	d001      	beq.n	800387e <__sflush_r+0xb2>
 800387a:	2b16      	cmp	r3, #22
 800387c:	d101      	bne.n	8003882 <__sflush_r+0xb6>
 800387e:	602f      	str	r7, [r5, #0]
 8003880:	e7b1      	b.n	80037e6 <__sflush_r+0x1a>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	e7ad      	b.n	80037e8 <__sflush_r+0x1c>
 800388c:	690f      	ldr	r7, [r1, #16]
 800388e:	2f00      	cmp	r7, #0
 8003890:	d0a9      	beq.n	80037e6 <__sflush_r+0x1a>
 8003892:	0793      	lsls	r3, r2, #30
 8003894:	680e      	ldr	r6, [r1, #0]
 8003896:	bf08      	it	eq
 8003898:	694b      	ldreq	r3, [r1, #20]
 800389a:	600f      	str	r7, [r1, #0]
 800389c:	bf18      	it	ne
 800389e:	2300      	movne	r3, #0
 80038a0:	eba6 0807 	sub.w	r8, r6, r7
 80038a4:	608b      	str	r3, [r1, #8]
 80038a6:	f1b8 0f00 	cmp.w	r8, #0
 80038aa:	dd9c      	ble.n	80037e6 <__sflush_r+0x1a>
 80038ac:	6a21      	ldr	r1, [r4, #32]
 80038ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038b0:	4643      	mov	r3, r8
 80038b2:	463a      	mov	r2, r7
 80038b4:	4628      	mov	r0, r5
 80038b6:	47b0      	blx	r6
 80038b8:	2800      	cmp	r0, #0
 80038ba:	dc06      	bgt.n	80038ca <__sflush_r+0xfe>
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c2:	81a3      	strh	r3, [r4, #12]
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	e78e      	b.n	80037e8 <__sflush_r+0x1c>
 80038ca:	4407      	add	r7, r0
 80038cc:	eba8 0800 	sub.w	r8, r8, r0
 80038d0:	e7e9      	b.n	80038a6 <__sflush_r+0xda>
 80038d2:	bf00      	nop
 80038d4:	20400001 	.word	0x20400001

080038d8 <_fflush_r>:
 80038d8:	b538      	push	{r3, r4, r5, lr}
 80038da:	690b      	ldr	r3, [r1, #16]
 80038dc:	4605      	mov	r5, r0
 80038de:	460c      	mov	r4, r1
 80038e0:	b913      	cbnz	r3, 80038e8 <_fflush_r+0x10>
 80038e2:	2500      	movs	r5, #0
 80038e4:	4628      	mov	r0, r5
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	b118      	cbz	r0, 80038f2 <_fflush_r+0x1a>
 80038ea:	6983      	ldr	r3, [r0, #24]
 80038ec:	b90b      	cbnz	r3, 80038f2 <_fflush_r+0x1a>
 80038ee:	f000 f887 	bl	8003a00 <__sinit>
 80038f2:	4b14      	ldr	r3, [pc, #80]	; (8003944 <_fflush_r+0x6c>)
 80038f4:	429c      	cmp	r4, r3
 80038f6:	d11b      	bne.n	8003930 <_fflush_r+0x58>
 80038f8:	686c      	ldr	r4, [r5, #4]
 80038fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0ef      	beq.n	80038e2 <_fflush_r+0xa>
 8003902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003904:	07d0      	lsls	r0, r2, #31
 8003906:	d404      	bmi.n	8003912 <_fflush_r+0x3a>
 8003908:	0599      	lsls	r1, r3, #22
 800390a:	d402      	bmi.n	8003912 <_fflush_r+0x3a>
 800390c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800390e:	f000 f915 	bl	8003b3c <__retarget_lock_acquire_recursive>
 8003912:	4628      	mov	r0, r5
 8003914:	4621      	mov	r1, r4
 8003916:	f7ff ff59 	bl	80037cc <__sflush_r>
 800391a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800391c:	07da      	lsls	r2, r3, #31
 800391e:	4605      	mov	r5, r0
 8003920:	d4e0      	bmi.n	80038e4 <_fflush_r+0xc>
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	059b      	lsls	r3, r3, #22
 8003926:	d4dd      	bmi.n	80038e4 <_fflush_r+0xc>
 8003928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800392a:	f000 f908 	bl	8003b3e <__retarget_lock_release_recursive>
 800392e:	e7d9      	b.n	80038e4 <_fflush_r+0xc>
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <_fflush_r+0x70>)
 8003932:	429c      	cmp	r4, r3
 8003934:	d101      	bne.n	800393a <_fflush_r+0x62>
 8003936:	68ac      	ldr	r4, [r5, #8]
 8003938:	e7df      	b.n	80038fa <_fflush_r+0x22>
 800393a:	4b04      	ldr	r3, [pc, #16]	; (800394c <_fflush_r+0x74>)
 800393c:	429c      	cmp	r4, r3
 800393e:	bf08      	it	eq
 8003940:	68ec      	ldreq	r4, [r5, #12]
 8003942:	e7da      	b.n	80038fa <_fflush_r+0x22>
 8003944:	08003f60 	.word	0x08003f60
 8003948:	08003f80 	.word	0x08003f80
 800394c:	08003f40 	.word	0x08003f40

08003950 <std>:
 8003950:	2300      	movs	r3, #0
 8003952:	b510      	push	{r4, lr}
 8003954:	4604      	mov	r4, r0
 8003956:	e9c0 3300 	strd	r3, r3, [r0]
 800395a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800395e:	6083      	str	r3, [r0, #8]
 8003960:	8181      	strh	r1, [r0, #12]
 8003962:	6643      	str	r3, [r0, #100]	; 0x64
 8003964:	81c2      	strh	r2, [r0, #14]
 8003966:	6183      	str	r3, [r0, #24]
 8003968:	4619      	mov	r1, r3
 800396a:	2208      	movs	r2, #8
 800396c:	305c      	adds	r0, #92	; 0x5c
 800396e:	f7ff fdef 	bl	8003550 <memset>
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <std+0x38>)
 8003974:	6263      	str	r3, [r4, #36]	; 0x24
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <std+0x3c>)
 8003978:	62a3      	str	r3, [r4, #40]	; 0x28
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <std+0x40>)
 800397c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <std+0x44>)
 8003980:	6224      	str	r4, [r4, #32]
 8003982:	6323      	str	r3, [r4, #48]	; 0x30
 8003984:	bd10      	pop	{r4, pc}
 8003986:	bf00      	nop
 8003988:	08003d7d 	.word	0x08003d7d
 800398c:	08003d9f 	.word	0x08003d9f
 8003990:	08003dd7 	.word	0x08003dd7
 8003994:	08003dfb 	.word	0x08003dfb

08003998 <_cleanup_r>:
 8003998:	4901      	ldr	r1, [pc, #4]	; (80039a0 <_cleanup_r+0x8>)
 800399a:	f000 b8af 	b.w	8003afc <_fwalk_reent>
 800399e:	bf00      	nop
 80039a0:	080038d9 	.word	0x080038d9

080039a4 <__sfmoreglue>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	1e4a      	subs	r2, r1, #1
 80039a8:	2568      	movs	r5, #104	; 0x68
 80039aa:	4355      	muls	r5, r2
 80039ac:	460e      	mov	r6, r1
 80039ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039b2:	f000 f979 	bl	8003ca8 <_malloc_r>
 80039b6:	4604      	mov	r4, r0
 80039b8:	b140      	cbz	r0, 80039cc <__sfmoreglue+0x28>
 80039ba:	2100      	movs	r1, #0
 80039bc:	e9c0 1600 	strd	r1, r6, [r0]
 80039c0:	300c      	adds	r0, #12
 80039c2:	60a0      	str	r0, [r4, #8]
 80039c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039c8:	f7ff fdc2 	bl	8003550 <memset>
 80039cc:	4620      	mov	r0, r4
 80039ce:	bd70      	pop	{r4, r5, r6, pc}

080039d0 <__sfp_lock_acquire>:
 80039d0:	4801      	ldr	r0, [pc, #4]	; (80039d8 <__sfp_lock_acquire+0x8>)
 80039d2:	f000 b8b3 	b.w	8003b3c <__retarget_lock_acquire_recursive>
 80039d6:	bf00      	nop
 80039d8:	200001e4 	.word	0x200001e4

080039dc <__sfp_lock_release>:
 80039dc:	4801      	ldr	r0, [pc, #4]	; (80039e4 <__sfp_lock_release+0x8>)
 80039de:	f000 b8ae 	b.w	8003b3e <__retarget_lock_release_recursive>
 80039e2:	bf00      	nop
 80039e4:	200001e4 	.word	0x200001e4

080039e8 <__sinit_lock_acquire>:
 80039e8:	4801      	ldr	r0, [pc, #4]	; (80039f0 <__sinit_lock_acquire+0x8>)
 80039ea:	f000 b8a7 	b.w	8003b3c <__retarget_lock_acquire_recursive>
 80039ee:	bf00      	nop
 80039f0:	200001df 	.word	0x200001df

080039f4 <__sinit_lock_release>:
 80039f4:	4801      	ldr	r0, [pc, #4]	; (80039fc <__sinit_lock_release+0x8>)
 80039f6:	f000 b8a2 	b.w	8003b3e <__retarget_lock_release_recursive>
 80039fa:	bf00      	nop
 80039fc:	200001df 	.word	0x200001df

08003a00 <__sinit>:
 8003a00:	b510      	push	{r4, lr}
 8003a02:	4604      	mov	r4, r0
 8003a04:	f7ff fff0 	bl	80039e8 <__sinit_lock_acquire>
 8003a08:	69a3      	ldr	r3, [r4, #24]
 8003a0a:	b11b      	cbz	r3, 8003a14 <__sinit+0x14>
 8003a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a10:	f7ff bff0 	b.w	80039f4 <__sinit_lock_release>
 8003a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a18:	6523      	str	r3, [r4, #80]	; 0x50
 8003a1a:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <__sinit+0x68>)
 8003a1c:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <__sinit+0x6c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a22:	42a3      	cmp	r3, r4
 8003a24:	bf04      	itt	eq
 8003a26:	2301      	moveq	r3, #1
 8003a28:	61a3      	streq	r3, [r4, #24]
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f000 f820 	bl	8003a70 <__sfp>
 8003a30:	6060      	str	r0, [r4, #4]
 8003a32:	4620      	mov	r0, r4
 8003a34:	f000 f81c 	bl	8003a70 <__sfp>
 8003a38:	60a0      	str	r0, [r4, #8]
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f000 f818 	bl	8003a70 <__sfp>
 8003a40:	2200      	movs	r2, #0
 8003a42:	60e0      	str	r0, [r4, #12]
 8003a44:	2104      	movs	r1, #4
 8003a46:	6860      	ldr	r0, [r4, #4]
 8003a48:	f7ff ff82 	bl	8003950 <std>
 8003a4c:	68a0      	ldr	r0, [r4, #8]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	2109      	movs	r1, #9
 8003a52:	f7ff ff7d 	bl	8003950 <std>
 8003a56:	68e0      	ldr	r0, [r4, #12]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	2112      	movs	r1, #18
 8003a5c:	f7ff ff78 	bl	8003950 <std>
 8003a60:	2301      	movs	r3, #1
 8003a62:	61a3      	str	r3, [r4, #24]
 8003a64:	e7d2      	b.n	8003a0c <__sinit+0xc>
 8003a66:	bf00      	nop
 8003a68:	08003f3c 	.word	0x08003f3c
 8003a6c:	08003999 	.word	0x08003999

08003a70 <__sfp>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	4607      	mov	r7, r0
 8003a74:	f7ff ffac 	bl	80039d0 <__sfp_lock_acquire>
 8003a78:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <__sfp+0x84>)
 8003a7a:	681e      	ldr	r6, [r3, #0]
 8003a7c:	69b3      	ldr	r3, [r6, #24]
 8003a7e:	b913      	cbnz	r3, 8003a86 <__sfp+0x16>
 8003a80:	4630      	mov	r0, r6
 8003a82:	f7ff ffbd 	bl	8003a00 <__sinit>
 8003a86:	3648      	adds	r6, #72	; 0x48
 8003a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	d503      	bpl.n	8003a98 <__sfp+0x28>
 8003a90:	6833      	ldr	r3, [r6, #0]
 8003a92:	b30b      	cbz	r3, 8003ad8 <__sfp+0x68>
 8003a94:	6836      	ldr	r6, [r6, #0]
 8003a96:	e7f7      	b.n	8003a88 <__sfp+0x18>
 8003a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a9c:	b9d5      	cbnz	r5, 8003ad4 <__sfp+0x64>
 8003a9e:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <__sfp+0x88>)
 8003aa0:	60e3      	str	r3, [r4, #12]
 8003aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8003aa8:	f000 f847 	bl	8003b3a <__retarget_lock_init_recursive>
 8003aac:	f7ff ff96 	bl	80039dc <__sfp_lock_release>
 8003ab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ab8:	6025      	str	r5, [r4, #0]
 8003aba:	61a5      	str	r5, [r4, #24]
 8003abc:	2208      	movs	r2, #8
 8003abe:	4629      	mov	r1, r5
 8003ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ac4:	f7ff fd44 	bl	8003550 <memset>
 8003ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ad4:	3468      	adds	r4, #104	; 0x68
 8003ad6:	e7d9      	b.n	8003a8c <__sfp+0x1c>
 8003ad8:	2104      	movs	r1, #4
 8003ada:	4638      	mov	r0, r7
 8003adc:	f7ff ff62 	bl	80039a4 <__sfmoreglue>
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	6030      	str	r0, [r6, #0]
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d1d5      	bne.n	8003a94 <__sfp+0x24>
 8003ae8:	f7ff ff78 	bl	80039dc <__sfp_lock_release>
 8003aec:	230c      	movs	r3, #12
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	e7ee      	b.n	8003ad0 <__sfp+0x60>
 8003af2:	bf00      	nop
 8003af4:	08003f3c 	.word	0x08003f3c
 8003af8:	ffff0001 	.word	0xffff0001

08003afc <_fwalk_reent>:
 8003afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b00:	4606      	mov	r6, r0
 8003b02:	4688      	mov	r8, r1
 8003b04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b08:	2700      	movs	r7, #0
 8003b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8003b12:	d505      	bpl.n	8003b20 <_fwalk_reent+0x24>
 8003b14:	6824      	ldr	r4, [r4, #0]
 8003b16:	2c00      	cmp	r4, #0
 8003b18:	d1f7      	bne.n	8003b0a <_fwalk_reent+0xe>
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b20:	89ab      	ldrh	r3, [r5, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d907      	bls.n	8003b36 <_fwalk_reent+0x3a>
 8003b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	d003      	beq.n	8003b36 <_fwalk_reent+0x3a>
 8003b2e:	4629      	mov	r1, r5
 8003b30:	4630      	mov	r0, r6
 8003b32:	47c0      	blx	r8
 8003b34:	4307      	orrs	r7, r0
 8003b36:	3568      	adds	r5, #104	; 0x68
 8003b38:	e7e9      	b.n	8003b0e <_fwalk_reent+0x12>

08003b3a <__retarget_lock_init_recursive>:
 8003b3a:	4770      	bx	lr

08003b3c <__retarget_lock_acquire_recursive>:
 8003b3c:	4770      	bx	lr

08003b3e <__retarget_lock_release_recursive>:
 8003b3e:	4770      	bx	lr

08003b40 <__swhatbuf_r>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	460e      	mov	r6, r1
 8003b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	b096      	sub	sp, #88	; 0x58
 8003b4c:	4614      	mov	r4, r2
 8003b4e:	461d      	mov	r5, r3
 8003b50:	da07      	bge.n	8003b62 <__swhatbuf_r+0x22>
 8003b52:	2300      	movs	r3, #0
 8003b54:	602b      	str	r3, [r5, #0]
 8003b56:	89b3      	ldrh	r3, [r6, #12]
 8003b58:	061a      	lsls	r2, r3, #24
 8003b5a:	d410      	bmi.n	8003b7e <__swhatbuf_r+0x3e>
 8003b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b60:	e00e      	b.n	8003b80 <__swhatbuf_r+0x40>
 8003b62:	466a      	mov	r2, sp
 8003b64:	f000 f970 	bl	8003e48 <_fstat_r>
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	dbf2      	blt.n	8003b52 <__swhatbuf_r+0x12>
 8003b6c:	9a01      	ldr	r2, [sp, #4]
 8003b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b76:	425a      	negs	r2, r3
 8003b78:	415a      	adcs	r2, r3
 8003b7a:	602a      	str	r2, [r5, #0]
 8003b7c:	e7ee      	b.n	8003b5c <__swhatbuf_r+0x1c>
 8003b7e:	2340      	movs	r3, #64	; 0x40
 8003b80:	2000      	movs	r0, #0
 8003b82:	6023      	str	r3, [r4, #0]
 8003b84:	b016      	add	sp, #88	; 0x58
 8003b86:	bd70      	pop	{r4, r5, r6, pc}

08003b88 <__smakebuf_r>:
 8003b88:	898b      	ldrh	r3, [r1, #12]
 8003b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b8c:	079d      	lsls	r5, r3, #30
 8003b8e:	4606      	mov	r6, r0
 8003b90:	460c      	mov	r4, r1
 8003b92:	d507      	bpl.n	8003ba4 <__smakebuf_r+0x1c>
 8003b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	6123      	str	r3, [r4, #16]
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	6163      	str	r3, [r4, #20]
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd70      	pop	{r4, r5, r6, pc}
 8003ba4:	ab01      	add	r3, sp, #4
 8003ba6:	466a      	mov	r2, sp
 8003ba8:	f7ff ffca 	bl	8003b40 <__swhatbuf_r>
 8003bac:	9900      	ldr	r1, [sp, #0]
 8003bae:	4605      	mov	r5, r0
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f000 f879 	bl	8003ca8 <_malloc_r>
 8003bb6:	b948      	cbnz	r0, 8003bcc <__smakebuf_r+0x44>
 8003bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bbc:	059a      	lsls	r2, r3, #22
 8003bbe:	d4ef      	bmi.n	8003ba0 <__smakebuf_r+0x18>
 8003bc0:	f023 0303 	bic.w	r3, r3, #3
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	81a3      	strh	r3, [r4, #12]
 8003bca:	e7e3      	b.n	8003b94 <__smakebuf_r+0xc>
 8003bcc:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <__smakebuf_r+0x7c>)
 8003bce:	62b3      	str	r3, [r6, #40]	; 0x28
 8003bd0:	89a3      	ldrh	r3, [r4, #12]
 8003bd2:	6020      	str	r0, [r4, #0]
 8003bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd8:	81a3      	strh	r3, [r4, #12]
 8003bda:	9b00      	ldr	r3, [sp, #0]
 8003bdc:	6163      	str	r3, [r4, #20]
 8003bde:	9b01      	ldr	r3, [sp, #4]
 8003be0:	6120      	str	r0, [r4, #16]
 8003be2:	b15b      	cbz	r3, 8003bfc <__smakebuf_r+0x74>
 8003be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003be8:	4630      	mov	r0, r6
 8003bea:	f000 f93f 	bl	8003e6c <_isatty_r>
 8003bee:	b128      	cbz	r0, 8003bfc <__smakebuf_r+0x74>
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	81a3      	strh	r3, [r4, #12]
 8003bfc:	89a0      	ldrh	r0, [r4, #12]
 8003bfe:	4305      	orrs	r5, r0
 8003c00:	81a5      	strh	r5, [r4, #12]
 8003c02:	e7cd      	b.n	8003ba0 <__smakebuf_r+0x18>
 8003c04:	08003999 	.word	0x08003999

08003c08 <_free_r>:
 8003c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c0a:	2900      	cmp	r1, #0
 8003c0c:	d048      	beq.n	8003ca0 <_free_r+0x98>
 8003c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c12:	9001      	str	r0, [sp, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f1a1 0404 	sub.w	r4, r1, #4
 8003c1a:	bfb8      	it	lt
 8003c1c:	18e4      	addlt	r4, r4, r3
 8003c1e:	f000 f947 	bl	8003eb0 <__malloc_lock>
 8003c22:	4a20      	ldr	r2, [pc, #128]	; (8003ca4 <_free_r+0x9c>)
 8003c24:	9801      	ldr	r0, [sp, #4]
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	4615      	mov	r5, r2
 8003c2a:	b933      	cbnz	r3, 8003c3a <_free_r+0x32>
 8003c2c:	6063      	str	r3, [r4, #4]
 8003c2e:	6014      	str	r4, [r2, #0]
 8003c30:	b003      	add	sp, #12
 8003c32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c36:	f000 b941 	b.w	8003ebc <__malloc_unlock>
 8003c3a:	42a3      	cmp	r3, r4
 8003c3c:	d90b      	bls.n	8003c56 <_free_r+0x4e>
 8003c3e:	6821      	ldr	r1, [r4, #0]
 8003c40:	1862      	adds	r2, r4, r1
 8003c42:	4293      	cmp	r3, r2
 8003c44:	bf04      	itt	eq
 8003c46:	681a      	ldreq	r2, [r3, #0]
 8003c48:	685b      	ldreq	r3, [r3, #4]
 8003c4a:	6063      	str	r3, [r4, #4]
 8003c4c:	bf04      	itt	eq
 8003c4e:	1852      	addeq	r2, r2, r1
 8003c50:	6022      	streq	r2, [r4, #0]
 8003c52:	602c      	str	r4, [r5, #0]
 8003c54:	e7ec      	b.n	8003c30 <_free_r+0x28>
 8003c56:	461a      	mov	r2, r3
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	b10b      	cbz	r3, 8003c60 <_free_r+0x58>
 8003c5c:	42a3      	cmp	r3, r4
 8003c5e:	d9fa      	bls.n	8003c56 <_free_r+0x4e>
 8003c60:	6811      	ldr	r1, [r2, #0]
 8003c62:	1855      	adds	r5, r2, r1
 8003c64:	42a5      	cmp	r5, r4
 8003c66:	d10b      	bne.n	8003c80 <_free_r+0x78>
 8003c68:	6824      	ldr	r4, [r4, #0]
 8003c6a:	4421      	add	r1, r4
 8003c6c:	1854      	adds	r4, r2, r1
 8003c6e:	42a3      	cmp	r3, r4
 8003c70:	6011      	str	r1, [r2, #0]
 8003c72:	d1dd      	bne.n	8003c30 <_free_r+0x28>
 8003c74:	681c      	ldr	r4, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	6053      	str	r3, [r2, #4]
 8003c7a:	4421      	add	r1, r4
 8003c7c:	6011      	str	r1, [r2, #0]
 8003c7e:	e7d7      	b.n	8003c30 <_free_r+0x28>
 8003c80:	d902      	bls.n	8003c88 <_free_r+0x80>
 8003c82:	230c      	movs	r3, #12
 8003c84:	6003      	str	r3, [r0, #0]
 8003c86:	e7d3      	b.n	8003c30 <_free_r+0x28>
 8003c88:	6825      	ldr	r5, [r4, #0]
 8003c8a:	1961      	adds	r1, r4, r5
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	bf04      	itt	eq
 8003c90:	6819      	ldreq	r1, [r3, #0]
 8003c92:	685b      	ldreq	r3, [r3, #4]
 8003c94:	6063      	str	r3, [r4, #4]
 8003c96:	bf04      	itt	eq
 8003c98:	1949      	addeq	r1, r1, r5
 8003c9a:	6021      	streq	r1, [r4, #0]
 8003c9c:	6054      	str	r4, [r2, #4]
 8003c9e:	e7c7      	b.n	8003c30 <_free_r+0x28>
 8003ca0:	b003      	add	sp, #12
 8003ca2:	bd30      	pop	{r4, r5, pc}
 8003ca4:	20000090 	.word	0x20000090

08003ca8 <_malloc_r>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	1ccd      	adds	r5, r1, #3
 8003cac:	f025 0503 	bic.w	r5, r5, #3
 8003cb0:	3508      	adds	r5, #8
 8003cb2:	2d0c      	cmp	r5, #12
 8003cb4:	bf38      	it	cc
 8003cb6:	250c      	movcc	r5, #12
 8003cb8:	2d00      	cmp	r5, #0
 8003cba:	4606      	mov	r6, r0
 8003cbc:	db01      	blt.n	8003cc2 <_malloc_r+0x1a>
 8003cbe:	42a9      	cmp	r1, r5
 8003cc0:	d903      	bls.n	8003cca <_malloc_r+0x22>
 8003cc2:	230c      	movs	r3, #12
 8003cc4:	6033      	str	r3, [r6, #0]
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cca:	f000 f8f1 	bl	8003eb0 <__malloc_lock>
 8003cce:	4921      	ldr	r1, [pc, #132]	; (8003d54 <_malloc_r+0xac>)
 8003cd0:	680a      	ldr	r2, [r1, #0]
 8003cd2:	4614      	mov	r4, r2
 8003cd4:	b99c      	cbnz	r4, 8003cfe <_malloc_r+0x56>
 8003cd6:	4f20      	ldr	r7, [pc, #128]	; (8003d58 <_malloc_r+0xb0>)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	b923      	cbnz	r3, 8003ce6 <_malloc_r+0x3e>
 8003cdc:	4621      	mov	r1, r4
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f000 f83c 	bl	8003d5c <_sbrk_r>
 8003ce4:	6038      	str	r0, [r7, #0]
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	4630      	mov	r0, r6
 8003cea:	f000 f837 	bl	8003d5c <_sbrk_r>
 8003cee:	1c43      	adds	r3, r0, #1
 8003cf0:	d123      	bne.n	8003d3a <_malloc_r+0x92>
 8003cf2:	230c      	movs	r3, #12
 8003cf4:	6033      	str	r3, [r6, #0]
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f000 f8e0 	bl	8003ebc <__malloc_unlock>
 8003cfc:	e7e3      	b.n	8003cc6 <_malloc_r+0x1e>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	1b5b      	subs	r3, r3, r5
 8003d02:	d417      	bmi.n	8003d34 <_malloc_r+0x8c>
 8003d04:	2b0b      	cmp	r3, #11
 8003d06:	d903      	bls.n	8003d10 <_malloc_r+0x68>
 8003d08:	6023      	str	r3, [r4, #0]
 8003d0a:	441c      	add	r4, r3
 8003d0c:	6025      	str	r5, [r4, #0]
 8003d0e:	e004      	b.n	8003d1a <_malloc_r+0x72>
 8003d10:	6863      	ldr	r3, [r4, #4]
 8003d12:	42a2      	cmp	r2, r4
 8003d14:	bf0c      	ite	eq
 8003d16:	600b      	streq	r3, [r1, #0]
 8003d18:	6053      	strne	r3, [r2, #4]
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f000 f8ce 	bl	8003ebc <__malloc_unlock>
 8003d20:	f104 000b 	add.w	r0, r4, #11
 8003d24:	1d23      	adds	r3, r4, #4
 8003d26:	f020 0007 	bic.w	r0, r0, #7
 8003d2a:	1ac2      	subs	r2, r0, r3
 8003d2c:	d0cc      	beq.n	8003cc8 <_malloc_r+0x20>
 8003d2e:	1a1b      	subs	r3, r3, r0
 8003d30:	50a3      	str	r3, [r4, r2]
 8003d32:	e7c9      	b.n	8003cc8 <_malloc_r+0x20>
 8003d34:	4622      	mov	r2, r4
 8003d36:	6864      	ldr	r4, [r4, #4]
 8003d38:	e7cc      	b.n	8003cd4 <_malloc_r+0x2c>
 8003d3a:	1cc4      	adds	r4, r0, #3
 8003d3c:	f024 0403 	bic.w	r4, r4, #3
 8003d40:	42a0      	cmp	r0, r4
 8003d42:	d0e3      	beq.n	8003d0c <_malloc_r+0x64>
 8003d44:	1a21      	subs	r1, r4, r0
 8003d46:	4630      	mov	r0, r6
 8003d48:	f000 f808 	bl	8003d5c <_sbrk_r>
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d1dd      	bne.n	8003d0c <_malloc_r+0x64>
 8003d50:	e7cf      	b.n	8003cf2 <_malloc_r+0x4a>
 8003d52:	bf00      	nop
 8003d54:	20000090 	.word	0x20000090
 8003d58:	20000094 	.word	0x20000094

08003d5c <_sbrk_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4d06      	ldr	r5, [pc, #24]	; (8003d78 <_sbrk_r+0x1c>)
 8003d60:	2300      	movs	r3, #0
 8003d62:	4604      	mov	r4, r0
 8003d64:	4608      	mov	r0, r1
 8003d66:	602b      	str	r3, [r5, #0]
 8003d68:	f7fc ff16 	bl	8000b98 <_sbrk>
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	d102      	bne.n	8003d76 <_sbrk_r+0x1a>
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	b103      	cbz	r3, 8003d76 <_sbrk_r+0x1a>
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	bd38      	pop	{r3, r4, r5, pc}
 8003d78:	200001e8 	.word	0x200001e8

08003d7c <__sread>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	460c      	mov	r4, r1
 8003d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d84:	f000 f8a0 	bl	8003ec8 <_read_r>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	bfab      	itete	ge
 8003d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8003d90:	181b      	addge	r3, r3, r0
 8003d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d96:	bfac      	ite	ge
 8003d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d9a:	81a3      	strhlt	r3, [r4, #12]
 8003d9c:	bd10      	pop	{r4, pc}

08003d9e <__swrite>:
 8003d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da2:	461f      	mov	r7, r3
 8003da4:	898b      	ldrh	r3, [r1, #12]
 8003da6:	05db      	lsls	r3, r3, #23
 8003da8:	4605      	mov	r5, r0
 8003daa:	460c      	mov	r4, r1
 8003dac:	4616      	mov	r6, r2
 8003dae:	d505      	bpl.n	8003dbc <__swrite+0x1e>
 8003db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db4:	2302      	movs	r3, #2
 8003db6:	2200      	movs	r2, #0
 8003db8:	f000 f868 	bl	8003e8c <_lseek_r>
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	4632      	mov	r2, r6
 8003dca:	463b      	mov	r3, r7
 8003dcc:	4628      	mov	r0, r5
 8003dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd2:	f000 b817 	b.w	8003e04 <_write_r>

08003dd6 <__sseek>:
 8003dd6:	b510      	push	{r4, lr}
 8003dd8:	460c      	mov	r4, r1
 8003dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dde:	f000 f855 	bl	8003e8c <_lseek_r>
 8003de2:	1c43      	adds	r3, r0, #1
 8003de4:	89a3      	ldrh	r3, [r4, #12]
 8003de6:	bf15      	itete	ne
 8003de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003df2:	81a3      	strheq	r3, [r4, #12]
 8003df4:	bf18      	it	ne
 8003df6:	81a3      	strhne	r3, [r4, #12]
 8003df8:	bd10      	pop	{r4, pc}

08003dfa <__sclose>:
 8003dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dfe:	f000 b813 	b.w	8003e28 <_close_r>
	...

08003e04 <_write_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d07      	ldr	r5, [pc, #28]	; (8003e24 <_write_r+0x20>)
 8003e08:	4604      	mov	r4, r0
 8003e0a:	4608      	mov	r0, r1
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	2200      	movs	r2, #0
 8003e10:	602a      	str	r2, [r5, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f7fc fe6f 	bl	8000af6 <_write>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_write_r+0x1e>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_write_r+0x1e>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	200001e8 	.word	0x200001e8

08003e28 <_close_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	4d06      	ldr	r5, [pc, #24]	; (8003e44 <_close_r+0x1c>)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	4604      	mov	r4, r0
 8003e30:	4608      	mov	r0, r1
 8003e32:	602b      	str	r3, [r5, #0]
 8003e34:	f7fc fe7b 	bl	8000b2e <_close>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_close_r+0x1a>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_close_r+0x1a>
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	200001e8 	.word	0x200001e8

08003e48 <_fstat_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4d07      	ldr	r5, [pc, #28]	; (8003e68 <_fstat_r+0x20>)
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	4604      	mov	r4, r0
 8003e50:	4608      	mov	r0, r1
 8003e52:	4611      	mov	r1, r2
 8003e54:	602b      	str	r3, [r5, #0]
 8003e56:	f7fc fe76 	bl	8000b46 <_fstat>
 8003e5a:	1c43      	adds	r3, r0, #1
 8003e5c:	d102      	bne.n	8003e64 <_fstat_r+0x1c>
 8003e5e:	682b      	ldr	r3, [r5, #0]
 8003e60:	b103      	cbz	r3, 8003e64 <_fstat_r+0x1c>
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	bd38      	pop	{r3, r4, r5, pc}
 8003e66:	bf00      	nop
 8003e68:	200001e8 	.word	0x200001e8

08003e6c <_isatty_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4d06      	ldr	r5, [pc, #24]	; (8003e88 <_isatty_r+0x1c>)
 8003e70:	2300      	movs	r3, #0
 8003e72:	4604      	mov	r4, r0
 8003e74:	4608      	mov	r0, r1
 8003e76:	602b      	str	r3, [r5, #0]
 8003e78:	f7fc fe75 	bl	8000b66 <_isatty>
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	d102      	bne.n	8003e86 <_isatty_r+0x1a>
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	b103      	cbz	r3, 8003e86 <_isatty_r+0x1a>
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	bd38      	pop	{r3, r4, r5, pc}
 8003e88:	200001e8 	.word	0x200001e8

08003e8c <_lseek_r>:
 8003e8c:	b538      	push	{r3, r4, r5, lr}
 8003e8e:	4d07      	ldr	r5, [pc, #28]	; (8003eac <_lseek_r+0x20>)
 8003e90:	4604      	mov	r4, r0
 8003e92:	4608      	mov	r0, r1
 8003e94:	4611      	mov	r1, r2
 8003e96:	2200      	movs	r2, #0
 8003e98:	602a      	str	r2, [r5, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f7fc fe6e 	bl	8000b7c <_lseek>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d102      	bne.n	8003eaa <_lseek_r+0x1e>
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	b103      	cbz	r3, 8003eaa <_lseek_r+0x1e>
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
 8003eac:	200001e8 	.word	0x200001e8

08003eb0 <__malloc_lock>:
 8003eb0:	4801      	ldr	r0, [pc, #4]	; (8003eb8 <__malloc_lock+0x8>)
 8003eb2:	f7ff be43 	b.w	8003b3c <__retarget_lock_acquire_recursive>
 8003eb6:	bf00      	nop
 8003eb8:	200001e0 	.word	0x200001e0

08003ebc <__malloc_unlock>:
 8003ebc:	4801      	ldr	r0, [pc, #4]	; (8003ec4 <__malloc_unlock+0x8>)
 8003ebe:	f7ff be3e 	b.w	8003b3e <__retarget_lock_release_recursive>
 8003ec2:	bf00      	nop
 8003ec4:	200001e0 	.word	0x200001e0

08003ec8 <_read_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4d07      	ldr	r5, [pc, #28]	; (8003ee8 <_read_r+0x20>)
 8003ecc:	4604      	mov	r4, r0
 8003ece:	4608      	mov	r0, r1
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	602a      	str	r2, [r5, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f7fc fdf0 	bl	8000abc <_read>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_read_r+0x1e>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_read_r+0x1e>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	200001e8 	.word	0x200001e8

08003eec <_init>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr

08003ef8 <_fini>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr
