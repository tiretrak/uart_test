
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed0  08003ed0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed8  08003ed8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003edc  08003edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000017c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba0c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001af3  00000000  00000000  0002baac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0002d5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000718  00000000  00000000  0002dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003098  00000000  00000000  0002e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000966a  00000000  00000000  00031500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c64fa  00000000  00000000  0003ab6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00101064  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002498  00000000  00000000  001010b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e1c 	.word	0x08003e1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003e1c 	.word	0x08003e1c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d013      	beq.n	8000500 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d00b      	beq.n	8000500 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004e8:	e000      	b.n	80004ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80004ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f9      	beq.n	80004ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	b2d2      	uxtb	r2, r2
 80004fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000500:	687b      	ldr	r3, [r7, #4]
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <__io_putchar>:
//		I2C_send((uint8_t)(*str), 1);               // передача первого символа строки
//        str++;                                      // сдвиг строки налево на 1 символ
//    }
//}
int __io_putchar(int ch)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 // Write character to ITM ch.0
 ITM_SendChar(ch);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ffd1 	bl	80004c0 <ITM_SendChar>
 return(ch);
 800051e:	687b      	ldr	r3, [r7, #4]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fb62 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* Configure LED3, LED4, LED5 and LED6 */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f816 	bl	8000560 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f8c8 	bl	80006c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000538:	f000 f8a6 	bl	8000688 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800053c:	f000 f87a 	bl	8000634 <MX_USART2_UART_Init>
  //  MX_USART1_UART_Init();
  //  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  //start MIDI message reception with interrupt.
  HAL_UART_Receive_DMA(&huart2, &midi_recieved_buf, 1);
 8000540:	2201      	movs	r2, #1
 8000542:	4904      	ldr	r1, [pc, #16]	; (8000554 <main+0x2c>)
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <main+0x30>)
 8000546:	f001 ff6c 	bl	8002422 <HAL_UART_Receive_DMA>
//		I2C_send(0b10000000,0);   // переход на 1 строку, тут не обязателен
//		LCD_SendString((char)midi_recieved_buf);

//	  b = (char*) counter;

	  printf("«Hello STM32 world!\r\n");
 800054a:	4804      	ldr	r0, [pc, #16]	; (800055c <main+0x34>)
 800054c:	f003 f80e 	bl	800356c <puts>
  {
 8000550:	e7fb      	b.n	800054a <main+0x22>
 8000552:	bf00      	nop
 8000554:	2000014c 	.word	0x2000014c
 8000558:	20000194 	.word	0x20000194
 800055c:	08003e34 	.word	0x08003e34

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 ff86 	bl	8003480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d4:	23a8      	movs	r3, #168	; 0xa8
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fa5b 	bl	8001aa0 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f0:	f000 f8fc 	bl	80007ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000600:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2105      	movs	r1, #5
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fcbc 	bl	8001f90 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061e:	f000 f8e5 	bl	80007ec <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance 			= USART2;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_USART2_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate 		= 31250;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000640:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength 	= UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits 		= UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity 		= UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode 			= UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800066c:	f001 fe8c 	bl	8002388 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f8b9 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000194 	.word	0x20000194
 8000684:	40004400 	.word	0x40004400

08000688 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_DMA_Init+0x3c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <MX_DMA_Init+0x3c>)
 8000698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_DMA_Init+0x3c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	2010      	movs	r0, #16
 80006b0:	f000 fbed 	bl	8000e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006b4:	2010      	movs	r0, #16
 80006b6:	f000 fc06 	bl	8000ec6 <HAL_NVIC_EnableIRQ>

}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_GPIO_Init+0xc8>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <MX_GPIO_Init+0xc8>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_GPIO_Init+0xc8>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <MX_GPIO_Init+0xc8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a23      	ldr	r2, [pc, #140]	; (8000790 <MX_GPIO_Init+0xc8>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <MX_GPIO_Init+0xc8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_GPIO_Init+0xc8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_GPIO_Init+0xc8>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_GPIO_Init+0xc8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000732:	2200      	movs	r2, #0
 8000734:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 8000738:	4816      	ldr	r0, [pc, #88]	; (8000794 <MX_GPIO_Init+0xcc>)
 800073a:	f001 f97d 	bl	8001a38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000744:	4814      	ldr	r0, [pc, #80]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000746:	f001 f977 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800074a:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 800074e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4619      	mov	r1, r3
 8000762:	480c      	ldr	r0, [pc, #48]	; (8000794 <MX_GPIO_Init+0xcc>)
 8000764:	f000 ffcc 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000768:	f44f 7340 	mov.w	r3, #768	; 0x300
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000782:	f000 ffbd 	bl	8001700 <HAL_GPIO_Init>

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40020c00 	.word	0x40020c00
 8000798:	40020400 	.word	0x40020400

0800079c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
//HAL_UART_Receive_IT(&huart2, &midi_recieved_buf,1);
//buf = midi_recieved_buf;
//HAL_UART_Transmit	(&huart2,&midi_recieved_buf,1,10);
//HAL_UART_Transmit_IT(&huart2,&midi_recieved_buf,1);

HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80007a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a8:	480f      	ldr	r0, [pc, #60]	; (80007e8 <HAL_UART_RxCpltCallback+0x4c>)
 80007aa:	f001 f95e 	bl	8001a6a <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 80007ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <HAL_UART_RxCpltCallback+0x4c>)
 80007b4:	f001 f959 	bl	8001a6a <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 80007b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <HAL_UART_RxCpltCallback+0x4c>)
 80007be:	f001 f954 	bl	8001a6a <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 80007c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <HAL_UART_RxCpltCallback+0x4c>)
 80007c8:	f001 f94f 	bl	8001a6a <HAL_GPIO_TogglePin>

for (int i=0;i<200;i++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	e002      	b.n	80007d8 <HAL_UART_RxCpltCallback+0x3c>
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2bc7      	cmp	r3, #199	; 0xc7
 80007dc:	ddf9      	ble.n	80007d2 <HAL_UART_RxCpltCallback+0x36>
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40020c00 	.word	0x40020c00

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_MspInit+0x4c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000836:	2007      	movs	r0, #7
 8000838:	f000 fb1e 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a4e      	ldr	r2, [pc, #312]	; (80009a0 <HAL_UART_MspInit+0x158>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d12d      	bne.n	80008c6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	4b4d      	ldr	r3, [pc, #308]	; (80009a4 <HAL_UART_MspInit+0x15c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a4c      	ldr	r2, [pc, #304]	; (80009a4 <HAL_UART_MspInit+0x15c>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b4a      	ldr	r3, [pc, #296]	; (80009a4 <HAL_UART_MspInit+0x15c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f003 0310 	and.w	r3, r3, #16
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	4b46      	ldr	r3, [pc, #280]	; (80009a4 <HAL_UART_MspInit+0x15c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a45      	ldr	r2, [pc, #276]	; (80009a4 <HAL_UART_MspInit+0x15c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b43      	ldr	r3, [pc, #268]	; (80009a4 <HAL_UART_MspInit+0x15c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008b4:	2307      	movs	r3, #7
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	483a      	ldr	r0, [pc, #232]	; (80009a8 <HAL_UART_MspInit+0x160>)
 80008c0:	f000 ff1e 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008c4:	e067      	b.n	8000996 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a38      	ldr	r2, [pc, #224]	; (80009ac <HAL_UART_MspInit+0x164>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d162      	bne.n	8000996 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	4b33      	ldr	r3, [pc, #204]	; (80009a4 <HAL_UART_MspInit+0x15c>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a32      	ldr	r2, [pc, #200]	; (80009a4 <HAL_UART_MspInit+0x15c>)
 80008da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <HAL_UART_MspInit+0x15c>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <HAL_UART_MspInit+0x15c>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	4a2b      	ldr	r2, [pc, #172]	; (80009a4 <HAL_UART_MspInit+0x15c>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6313      	str	r3, [r2, #48]	; 0x30
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <HAL_UART_MspInit+0x15c>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000908:	230c      	movs	r3, #12
 800090a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000918:	2307      	movs	r3, #7
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4821      	ldr	r0, [pc, #132]	; (80009a8 <HAL_UART_MspInit+0x160>)
 8000924:	f000 feec 	bl	8001700 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <HAL_UART_MspInit+0x168>)
 800092a:	4a22      	ldr	r2, [pc, #136]	; (80009b4 <HAL_UART_MspInit+0x16c>)
 800092c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <HAL_UART_MspInit+0x168>)
 8000930:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000934:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <HAL_UART_MspInit+0x168>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <HAL_UART_MspInit+0x168>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_UART_MspInit+0x168>)
 8000944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000948:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <HAL_UART_MspInit+0x168>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <HAL_UART_MspInit+0x168>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <HAL_UART_MspInit+0x168>)
 8000958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800095c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_UART_MspInit+0x168>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_UART_MspInit+0x168>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800096a:	4811      	ldr	r0, [pc, #68]	; (80009b0 <HAL_UART_MspInit+0x168>)
 800096c:	f000 fac6 	bl	8000efc <HAL_DMA_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_UART_MspInit+0x132>
      Error_Handler();
 8000976:	f7ff ff39 	bl	80007ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <HAL_UART_MspInit+0x168>)
 800097e:	639a      	str	r2, [r3, #56]	; 0x38
 8000980:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <HAL_UART_MspInit+0x168>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2026      	movs	r0, #38	; 0x26
 800098c:	f000 fa7f 	bl	8000e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000990:	2026      	movs	r0, #38	; 0x26
 8000992:	f000 fa98 	bl	8000ec6 <HAL_NVIC_EnableIRQ>
}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40004400 	.word	0x40004400
 80009b0:	20000098 	.word	0x20000098
 80009b4:	40026088 	.word	0x40026088

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f948 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <DMA1_Stream5_IRQHandler+0x10>)
 8000a12:	f000 fc0b 	bl	800122c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000098 	.word	0x20000098

08000a20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <USART2_IRQHandler+0x10>)
 8000a26:	f001 fd2d 	bl	8002484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000194 	.word	0x20000194

08000a34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e00a      	b.n	8000a5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a46:	f3af 8000 	nop.w
 8000a4a:	4601      	mov	r1, r0
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	b2ca      	uxtb	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf0      	blt.n	8000a46 <_read+0x12>
	}

return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e009      	b.n	8000a94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fd40 	bl	800050e <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbf1      	blt.n	8000a80 <_write+0x12>
	}
	return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_close>:

int _close(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	return -1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ace:	605a      	str	r2, [r3, #4]
	return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_isatty>:

int _isatty(int file)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
	return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f002 fc74 	bl	800342c <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20020000 	.word	0x20020000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	2000008c 	.word	0x2000008c
 8000b78:	200001f0 	.word	0x200001f0

08000b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ba6:	490e      	ldr	r1, [pc, #56]	; (8000be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bbc:	4c0b      	ldr	r4, [pc, #44]	; (8000bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bca:	f7ff ffd7 	bl	8000b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f002 fc33 	bl	8003438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fca9 	bl	8000528 <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000be4:	08003ee0 	.word	0x08003ee0
  ldr r2, =_sbss
 8000be8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bec:	200001ec 	.word	0x200001ec

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f92b 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fde6 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f943 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f90b 	bl	8000e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	200001d8 	.word	0x200001d8

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	200001d8 	.word	0x200001d8

08000cd8 <__NVIC_SetPriorityGrouping>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <SysTick_Config>:
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e44:	d301      	bcc.n	8000e4a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00f      	b.n	8000e6a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <SysTick_Config+0x40>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	210f      	movs	r1, #15
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f7ff ff8e 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SysTick_Config+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SysTick_Config+0x40>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff29 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea0:	f7ff ff3e 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	6978      	ldr	r0, [r7, #20]
 8000eac:	f7ff ff8e 	bl	8000dcc <NVIC_EncodePriority>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff5d 	bl	8000d78 <__NVIC_SetPriority>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff31 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffa2 	bl	8000e34 <SysTick_Config>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff feda 	bl	8000cc0 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e099      	b.n	800104c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0201 	bic.w	r2, r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f38:	e00f      	b.n	8000f5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f3a:	f7ff fec1 	bl	8000cc0 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	d908      	bls.n	8000f5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2203      	movs	r2, #3
 8000f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e078      	b.n	800104c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1e8      	bne.n	8000f3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	4b38      	ldr	r3, [pc, #224]	; (8001054 <HAL_DMA_Init+0x158>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d107      	bne.n	8000fc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f023 0307 	bic.w	r3, r3, #7
 8000fda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d117      	bne.n	800101e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00e      	beq.n	800101e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fb01 	bl	8001608 <DMA_CheckFifoParam>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d008      	beq.n	800101e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2240      	movs	r2, #64	; 0x40
 8001010:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800101a:	2301      	movs	r3, #1
 800101c:	e016      	b.n	800104c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fab8 	bl	800159c <DMA_CalcBaseAndBitshift>
 800102c:	4603      	mov	r3, r0
 800102e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001034:	223f      	movs	r2, #63	; 0x3f
 8001036:	409a      	lsls	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	f010803f 	.word	0xf010803f

08001058 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_DMA_Start_IT+0x26>
 800107a:	2302      	movs	r3, #2
 800107c:	e040      	b.n	8001100 <HAL_DMA_Start_IT+0xa8>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d12f      	bne.n	80010f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2202      	movs	r2, #2
 8001096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f000 fa4a 	bl	8001540 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	223f      	movs	r2, #63	; 0x3f
 80010b2:	409a      	lsls	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0216 	orr.w	r2, r2, #22
 80010c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0208 	orr.w	r2, r2, #8
 80010de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e005      	b.n	80010fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010fa:	2302      	movs	r3, #2
 80010fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001114:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001116:	f7ff fdd3 	bl	8000cc0 <HAL_GetTick>
 800111a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d008      	beq.n	800113a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e052      	b.n	80011e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 0216 	bic.w	r2, r2, #22
 8001148:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	695a      	ldr	r2, [r3, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001158:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	2b00      	cmp	r3, #0
 8001160:	d103      	bne.n	800116a <HAL_DMA_Abort+0x62>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001166:	2b00      	cmp	r3, #0
 8001168:	d007      	beq.n	800117a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0208 	bic.w	r2, r2, #8
 8001178:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0201 	bic.w	r2, r2, #1
 8001188:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118a:	e013      	b.n	80011b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800118c:	f7ff fd98 	bl	8000cc0 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b05      	cmp	r3, #5
 8001198:	d90c      	bls.n	80011b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2220      	movs	r2, #32
 800119e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2203      	movs	r2, #3
 80011a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e015      	b.n	80011e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1e4      	bne.n	800118c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c6:	223f      	movs	r2, #63	; 0x3f
 80011c8:	409a      	lsls	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d004      	beq.n	8001206 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00c      	b.n	8001220 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2205      	movs	r2, #5
 800120a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0201 	bic.w	r2, r2, #1
 800121c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001238:	4b92      	ldr	r3, [pc, #584]	; (8001484 <HAL_DMA_IRQHandler+0x258>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a92      	ldr	r2, [pc, #584]	; (8001488 <HAL_DMA_IRQHandler+0x25c>)
 800123e:	fba2 2303 	umull	r2, r3, r2, r3
 8001242:	0a9b      	lsrs	r3, r3, #10
 8001244:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001256:	2208      	movs	r2, #8
 8001258:	409a      	lsls	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d01a      	beq.n	8001298 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	d013      	beq.n	8001298 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0204 	bic.w	r2, r2, #4
 800127e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001284:	2208      	movs	r2, #8
 8001286:	409a      	lsls	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001290:	f043 0201 	orr.w	r2, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129c:	2201      	movs	r2, #1
 800129e:	409a      	lsls	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d012      	beq.n	80012ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ba:	2201      	movs	r2, #1
 80012bc:	409a      	lsls	r2, r3
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c6:	f043 0202 	orr.w	r2, r3, #2
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d2:	2204      	movs	r2, #4
 80012d4:	409a      	lsls	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4013      	ands	r3, r2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d012      	beq.n	8001304 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00b      	beq.n	8001304 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f0:	2204      	movs	r2, #4
 80012f2:	409a      	lsls	r2, r3
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fc:	f043 0204 	orr.w	r2, r3, #4
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001308:	2210      	movs	r2, #16
 800130a:	409a      	lsls	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4013      	ands	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d043      	beq.n	800139c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d03c      	beq.n	800139c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001326:	2210      	movs	r2, #16
 8001328:	409a      	lsls	r2, r3
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d018      	beq.n	800136e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d108      	bne.n	800135c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	2b00      	cmp	r3, #0
 8001350:	d024      	beq.n	800139c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	4798      	blx	r3
 800135a:	e01f      	b.n	800139c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001360:	2b00      	cmp	r3, #0
 8001362:	d01b      	beq.n	800139c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	4798      	blx	r3
 800136c:	e016      	b.n	800139c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0208 	bic.w	r2, r2, #8
 800138a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a0:	2220      	movs	r2, #32
 80013a2:	409a      	lsls	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 808e 	beq.w	80014ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8086 	beq.w	80014ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c2:	2220      	movs	r2, #32
 80013c4:	409a      	lsls	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b05      	cmp	r3, #5
 80013d4:	d136      	bne.n	8001444 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0216 	bic.w	r2, r2, #22
 80013e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695a      	ldr	r2, [r3, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d103      	bne.n	8001406 <HAL_DMA_IRQHandler+0x1da>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001402:	2b00      	cmp	r3, #0
 8001404:	d007      	beq.n	8001416 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0208 	bic.w	r2, r2, #8
 8001414:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141a:	223f      	movs	r2, #63	; 0x3f
 800141c:	409a      	lsls	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001436:	2b00      	cmp	r3, #0
 8001438:	d07d      	beq.n	8001536 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	4798      	blx	r3
        }
        return;
 8001442:	e078      	b.n	8001536 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01c      	beq.n	800148c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d108      	bne.n	8001472 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001464:	2b00      	cmp	r3, #0
 8001466:	d030      	beq.n	80014ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	4798      	blx	r3
 8001470:	e02b      	b.n	80014ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001476:	2b00      	cmp	r3, #0
 8001478:	d027      	beq.n	80014ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	4798      	blx	r3
 8001482:	e022      	b.n	80014ca <HAL_DMA_IRQHandler+0x29e>
 8001484:	20000000 	.word	0x20000000
 8001488:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10f      	bne.n	80014ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0210 	bic.w	r2, r2, #16
 80014a8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d032      	beq.n	8001538 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d022      	beq.n	8001524 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2205      	movs	r2, #5
 80014e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	3301      	adds	r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d307      	bcc.n	8001512 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f2      	bne.n	80014f6 <HAL_DMA_IRQHandler+0x2ca>
 8001510:	e000      	b.n	8001514 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001512:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	4798      	blx	r3
 8001534:	e000      	b.n	8001538 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001536:	bf00      	nop
    }
  }
}
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop

08001540 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800155c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b40      	cmp	r3, #64	; 0x40
 800156c:	d108      	bne.n	8001580 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800157e:	e007      	b.n	8001590 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	60da      	str	r2, [r3, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	3b10      	subs	r3, #16
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <DMA_CalcBaseAndBitshift+0x64>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015b6:	4a13      	ldr	r2, [pc, #76]	; (8001604 <DMA_CalcBaseAndBitshift+0x68>)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d909      	bls.n	80015de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015d2:	f023 0303 	bic.w	r3, r3, #3
 80015d6:	1d1a      	adds	r2, r3, #4
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	659a      	str	r2, [r3, #88]	; 0x58
 80015dc:	e007      	b.n	80015ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015e6:	f023 0303 	bic.w	r3, r3, #3
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	aaaaaaab 	.word	0xaaaaaaab
 8001604:	08003e64 	.word	0x08003e64

08001608 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d11f      	bne.n	8001662 <DMA_CheckFifoParam+0x5a>
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d856      	bhi.n	80016d6 <DMA_CheckFifoParam+0xce>
 8001628:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <DMA_CheckFifoParam+0x28>)
 800162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162e:	bf00      	nop
 8001630:	08001641 	.word	0x08001641
 8001634:	08001653 	.word	0x08001653
 8001638:	08001641 	.word	0x08001641
 800163c:	080016d7 	.word	0x080016d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d046      	beq.n	80016da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001650:	e043      	b.n	80016da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800165a:	d140      	bne.n	80016de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001660:	e03d      	b.n	80016de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166a:	d121      	bne.n	80016b0 <DMA_CheckFifoParam+0xa8>
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b03      	cmp	r3, #3
 8001670:	d837      	bhi.n	80016e2 <DMA_CheckFifoParam+0xda>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <DMA_CheckFifoParam+0x70>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	08001689 	.word	0x08001689
 800167c:	0800168f 	.word	0x0800168f
 8001680:	08001689 	.word	0x08001689
 8001684:	080016a1 	.word	0x080016a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
      break;
 800168c:	e030      	b.n	80016f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d025      	beq.n	80016e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800169e:	e022      	b.n	80016e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016a8:	d11f      	bne.n	80016ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016ae:	e01c      	b.n	80016ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d903      	bls.n	80016be <DMA_CheckFifoParam+0xb6>
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d003      	beq.n	80016c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016bc:	e018      	b.n	80016f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
      break;
 80016c2:	e015      	b.n	80016f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00e      	beq.n	80016ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
      break;
 80016d4:	e00b      	b.n	80016ee <DMA_CheckFifoParam+0xe6>
      break;
 80016d6:	bf00      	nop
 80016d8:	e00a      	b.n	80016f0 <DMA_CheckFifoParam+0xe8>
      break;
 80016da:	bf00      	nop
 80016dc:	e008      	b.n	80016f0 <DMA_CheckFifoParam+0xe8>
      break;
 80016de:	bf00      	nop
 80016e0:	e006      	b.n	80016f0 <DMA_CheckFifoParam+0xe8>
      break;
 80016e2:	bf00      	nop
 80016e4:	e004      	b.n	80016f0 <DMA_CheckFifoParam+0xe8>
      break;
 80016e6:	bf00      	nop
 80016e8:	e002      	b.n	80016f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80016ea:	bf00      	nop
 80016ec:	e000      	b.n	80016f0 <DMA_CheckFifoParam+0xe8>
      break;
 80016ee:	bf00      	nop
    }
  } 
  
  return status; 
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	e16b      	b.n	80019f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800171c:	2201      	movs	r2, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	429a      	cmp	r2, r3
 8001736:	f040 815a 	bne.w	80019ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d005      	beq.n	8001752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174e:	2b02      	cmp	r3, #2
 8001750:	d130      	bne.n	80017b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001788:	2201      	movs	r2, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	f003 0201 	and.w	r2, r3, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d017      	beq.n	80017f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d123      	bne.n	8001844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	08da      	lsrs	r2, r3, #3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3208      	adds	r2, #8
 8001804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	220f      	movs	r2, #15
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	08da      	lsrs	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3208      	adds	r2, #8
 800183e:	69b9      	ldr	r1, [r7, #24]
 8001840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0203 	and.w	r2, r3, #3
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80b4 	beq.w	80019ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b60      	ldr	r3, [pc, #384]	; (8001a0c <HAL_GPIO_Init+0x30c>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a5f      	ldr	r2, [pc, #380]	; (8001a0c <HAL_GPIO_Init+0x30c>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <HAL_GPIO_Init+0x30c>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018a2:	4a5b      	ldr	r2, [pc, #364]	; (8001a10 <HAL_GPIO_Init+0x310>)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_GPIO_Init+0x314>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d02b      	beq.n	8001926 <HAL_GPIO_Init+0x226>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a51      	ldr	r2, [pc, #324]	; (8001a18 <HAL_GPIO_Init+0x318>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d025      	beq.n	8001922 <HAL_GPIO_Init+0x222>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a50      	ldr	r2, [pc, #320]	; (8001a1c <HAL_GPIO_Init+0x31c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d01f      	beq.n	800191e <HAL_GPIO_Init+0x21e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4f      	ldr	r2, [pc, #316]	; (8001a20 <HAL_GPIO_Init+0x320>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d019      	beq.n	800191a <HAL_GPIO_Init+0x21a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4e      	ldr	r2, [pc, #312]	; (8001a24 <HAL_GPIO_Init+0x324>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d013      	beq.n	8001916 <HAL_GPIO_Init+0x216>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4d      	ldr	r2, [pc, #308]	; (8001a28 <HAL_GPIO_Init+0x328>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00d      	beq.n	8001912 <HAL_GPIO_Init+0x212>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4c      	ldr	r2, [pc, #304]	; (8001a2c <HAL_GPIO_Init+0x32c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d007      	beq.n	800190e <HAL_GPIO_Init+0x20e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4b      	ldr	r2, [pc, #300]	; (8001a30 <HAL_GPIO_Init+0x330>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d101      	bne.n	800190a <HAL_GPIO_Init+0x20a>
 8001906:	2307      	movs	r3, #7
 8001908:	e00e      	b.n	8001928 <HAL_GPIO_Init+0x228>
 800190a:	2308      	movs	r3, #8
 800190c:	e00c      	b.n	8001928 <HAL_GPIO_Init+0x228>
 800190e:	2306      	movs	r3, #6
 8001910:	e00a      	b.n	8001928 <HAL_GPIO_Init+0x228>
 8001912:	2305      	movs	r3, #5
 8001914:	e008      	b.n	8001928 <HAL_GPIO_Init+0x228>
 8001916:	2304      	movs	r3, #4
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x228>
 800191a:	2303      	movs	r3, #3
 800191c:	e004      	b.n	8001928 <HAL_GPIO_Init+0x228>
 800191e:	2302      	movs	r3, #2
 8001920:	e002      	b.n	8001928 <HAL_GPIO_Init+0x228>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x228>
 8001926:	2300      	movs	r3, #0
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f002 0203 	and.w	r2, r2, #3
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	4093      	lsls	r3, r2
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001938:	4935      	ldr	r1, [pc, #212]	; (8001a10 <HAL_GPIO_Init+0x310>)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001946:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <HAL_GPIO_Init+0x334>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800196a:	4a32      	ldr	r2, [pc, #200]	; (8001a34 <HAL_GPIO_Init+0x334>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001970:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <HAL_GPIO_Init+0x334>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001994:	4a27      	ldr	r2, [pc, #156]	; (8001a34 <HAL_GPIO_Init+0x334>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199a:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_GPIO_Init+0x334>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019be:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_GPIO_Init+0x334>)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_GPIO_Init+0x334>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e8:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <HAL_GPIO_Init+0x334>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	f67f ae90 	bls.w	800171c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3724      	adds	r7, #36	; 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40013800 	.word	0x40013800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40021400 	.word	0x40021400
 8001a2c:	40021800 	.word	0x40021800
 8001a30:	40021c00 	.word	0x40021c00
 8001a34:	40013c00 	.word	0x40013c00

08001a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
 8001a44:	4613      	mov	r3, r2
 8001a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a48:	787b      	ldrb	r3, [r7, #1]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a54:	e003      	b.n	8001a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a56:	887b      	ldrh	r3, [r7, #2]
 8001a58:	041a      	lsls	r2, r3, #16
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	619a      	str	r2, [r3, #24]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a7c:	887a      	ldrh	r2, [r7, #2]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4013      	ands	r3, r2
 8001a82:	041a      	lsls	r2, r3, #16
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	400b      	ands	r3, r1
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	619a      	str	r2, [r3, #24]
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e264      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d075      	beq.n	8001baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001abe:	4ba3      	ldr	r3, [pc, #652]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d00c      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aca:	4ba0      	ldr	r3, [pc, #640]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d112      	bne.n	8001afc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad6:	4b9d      	ldr	r3, [pc, #628]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ae2:	d10b      	bne.n	8001afc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	4b99      	ldr	r3, [pc, #612]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d05b      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x108>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d157      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e23f      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b04:	d106      	bne.n	8001b14 <HAL_RCC_OscConfig+0x74>
 8001b06:	4b91      	ldr	r3, [pc, #580]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a90      	ldr	r2, [pc, #576]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e01d      	b.n	8001b50 <HAL_RCC_OscConfig+0xb0>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x98>
 8001b1e:	4b8b      	ldr	r3, [pc, #556]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a8a      	ldr	r2, [pc, #552]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a87      	ldr	r2, [pc, #540]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0xb0>
 8001b38:	4b84      	ldr	r3, [pc, #528]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a83      	ldr	r2, [pc, #524]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a80      	ldr	r2, [pc, #512]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d013      	beq.n	8001b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff f8b2 	bl	8000cc0 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff f8ae 	bl	8000cc0 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e204      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0xc0>
 8001b7e:	e014      	b.n	8001baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff f89e 	bl	8000cc0 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff f89a 	bl	8000cc0 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1f0      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	4b6c      	ldr	r3, [pc, #432]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0xe8>
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d063      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bb6:	4b65      	ldr	r3, [pc, #404]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc2:	4b62      	ldr	r3, [pc, #392]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d11c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bce:	4b5f      	ldr	r3, [pc, #380]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d116      	bne.n	8001c08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	4b5c      	ldr	r3, [pc, #368]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x152>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e1c4      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b56      	ldr	r3, [pc, #344]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4952      	ldr	r1, [pc, #328]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	e03a      	b.n	8001c7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c10:	4b4f      	ldr	r3, [pc, #316]	; (8001d50 <HAL_RCC_OscConfig+0x2b0>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff f853 	bl	8000cc0 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff f84f 	bl	8000cc0 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1a5      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4940      	ldr	r1, [pc, #256]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	e015      	b.n	8001c7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_OscConfig+0x2b0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff f832 	bl	8000cc0 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff f82e 	bl	8000cc0 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e184      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d030      	beq.n	8001cec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d016      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_RCC_OscConfig+0x2b4>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7ff f812 	bl	8000cc0 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff f80e 	bl	8000cc0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e164      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x200>
 8001cbe:	e015      	b.n	8001cec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc0:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_RCC_OscConfig+0x2b4>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7fe fffb 	bl	8000cc0 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cce:	f7fe fff7 	bl	8000cc0 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e14d      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a0 	beq.w	8001e3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10f      	bne.n	8001d2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d26:	2301      	movs	r3, #1
 8001d28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_OscConfig+0x2b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d121      	bne.n	8001d7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_RCC_OscConfig+0x2b8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_RCC_OscConfig+0x2b8>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7fe ffbd 	bl	8000cc0 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	e011      	b.n	8001d6e <HAL_RCC_OscConfig+0x2ce>
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	42470000 	.word	0x42470000
 8001d54:	42470e80 	.word	0x42470e80
 8001d58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5c:	f7fe ffb0 	bl	8000cc0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e106      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b85      	ldr	r3, [pc, #532]	; (8001f84 <HAL_RCC_OscConfig+0x4e4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d106      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2f0>
 8001d82:	4b81      	ldr	r3, [pc, #516]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	4a80      	ldr	r2, [pc, #512]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8e:	e01c      	b.n	8001dca <HAL_RCC_OscConfig+0x32a>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d10c      	bne.n	8001db2 <HAL_RCC_OscConfig+0x312>
 8001d98:	4b7b      	ldr	r3, [pc, #492]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	4a7a      	ldr	r2, [pc, #488]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6713      	str	r3, [r2, #112]	; 0x70
 8001da4:	4b78      	ldr	r3, [pc, #480]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	4a77      	ldr	r2, [pc, #476]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6713      	str	r3, [r2, #112]	; 0x70
 8001db0:	e00b      	b.n	8001dca <HAL_RCC_OscConfig+0x32a>
 8001db2:	4b75      	ldr	r3, [pc, #468]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	4a74      	ldr	r2, [pc, #464]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbe:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a71      	ldr	r2, [pc, #452]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d015      	beq.n	8001dfe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd2:	f7fe ff75 	bl	8000cc0 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7fe ff71 	bl	8000cc0 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0c5      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df0:	4b65      	ldr	r3, [pc, #404]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ee      	beq.n	8001dda <HAL_RCC_OscConfig+0x33a>
 8001dfc:	e014      	b.n	8001e28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7fe ff5f 	bl	8000cc0 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7fe ff5b 	bl	8000cc0 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e0af      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1c:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ee      	bne.n	8001e06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d105      	bne.n	8001e3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2e:	4b56      	ldr	r3, [pc, #344]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a55      	ldr	r2, [pc, #340]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 809b 	beq.w	8001f7a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d05c      	beq.n	8001f0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d141      	bne.n	8001edc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <HAL_RCC_OscConfig+0x4ec>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7fe ff2f 	bl	8000cc0 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e66:	f7fe ff2b 	bl	8000cc0 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e081      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e78:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69da      	ldr	r2, [r3, #28]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	019b      	lsls	r3, r3, #6
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	085b      	lsrs	r3, r3, #1
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	061b      	lsls	r3, r3, #24
 8001ea8:	4937      	ldr	r1, [pc, #220]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_RCC_OscConfig+0x4ec>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7fe ff04 	bl	8000cc0 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7fe ff00 	bl	8000cc0 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e056      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x41c>
 8001eda:	e04e      	b.n	8001f7a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_RCC_OscConfig+0x4ec>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7fe feed 	bl	8000cc0 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eea:	f7fe fee9 	bl	8000cc0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e03f      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efc:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x44a>
 8001f08:	e037      	b.n	8001f7a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e032      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_RCC_OscConfig+0x4e8>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d028      	beq.n	8001f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d121      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d11a      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f46:	4013      	ands	r3, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f4c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d111      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40007000 	.word	0x40007000
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	42470060 	.word	0x42470060

08001f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0cc      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d90c      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b65      	ldr	r3, [pc, #404]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0b8      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe4:	4b59      	ldr	r3, [pc, #356]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ffc:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	494d      	ldr	r1, [pc, #308]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d044      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d119      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e07f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d003      	beq.n	800204e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800204a:	2b03      	cmp	r3, #3
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204e:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e06f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e067      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206e:	4b37      	ldr	r3, [pc, #220]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f023 0203 	bic.w	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4934      	ldr	r1, [pc, #208]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002080:	f7fe fe1e 	bl	8000cc0 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7fe fe1a 	bl	8000cc0 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e04f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 020c 	and.w	r2, r3, #12
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1eb      	bne.n	8002088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d20c      	bcs.n	80020d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e032      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4916      	ldr	r1, [pc, #88]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	490e      	ldr	r1, [pc, #56]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002116:	f000 f821 	bl	800215c <HAL_RCC_GetSysClockFreq>
 800211a:	4602      	mov	r2, r0
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	490a      	ldr	r1, [pc, #40]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	5ccb      	ldrb	r3, [r1, r3]
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x1c8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fd7e 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023c00 	.word	0x40023c00
 800214c:	40023800 	.word	0x40023800
 8002150:	08003e4c 	.word	0x08003e4c
 8002154:	20000000 	.word	0x20000000
 8002158:	20000004 	.word	0x20000004

0800215c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	2300      	movs	r3, #0
 800216e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002174:	4b67      	ldr	r3, [pc, #412]	; (8002314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d00d      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x40>
 8002180:	2b08      	cmp	r3, #8
 8002182:	f200 80bd 	bhi.w	8002300 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x34>
 800218a:	2b04      	cmp	r3, #4
 800218c:	d003      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x3a>
 800218e:	e0b7      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b61      	ldr	r3, [pc, #388]	; (8002318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002192:	60bb      	str	r3, [r7, #8]
       break;
 8002194:	e0b7      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002196:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002198:	60bb      	str	r3, [r7, #8]
      break;
 800219a:	e0b4      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800219c:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a6:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d04d      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b2:	4b58      	ldr	r3, [pc, #352]	; (8002314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	099b      	lsrs	r3, r3, #6
 80021b8:	461a      	mov	r2, r3
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021c2:	f04f 0100 	mov.w	r1, #0
 80021c6:	ea02 0800 	and.w	r8, r2, r0
 80021ca:	ea03 0901 	and.w	r9, r3, r1
 80021ce:	4640      	mov	r0, r8
 80021d0:	4649      	mov	r1, r9
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	014b      	lsls	r3, r1, #5
 80021dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021e0:	0142      	lsls	r2, r0, #5
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	ebb0 0008 	subs.w	r0, r0, r8
 80021ea:	eb61 0109 	sbc.w	r1, r1, r9
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	018b      	lsls	r3, r1, #6
 80021f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021fc:	0182      	lsls	r2, r0, #6
 80021fe:	1a12      	subs	r2, r2, r0
 8002200:	eb63 0301 	sbc.w	r3, r3, r1
 8002204:	f04f 0000 	mov.w	r0, #0
 8002208:	f04f 0100 	mov.w	r1, #0
 800220c:	00d9      	lsls	r1, r3, #3
 800220e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002212:	00d0      	lsls	r0, r2, #3
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	eb12 0208 	adds.w	r2, r2, r8
 800221c:	eb43 0309 	adc.w	r3, r3, r9
 8002220:	f04f 0000 	mov.w	r0, #0
 8002224:	f04f 0100 	mov.w	r1, #0
 8002228:	0259      	lsls	r1, r3, #9
 800222a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800222e:	0250      	lsls	r0, r2, #9
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	461a      	mov	r2, r3
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	f7fd ffc2 	bl	80001c8 <__aeabi_uldivmod>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4613      	mov	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e04a      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224e:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	099b      	lsrs	r3, r3, #6
 8002254:	461a      	mov	r2, r3
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	ea02 0400 	and.w	r4, r2, r0
 8002266:	ea03 0501 	and.w	r5, r3, r1
 800226a:	4620      	mov	r0, r4
 800226c:	4629      	mov	r1, r5
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	014b      	lsls	r3, r1, #5
 8002278:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800227c:	0142      	lsls	r2, r0, #5
 800227e:	4610      	mov	r0, r2
 8002280:	4619      	mov	r1, r3
 8002282:	1b00      	subs	r0, r0, r4
 8002284:	eb61 0105 	sbc.w	r1, r1, r5
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	018b      	lsls	r3, r1, #6
 8002292:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002296:	0182      	lsls	r2, r0, #6
 8002298:	1a12      	subs	r2, r2, r0
 800229a:	eb63 0301 	sbc.w	r3, r3, r1
 800229e:	f04f 0000 	mov.w	r0, #0
 80022a2:	f04f 0100 	mov.w	r1, #0
 80022a6:	00d9      	lsls	r1, r3, #3
 80022a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022ac:	00d0      	lsls	r0, r2, #3
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	1912      	adds	r2, r2, r4
 80022b4:	eb45 0303 	adc.w	r3, r5, r3
 80022b8:	f04f 0000 	mov.w	r0, #0
 80022bc:	f04f 0100 	mov.w	r1, #0
 80022c0:	0299      	lsls	r1, r3, #10
 80022c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022c6:	0290      	lsls	r0, r2, #10
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4610      	mov	r0, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	f7fd ff76 	bl	80001c8 <__aeabi_uldivmod>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4613      	mov	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	3301      	adds	r3, #1
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	60bb      	str	r3, [r7, #8]
      break;
 80022fe:	e002      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002302:	60bb      	str	r3, [r7, #8]
      break;
 8002304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002306:	68bb      	ldr	r3, [r7, #8]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	00f42400 	.word	0x00f42400
 800231c:	007a1200 	.word	0x007a1200

08002320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_RCC_GetHCLKFreq+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000000 	.word	0x20000000

08002338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800233c:	f7ff fff0 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	0a9b      	lsrs	r3, r3, #10
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4903      	ldr	r1, [pc, #12]	; (800235c <HAL_RCC_GetPCLK1Freq+0x24>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40023800 	.word	0x40023800
 800235c:	08003e5c 	.word	0x08003e5c

08002360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002364:	f7ff ffdc 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	0b5b      	lsrs	r3, r3, #13
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4903      	ldr	r1, [pc, #12]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	08003e5c 	.word	0x08003e5c

08002388 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e03f      	b.n	800241a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7fe fa4a 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2224      	movs	r2, #36	; 0x24
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 fe65 	bl	800309c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002400:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	4613      	mov	r3, r2
 800242e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b20      	cmp	r3, #32
 800243a:	d11d      	bne.n	8002478 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_UART_Receive_DMA+0x26>
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e016      	b.n	800247a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_UART_Receive_DMA+0x38>
 8002456:	2302      	movs	r3, #2
 8002458:	e00f      	b.n	800247a <HAL_UART_Receive_DMA+0x58>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	461a      	mov	r2, r3
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 fbb8 	bl	8002be4 <UART_Start_Receive_DMA>
 8002474:	4603      	mov	r3, r0
 8002476:	e000      	b.n	800247a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002478:	2302      	movs	r3, #2
  }
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b0ba      	sub	sp, #232	; 0xe8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80024c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10f      	bne.n	80024ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_UART_IRQHandler+0x66>
 80024d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fd1f 	bl	8002f26 <UART_Receive_IT>
      return;
 80024e8:	e256      	b.n	8002998 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80de 	beq.w	80026b0 <HAL_UART_IRQHandler+0x22c>
 80024f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d106      	bne.n	800250e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002504:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80d1 	beq.w	80026b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800250e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_UART_IRQHandler+0xae>
 800251a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_UART_IRQHandler+0xd2>
 800253e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f043 0202 	orr.w	r2, r3, #2
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_UART_IRQHandler+0xf6>
 8002562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f043 0204 	orr.w	r2, r3, #4
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800257a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d011      	beq.n	80025aa <HAL_UART_IRQHandler+0x126>
 8002586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f043 0208 	orr.w	r2, r3, #8
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 81ed 	beq.w	800298e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_UART_IRQHandler+0x14e>
 80025c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fcaa 	bl	8002f26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <HAL_UART_IRQHandler+0x17a>
 80025f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d04f      	beq.n	800269e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fbb2 	bl	8002d68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b40      	cmp	r3, #64	; 0x40
 8002610:	d141      	bne.n	8002696 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3314      	adds	r3, #20
 8002618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002620:	e853 3f00 	ldrex	r3, [r3]
 8002624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800262c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3314      	adds	r3, #20
 800263a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800263e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800264a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800264e:	e841 2300 	strex	r3, r2, [r1]
 8002652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1d9      	bne.n	8002612 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	2b00      	cmp	r3, #0
 8002664:	d013      	beq.n	800268e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	4a7d      	ldr	r2, [pc, #500]	; (8002860 <HAL_UART_IRQHandler+0x3dc>)
 800266c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fdb8 	bl	80011e8 <HAL_DMA_Abort_IT>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002688:	4610      	mov	r0, r2
 800268a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800268c:	e00e      	b.n	80026ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f99a 	bl	80029c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002694:	e00a      	b.n	80026ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f996 	bl	80029c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269c:	e006      	b.n	80026ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f992 	bl	80029c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026aa:	e170      	b.n	800298e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ac:	bf00      	nop
    return;
 80026ae:	e16e      	b.n	800298e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	f040 814a 	bne.w	800294e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8143 	beq.w	800294e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80026c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 813c 	beq.w	800294e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b40      	cmp	r3, #64	; 0x40
 80026f8:	f040 80b4 	bne.w	8002864 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002708:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8140 	beq.w	8002992 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800271a:	429a      	cmp	r2, r3
 800271c:	f080 8139 	bcs.w	8002992 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002726:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002732:	f000 8088 	beq.w	8002846 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	330c      	adds	r3, #12
 800273c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002740:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002744:	e853 3f00 	ldrex	r3, [r3]
 8002748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800274c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	330c      	adds	r3, #12
 800275e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002762:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800276e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002772:	e841 2300 	strex	r3, r2, [r1]
 8002776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800277a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1d9      	bne.n	8002736 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3314      	adds	r3, #20
 8002788:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800278c:	e853 3f00 	ldrex	r3, [r3]
 8002790:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3314      	adds	r3, #20
 80027a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027b2:	e841 2300 	strex	r3, r2, [r1]
 80027b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1e1      	bne.n	8002782 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3314      	adds	r3, #20
 80027c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027c8:	e853 3f00 	ldrex	r3, [r3]
 80027cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80027ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3314      	adds	r3, #20
 80027de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80027e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80027e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027ea:	e841 2300 	strex	r3, r2, [r1]
 80027ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1e3      	bne.n	80027be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800280e:	e853 3f00 	ldrex	r3, [r3]
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002816:	f023 0310 	bic.w	r3, r3, #16
 800281a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	330c      	adds	r3, #12
 8002824:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002828:	65ba      	str	r2, [r7, #88]	; 0x58
 800282a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800282e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002830:	e841 2300 	strex	r3, r2, [r1]
 8002834:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e3      	bne.n	8002804 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fc61 	bl	8001108 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800284e:	b29b      	uxth	r3, r3
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	b29b      	uxth	r3, r3
 8002854:	4619      	mov	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8c0 	bl	80029dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800285c:	e099      	b.n	8002992 <HAL_UART_IRQHandler+0x50e>
 800285e:	bf00      	nop
 8002860:	08002e2f 	.word	0x08002e2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800286c:	b29b      	uxth	r3, r3
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 808b 	beq.w	8002996 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002880:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8086 	beq.w	8002996 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	330c      	adds	r3, #12
 8002890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	e853 3f00 	ldrex	r3, [r3]
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800289a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028ae:	647a      	str	r2, [r7, #68]	; 0x44
 80028b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028b6:	e841 2300 	strex	r3, r2, [r1]
 80028ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1e3      	bne.n	800288a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3314      	adds	r3, #20
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	e853 3f00 	ldrex	r3, [r3]
 80028d0:	623b      	str	r3, [r7, #32]
   return(result);
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3314      	adds	r3, #20
 80028e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80028e6:	633a      	str	r2, [r7, #48]	; 0x30
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ee:	e841 2300 	strex	r3, r2, [r1]
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1e3      	bne.n	80028c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	330c      	adds	r3, #12
 800290e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	e853 3f00 	ldrex	r3, [r3]
 8002916:	60fb      	str	r3, [r7, #12]
   return(result);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0310 	bic.w	r3, r3, #16
 800291e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	330c      	adds	r3, #12
 8002928:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800292c:	61fa      	str	r2, [r7, #28]
 800292e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002930:	69b9      	ldr	r1, [r7, #24]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	e841 2300 	strex	r3, r2, [r1]
 8002938:	617b      	str	r3, [r7, #20]
   return(result);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e3      	bne.n	8002908 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f848 	bl	80029dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800294c:	e023      	b.n	8002996 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800294e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <HAL_UART_IRQHandler+0x4ea>
 800295a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800295e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fa75 	bl	8002e56 <UART_Transmit_IT>
    return;
 800296c:	e014      	b.n	8002998 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800296e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00e      	beq.n	8002998 <HAL_UART_IRQHandler+0x514>
 800297a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fab5 	bl	8002ef6 <UART_EndTransmit_IT>
    return;
 800298c:	e004      	b.n	8002998 <HAL_UART_IRQHandler+0x514>
    return;
 800298e:	bf00      	nop
 8002990:	e002      	b.n	8002998 <HAL_UART_IRQHandler+0x514>
      return;
 8002992:	bf00      	nop
 8002994:	e000      	b.n	8002998 <HAL_UART_IRQHandler+0x514>
      return;
 8002996:	bf00      	nop
  }
}
 8002998:	37e8      	adds	r7, #232	; 0xe8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop

080029a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b09c      	sub	sp, #112	; 0x70
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d172      	bne.n	8002af6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a12:	2200      	movs	r2, #0
 8002a14:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a20:	e853 3f00 	ldrex	r3, [r3]
 8002a24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	330c      	adds	r3, #12
 8002a34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a36:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a38:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a3e:	e841 2300 	strex	r3, r2, [r1]
 8002a42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e5      	bne.n	8002a16 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3314      	adds	r3, #20
 8002a50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	e853 3f00 	ldrex	r3, [r3]
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	667b      	str	r3, [r7, #100]	; 0x64
 8002a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3314      	adds	r3, #20
 8002a68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a6a:	647a      	str	r2, [r7, #68]	; 0x44
 8002a6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a72:	e841 2300 	strex	r3, r2, [r1]
 8002a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1e5      	bne.n	8002a4a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3314      	adds	r3, #20
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	e853 3f00 	ldrex	r3, [r3]
 8002a8c:	623b      	str	r3, [r7, #32]
   return(result);
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a94:	663b      	str	r3, [r7, #96]	; 0x60
 8002a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3314      	adds	r3, #20
 8002a9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa6:	e841 2300 	strex	r3, r2, [r1]
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1e5      	bne.n	8002a7e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d119      	bne.n	8002af6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	330c      	adds	r3, #12
 8002ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	e853 3f00 	ldrex	r3, [r3]
 8002ad0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f023 0310 	bic.w	r3, r3, #16
 8002ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	330c      	adds	r3, #12
 8002ae0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ae2:	61fa      	str	r2, [r7, #28]
 8002ae4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae6:	69b9      	ldr	r1, [r7, #24]
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	e841 2300 	strex	r3, r2, [r1]
 8002aee:	617b      	str	r3, [r7, #20]
   return(result);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1e5      	bne.n	8002ac2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d106      	bne.n	8002b0c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b02:	4619      	mov	r1, r3
 8002b04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002b06:	f7ff ff69 	bl	80029dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b0a:	e002      	b.n	8002b12 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002b0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002b0e:	f7fd fe45 	bl	800079c <HAL_UART_RxCpltCallback>
}
 8002b12:	bf00      	nop
 8002b14:	3770      	adds	r7, #112	; 0x70
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d108      	bne.n	8002b42 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4619      	mov	r1, r3
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f7ff ff4e 	bl	80029dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b40:	e002      	b.n	8002b48 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7ff ff36 	bl	80029b4 <HAL_UART_RxHalfCpltCallback>
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b21      	cmp	r3, #33	; 0x21
 8002b82:	d108      	bne.n	8002b96 <UART_DMAError+0x46>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002b90:	68b8      	ldr	r0, [r7, #8]
 8002b92:	f000 f8c1 	bl	8002d18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	bf0c      	ite	eq
 8002ba4:	2301      	moveq	r3, #1
 8002ba6:	2300      	movne	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b22      	cmp	r3, #34	; 0x22
 8002bb6:	d108      	bne.n	8002bca <UART_DMAError+0x7a>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002bc4:	68b8      	ldr	r0, [r7, #8]
 8002bc6:	f000 f8cf 	bl	8002d68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bd6:	68b8      	ldr	r0, [r7, #8]
 8002bd8:	f7ff fef6 	bl	80029c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b098      	sub	sp, #96	; 0x60
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	88fa      	ldrh	r2, [r7, #6]
 8002bfc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2222      	movs	r2, #34	; 0x22
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	4a3e      	ldr	r2, [pc, #248]	; (8002d0c <UART_Start_Receive_DMA+0x128>)
 8002c12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	4a3d      	ldr	r2, [pc, #244]	; (8002d10 <UART_Start_Receive_DMA+0x12c>)
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	4a3c      	ldr	r2, [pc, #240]	; (8002d14 <UART_Start_Receive_DMA+0x130>)
 8002c22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	2200      	movs	r2, #0
 8002c2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002c2c:	f107 0308 	add.w	r3, r7, #8
 8002c30:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	f7fe fa08 	bl	8001058 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c70:	e853 3f00 	ldrex	r3, [r3]
 8002c74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	330c      	adds	r3, #12
 8002c84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c86:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002c8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c8e:	e841 2300 	strex	r3, r2, [r1]
 8002c92:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1e5      	bne.n	8002c66 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3314      	adds	r3, #20
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	e853 3f00 	ldrex	r3, [r3]
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3314      	adds	r3, #20
 8002cb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cba:	63ba      	str	r2, [r7, #56]	; 0x38
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc2:	e841 2300 	strex	r3, r2, [r1]
 8002cc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1e5      	bne.n	8002c9a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3314      	adds	r3, #20
 8002cd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ce4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3314      	adds	r3, #20
 8002cec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cee:	627a      	str	r2, [r7, #36]	; 0x24
 8002cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	6a39      	ldr	r1, [r7, #32]
 8002cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e5      	bne.n	8002cce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3760      	adds	r7, #96	; 0x60
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	080029f5 	.word	0x080029f5
 8002d10:	08002b1b 	.word	0x08002b1b
 8002d14:	08002b51 	.word	0x08002b51

08002d18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	e853 3f00 	ldrex	r3, [r3]
 8002d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d36:	61fb      	str	r3, [r7, #28]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	61ba      	str	r2, [r7, #24]
 8002d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	6979      	ldr	r1, [r7, #20]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	e841 2300 	strex	r3, r2, [r1]
 8002d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e5      	bne.n	8002d20 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002d5c:	bf00      	nop
 8002d5e:	3724      	adds	r7, #36	; 0x24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b095      	sub	sp, #84	; 0x54
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	330c      	adds	r3, #12
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7a:	e853 3f00 	ldrex	r3, [r3]
 8002d7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d90:	643a      	str	r2, [r7, #64]	; 0x40
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d98:	e841 2300 	strex	r3, r2, [r1]
 8002d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e5      	bne.n	8002d70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3314      	adds	r3, #20
 8002daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	e853 3f00 	ldrex	r3, [r3]
 8002db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3314      	adds	r3, #20
 8002dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e5      	bne.n	8002da4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d119      	bne.n	8002e14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	e853 3f00 	ldrex	r3, [r3]
 8002dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f023 0310 	bic.w	r3, r3, #16
 8002df6:	647b      	str	r3, [r7, #68]	; 0x44
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e00:	61ba      	str	r2, [r7, #24]
 8002e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	6979      	ldr	r1, [r7, #20]
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	e841 2300 	strex	r3, r2, [r1]
 8002e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e5      	bne.n	8002de0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e22:	bf00      	nop
 8002e24:	3754      	adds	r7, #84	; 0x54
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff fdbd 	bl	80029c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b085      	sub	sp, #20
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b21      	cmp	r3, #33	; 0x21
 8002e68:	d13e      	bne.n	8002ee8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e72:	d114      	bne.n	8002e9e <UART_Transmit_IT+0x48>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d110      	bne.n	8002e9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	1c9a      	adds	r2, r3, #2
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	621a      	str	r2, [r3, #32]
 8002e9c:	e008      	b.n	8002eb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	1c59      	adds	r1, r3, #1
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6211      	str	r1, [r2, #32]
 8002ea8:	781a      	ldrb	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10f      	bne.n	8002ee4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e000      	b.n	8002eea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fd42 	bl	80029a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b08c      	sub	sp, #48	; 0x30
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b22      	cmp	r3, #34	; 0x22
 8002f38:	f040 80ab 	bne.w	8003092 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f44:	d117      	bne.n	8002f76 <UART_Receive_IT+0x50>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d113      	bne.n	8002f76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	1c9a      	adds	r2, r3, #2
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28
 8002f74:	e026      	b.n	8002fc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f88:	d007      	beq.n	8002f9a <UART_Receive_IT+0x74>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <UART_Receive_IT+0x82>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	e008      	b.n	8002fba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d15a      	bne.n	800308e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0220 	bic.w	r2, r2, #32
 8002fe6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	2b01      	cmp	r3, #1
 8003016:	d135      	bne.n	8003084 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	613b      	str	r3, [r7, #16]
   return(result);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f023 0310 	bic.w	r3, r3, #16
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	330c      	adds	r3, #12
 800303c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303e:	623a      	str	r2, [r7, #32]
 8003040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	69f9      	ldr	r1, [r7, #28]
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	61bb      	str	r3, [r7, #24]
   return(result);
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1e5      	bne.n	800301e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b10      	cmp	r3, #16
 800305e:	d10a      	bne.n	8003076 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff fcad 	bl	80029dc <HAL_UARTEx_RxEventCallback>
 8003082:	e002      	b.n	800308a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7fd fb89 	bl	800079c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	e002      	b.n	8003094 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	4618      	mov	r0, r3
 8003096:	3730      	adds	r7, #48	; 0x30
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a0:	b09f      	sub	sp, #124	; 0x7c
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b2:	68d9      	ldr	r1, [r3, #12]
 80030b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	ea40 0301 	orr.w	r3, r0, r1
 80030bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80030d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030e0:	f021 010c 	bic.w	r1, r1, #12
 80030e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ea:	430b      	orrs	r3, r1
 80030ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fa:	6999      	ldr	r1, [r3, #24]
 80030fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	ea40 0301 	orr.w	r3, r0, r1
 8003104:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4bc5      	ldr	r3, [pc, #788]	; (8003420 <UART_SetConfig+0x384>)
 800310c:	429a      	cmp	r2, r3
 800310e:	d004      	beq.n	800311a <UART_SetConfig+0x7e>
 8003110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4bc3      	ldr	r3, [pc, #780]	; (8003424 <UART_SetConfig+0x388>)
 8003116:	429a      	cmp	r2, r3
 8003118:	d103      	bne.n	8003122 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800311a:	f7ff f921 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 800311e:	6778      	str	r0, [r7, #116]	; 0x74
 8003120:	e002      	b.n	8003128 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003122:	f7ff f909 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8003126:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003130:	f040 80b6 	bne.w	80032a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003136:	461c      	mov	r4, r3
 8003138:	f04f 0500 	mov.w	r5, #0
 800313c:	4622      	mov	r2, r4
 800313e:	462b      	mov	r3, r5
 8003140:	1891      	adds	r1, r2, r2
 8003142:	6439      	str	r1, [r7, #64]	; 0x40
 8003144:	415b      	adcs	r3, r3
 8003146:	647b      	str	r3, [r7, #68]	; 0x44
 8003148:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800314c:	1912      	adds	r2, r2, r4
 800314e:	eb45 0303 	adc.w	r3, r5, r3
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f04f 0100 	mov.w	r1, #0
 800315a:	00d9      	lsls	r1, r3, #3
 800315c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003160:	00d0      	lsls	r0, r2, #3
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	1911      	adds	r1, r2, r4
 8003168:	6639      	str	r1, [r7, #96]	; 0x60
 800316a:	416b      	adcs	r3, r5
 800316c:	667b      	str	r3, [r7, #100]	; 0x64
 800316e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	461a      	mov	r2, r3
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	1891      	adds	r1, r2, r2
 800317a:	63b9      	str	r1, [r7, #56]	; 0x38
 800317c:	415b      	adcs	r3, r3
 800317e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003184:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003188:	f7fd f81e 	bl	80001c8 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4ba5      	ldr	r3, [pc, #660]	; (8003428 <UART_SetConfig+0x38c>)
 8003192:	fba3 2302 	umull	r2, r3, r3, r2
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	011e      	lsls	r6, r3, #4
 800319a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800319c:	461c      	mov	r4, r3
 800319e:	f04f 0500 	mov.w	r5, #0
 80031a2:	4622      	mov	r2, r4
 80031a4:	462b      	mov	r3, r5
 80031a6:	1891      	adds	r1, r2, r2
 80031a8:	6339      	str	r1, [r7, #48]	; 0x30
 80031aa:	415b      	adcs	r3, r3
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
 80031ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031b2:	1912      	adds	r2, r2, r4
 80031b4:	eb45 0303 	adc.w	r3, r5, r3
 80031b8:	f04f 0000 	mov.w	r0, #0
 80031bc:	f04f 0100 	mov.w	r1, #0
 80031c0:	00d9      	lsls	r1, r3, #3
 80031c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031c6:	00d0      	lsls	r0, r2, #3
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	1911      	adds	r1, r2, r4
 80031ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80031d0:	416b      	adcs	r3, r5
 80031d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	461a      	mov	r2, r3
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	1891      	adds	r1, r2, r2
 80031e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80031e2:	415b      	adcs	r3, r3
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031ee:	f7fc ffeb 	bl	80001c8 <__aeabi_uldivmod>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4b8c      	ldr	r3, [pc, #560]	; (8003428 <UART_SetConfig+0x38c>)
 80031f8:	fba3 1302 	umull	r1, r3, r3, r2
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	2164      	movs	r1, #100	; 0x64
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	3332      	adds	r3, #50	; 0x32
 800320a:	4a87      	ldr	r2, [pc, #540]	; (8003428 <UART_SetConfig+0x38c>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003218:	441e      	add	r6, r3
 800321a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800321c:	4618      	mov	r0, r3
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	1894      	adds	r4, r2, r2
 8003228:	623c      	str	r4, [r7, #32]
 800322a:	415b      	adcs	r3, r3
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003232:	1812      	adds	r2, r2, r0
 8003234:	eb41 0303 	adc.w	r3, r1, r3
 8003238:	f04f 0400 	mov.w	r4, #0
 800323c:	f04f 0500 	mov.w	r5, #0
 8003240:	00dd      	lsls	r5, r3, #3
 8003242:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003246:	00d4      	lsls	r4, r2, #3
 8003248:	4622      	mov	r2, r4
 800324a:	462b      	mov	r3, r5
 800324c:	1814      	adds	r4, r2, r0
 800324e:	653c      	str	r4, [r7, #80]	; 0x50
 8003250:	414b      	adcs	r3, r1
 8003252:	657b      	str	r3, [r7, #84]	; 0x54
 8003254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	461a      	mov	r2, r3
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	1891      	adds	r1, r2, r2
 8003260:	61b9      	str	r1, [r7, #24]
 8003262:	415b      	adcs	r3, r3
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800326a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800326e:	f7fc ffab 	bl	80001c8 <__aeabi_uldivmod>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4b6c      	ldr	r3, [pc, #432]	; (8003428 <UART_SetConfig+0x38c>)
 8003278:	fba3 1302 	umull	r1, r3, r3, r2
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	2164      	movs	r1, #100	; 0x64
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	3332      	adds	r3, #50	; 0x32
 800328a:	4a67      	ldr	r2, [pc, #412]	; (8003428 <UART_SetConfig+0x38c>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	f003 0207 	and.w	r2, r3, #7
 8003296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4432      	add	r2, r6
 800329c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800329e:	e0b9      	b.n	8003414 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a2:	461c      	mov	r4, r3
 80032a4:	f04f 0500 	mov.w	r5, #0
 80032a8:	4622      	mov	r2, r4
 80032aa:	462b      	mov	r3, r5
 80032ac:	1891      	adds	r1, r2, r2
 80032ae:	6139      	str	r1, [r7, #16]
 80032b0:	415b      	adcs	r3, r3
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032b8:	1912      	adds	r2, r2, r4
 80032ba:	eb45 0303 	adc.w	r3, r5, r3
 80032be:	f04f 0000 	mov.w	r0, #0
 80032c2:	f04f 0100 	mov.w	r1, #0
 80032c6:	00d9      	lsls	r1, r3, #3
 80032c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032cc:	00d0      	lsls	r0, r2, #3
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	eb12 0804 	adds.w	r8, r2, r4
 80032d6:	eb43 0905 	adc.w	r9, r3, r5
 80032da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4618      	mov	r0, r3
 80032e0:	f04f 0100 	mov.w	r1, #0
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	008b      	lsls	r3, r1, #2
 80032ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032f2:	0082      	lsls	r2, r0, #2
 80032f4:	4640      	mov	r0, r8
 80032f6:	4649      	mov	r1, r9
 80032f8:	f7fc ff66 	bl	80001c8 <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4b49      	ldr	r3, [pc, #292]	; (8003428 <UART_SetConfig+0x38c>)
 8003302:	fba3 2302 	umull	r2, r3, r3, r2
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	011e      	lsls	r6, r3, #4
 800330a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800330c:	4618      	mov	r0, r3
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	1894      	adds	r4, r2, r2
 8003318:	60bc      	str	r4, [r7, #8]
 800331a:	415b      	adcs	r3, r3
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003322:	1812      	adds	r2, r2, r0
 8003324:	eb41 0303 	adc.w	r3, r1, r3
 8003328:	f04f 0400 	mov.w	r4, #0
 800332c:	f04f 0500 	mov.w	r5, #0
 8003330:	00dd      	lsls	r5, r3, #3
 8003332:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003336:	00d4      	lsls	r4, r2, #3
 8003338:	4622      	mov	r2, r4
 800333a:	462b      	mov	r3, r5
 800333c:	1814      	adds	r4, r2, r0
 800333e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003340:	414b      	adcs	r3, r1
 8003342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	f04f 0100 	mov.w	r1, #0
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	008b      	lsls	r3, r1, #2
 8003358:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800335c:	0082      	lsls	r2, r0, #2
 800335e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003362:	f7fc ff31 	bl	80001c8 <__aeabi_uldivmod>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4b2f      	ldr	r3, [pc, #188]	; (8003428 <UART_SetConfig+0x38c>)
 800336c:	fba3 1302 	umull	r1, r3, r3, r2
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	2164      	movs	r1, #100	; 0x64
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	3332      	adds	r3, #50	; 0x32
 800337e:	4a2a      	ldr	r2, [pc, #168]	; (8003428 <UART_SetConfig+0x38c>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800338a:	441e      	add	r6, r3
 800338c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800338e:	4618      	mov	r0, r3
 8003390:	f04f 0100 	mov.w	r1, #0
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	1894      	adds	r4, r2, r2
 800339a:	603c      	str	r4, [r7, #0]
 800339c:	415b      	adcs	r3, r3
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033a4:	1812      	adds	r2, r2, r0
 80033a6:	eb41 0303 	adc.w	r3, r1, r3
 80033aa:	f04f 0400 	mov.w	r4, #0
 80033ae:	f04f 0500 	mov.w	r5, #0
 80033b2:	00dd      	lsls	r5, r3, #3
 80033b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033b8:	00d4      	lsls	r4, r2, #3
 80033ba:	4622      	mov	r2, r4
 80033bc:	462b      	mov	r3, r5
 80033be:	eb12 0a00 	adds.w	sl, r2, r0
 80033c2:	eb43 0b01 	adc.w	fp, r3, r1
 80033c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f04f 0100 	mov.w	r1, #0
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	008b      	lsls	r3, r1, #2
 80033da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033de:	0082      	lsls	r2, r0, #2
 80033e0:	4650      	mov	r0, sl
 80033e2:	4659      	mov	r1, fp
 80033e4:	f7fc fef0 	bl	80001c8 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <UART_SetConfig+0x38c>)
 80033ee:	fba3 1302 	umull	r1, r3, r3, r2
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2164      	movs	r1, #100	; 0x64
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	3332      	adds	r3, #50	; 0x32
 8003400:	4a09      	ldr	r2, [pc, #36]	; (8003428 <UART_SetConfig+0x38c>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	f003 020f 	and.w	r2, r3, #15
 800340c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4432      	add	r2, r6
 8003412:	609a      	str	r2, [r3, #8]
}
 8003414:	bf00      	nop
 8003416:	377c      	adds	r7, #124	; 0x7c
 8003418:	46bd      	mov	sp, r7
 800341a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800341e:	bf00      	nop
 8003420:	40011000 	.word	0x40011000
 8003424:	40011400 	.word	0x40011400
 8003428:	51eb851f 	.word	0x51eb851f

0800342c <__errno>:
 800342c:	4b01      	ldr	r3, [pc, #4]	; (8003434 <__errno+0x8>)
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	2000000c 	.word	0x2000000c

08003438 <__libc_init_array>:
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	4d0d      	ldr	r5, [pc, #52]	; (8003470 <__libc_init_array+0x38>)
 800343c:	4c0d      	ldr	r4, [pc, #52]	; (8003474 <__libc_init_array+0x3c>)
 800343e:	1b64      	subs	r4, r4, r5
 8003440:	10a4      	asrs	r4, r4, #2
 8003442:	2600      	movs	r6, #0
 8003444:	42a6      	cmp	r6, r4
 8003446:	d109      	bne.n	800345c <__libc_init_array+0x24>
 8003448:	4d0b      	ldr	r5, [pc, #44]	; (8003478 <__libc_init_array+0x40>)
 800344a:	4c0c      	ldr	r4, [pc, #48]	; (800347c <__libc_init_array+0x44>)
 800344c:	f000 fce6 	bl	8003e1c <_init>
 8003450:	1b64      	subs	r4, r4, r5
 8003452:	10a4      	asrs	r4, r4, #2
 8003454:	2600      	movs	r6, #0
 8003456:	42a6      	cmp	r6, r4
 8003458:	d105      	bne.n	8003466 <__libc_init_array+0x2e>
 800345a:	bd70      	pop	{r4, r5, r6, pc}
 800345c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003460:	4798      	blx	r3
 8003462:	3601      	adds	r6, #1
 8003464:	e7ee      	b.n	8003444 <__libc_init_array+0xc>
 8003466:	f855 3b04 	ldr.w	r3, [r5], #4
 800346a:	4798      	blx	r3
 800346c:	3601      	adds	r6, #1
 800346e:	e7f2      	b.n	8003456 <__libc_init_array+0x1e>
 8003470:	08003ed8 	.word	0x08003ed8
 8003474:	08003ed8 	.word	0x08003ed8
 8003478:	08003ed8 	.word	0x08003ed8
 800347c:	08003edc 	.word	0x08003edc

08003480 <memset>:
 8003480:	4402      	add	r2, r0
 8003482:	4603      	mov	r3, r0
 8003484:	4293      	cmp	r3, r2
 8003486:	d100      	bne.n	800348a <memset+0xa>
 8003488:	4770      	bx	lr
 800348a:	f803 1b01 	strb.w	r1, [r3], #1
 800348e:	e7f9      	b.n	8003484 <memset+0x4>

08003490 <_puts_r>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	460e      	mov	r6, r1
 8003494:	4605      	mov	r5, r0
 8003496:	b118      	cbz	r0, 80034a0 <_puts_r+0x10>
 8003498:	6983      	ldr	r3, [r0, #24]
 800349a:	b90b      	cbnz	r3, 80034a0 <_puts_r+0x10>
 800349c:	f000 fa48 	bl	8003930 <__sinit>
 80034a0:	69ab      	ldr	r3, [r5, #24]
 80034a2:	68ac      	ldr	r4, [r5, #8]
 80034a4:	b913      	cbnz	r3, 80034ac <_puts_r+0x1c>
 80034a6:	4628      	mov	r0, r5
 80034a8:	f000 fa42 	bl	8003930 <__sinit>
 80034ac:	4b2c      	ldr	r3, [pc, #176]	; (8003560 <_puts_r+0xd0>)
 80034ae:	429c      	cmp	r4, r3
 80034b0:	d120      	bne.n	80034f4 <_puts_r+0x64>
 80034b2:	686c      	ldr	r4, [r5, #4]
 80034b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034b6:	07db      	lsls	r3, r3, #31
 80034b8:	d405      	bmi.n	80034c6 <_puts_r+0x36>
 80034ba:	89a3      	ldrh	r3, [r4, #12]
 80034bc:	0598      	lsls	r0, r3, #22
 80034be:	d402      	bmi.n	80034c6 <_puts_r+0x36>
 80034c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034c2:	f000 fad3 	bl	8003a6c <__retarget_lock_acquire_recursive>
 80034c6:	89a3      	ldrh	r3, [r4, #12]
 80034c8:	0719      	lsls	r1, r3, #28
 80034ca:	d51d      	bpl.n	8003508 <_puts_r+0x78>
 80034cc:	6923      	ldr	r3, [r4, #16]
 80034ce:	b1db      	cbz	r3, 8003508 <_puts_r+0x78>
 80034d0:	3e01      	subs	r6, #1
 80034d2:	68a3      	ldr	r3, [r4, #8]
 80034d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034d8:	3b01      	subs	r3, #1
 80034da:	60a3      	str	r3, [r4, #8]
 80034dc:	bb39      	cbnz	r1, 800352e <_puts_r+0x9e>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	da38      	bge.n	8003554 <_puts_r+0xc4>
 80034e2:	4622      	mov	r2, r4
 80034e4:	210a      	movs	r1, #10
 80034e6:	4628      	mov	r0, r5
 80034e8:	f000 f848 	bl	800357c <__swbuf_r>
 80034ec:	3001      	adds	r0, #1
 80034ee:	d011      	beq.n	8003514 <_puts_r+0x84>
 80034f0:	250a      	movs	r5, #10
 80034f2:	e011      	b.n	8003518 <_puts_r+0x88>
 80034f4:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <_puts_r+0xd4>)
 80034f6:	429c      	cmp	r4, r3
 80034f8:	d101      	bne.n	80034fe <_puts_r+0x6e>
 80034fa:	68ac      	ldr	r4, [r5, #8]
 80034fc:	e7da      	b.n	80034b4 <_puts_r+0x24>
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <_puts_r+0xd8>)
 8003500:	429c      	cmp	r4, r3
 8003502:	bf08      	it	eq
 8003504:	68ec      	ldreq	r4, [r5, #12]
 8003506:	e7d5      	b.n	80034b4 <_puts_r+0x24>
 8003508:	4621      	mov	r1, r4
 800350a:	4628      	mov	r0, r5
 800350c:	f000 f888 	bl	8003620 <__swsetup_r>
 8003510:	2800      	cmp	r0, #0
 8003512:	d0dd      	beq.n	80034d0 <_puts_r+0x40>
 8003514:	f04f 35ff 	mov.w	r5, #4294967295
 8003518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800351a:	07da      	lsls	r2, r3, #31
 800351c:	d405      	bmi.n	800352a <_puts_r+0x9a>
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	059b      	lsls	r3, r3, #22
 8003522:	d402      	bmi.n	800352a <_puts_r+0x9a>
 8003524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003526:	f000 faa2 	bl	8003a6e <__retarget_lock_release_recursive>
 800352a:	4628      	mov	r0, r5
 800352c:	bd70      	pop	{r4, r5, r6, pc}
 800352e:	2b00      	cmp	r3, #0
 8003530:	da04      	bge.n	800353c <_puts_r+0xac>
 8003532:	69a2      	ldr	r2, [r4, #24]
 8003534:	429a      	cmp	r2, r3
 8003536:	dc06      	bgt.n	8003546 <_puts_r+0xb6>
 8003538:	290a      	cmp	r1, #10
 800353a:	d004      	beq.n	8003546 <_puts_r+0xb6>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	6022      	str	r2, [r4, #0]
 8003542:	7019      	strb	r1, [r3, #0]
 8003544:	e7c5      	b.n	80034d2 <_puts_r+0x42>
 8003546:	4622      	mov	r2, r4
 8003548:	4628      	mov	r0, r5
 800354a:	f000 f817 	bl	800357c <__swbuf_r>
 800354e:	3001      	adds	r0, #1
 8003550:	d1bf      	bne.n	80034d2 <_puts_r+0x42>
 8003552:	e7df      	b.n	8003514 <_puts_r+0x84>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	250a      	movs	r5, #10
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	6022      	str	r2, [r4, #0]
 800355c:	701d      	strb	r5, [r3, #0]
 800355e:	e7db      	b.n	8003518 <_puts_r+0x88>
 8003560:	08003e90 	.word	0x08003e90
 8003564:	08003eb0 	.word	0x08003eb0
 8003568:	08003e70 	.word	0x08003e70

0800356c <puts>:
 800356c:	4b02      	ldr	r3, [pc, #8]	; (8003578 <puts+0xc>)
 800356e:	4601      	mov	r1, r0
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	f7ff bf8d 	b.w	8003490 <_puts_r>
 8003576:	bf00      	nop
 8003578:	2000000c 	.word	0x2000000c

0800357c <__swbuf_r>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	460e      	mov	r6, r1
 8003580:	4614      	mov	r4, r2
 8003582:	4605      	mov	r5, r0
 8003584:	b118      	cbz	r0, 800358e <__swbuf_r+0x12>
 8003586:	6983      	ldr	r3, [r0, #24]
 8003588:	b90b      	cbnz	r3, 800358e <__swbuf_r+0x12>
 800358a:	f000 f9d1 	bl	8003930 <__sinit>
 800358e:	4b21      	ldr	r3, [pc, #132]	; (8003614 <__swbuf_r+0x98>)
 8003590:	429c      	cmp	r4, r3
 8003592:	d12b      	bne.n	80035ec <__swbuf_r+0x70>
 8003594:	686c      	ldr	r4, [r5, #4]
 8003596:	69a3      	ldr	r3, [r4, #24]
 8003598:	60a3      	str	r3, [r4, #8]
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	071a      	lsls	r2, r3, #28
 800359e:	d52f      	bpl.n	8003600 <__swbuf_r+0x84>
 80035a0:	6923      	ldr	r3, [r4, #16]
 80035a2:	b36b      	cbz	r3, 8003600 <__swbuf_r+0x84>
 80035a4:	6923      	ldr	r3, [r4, #16]
 80035a6:	6820      	ldr	r0, [r4, #0]
 80035a8:	1ac0      	subs	r0, r0, r3
 80035aa:	6963      	ldr	r3, [r4, #20]
 80035ac:	b2f6      	uxtb	r6, r6
 80035ae:	4283      	cmp	r3, r0
 80035b0:	4637      	mov	r7, r6
 80035b2:	dc04      	bgt.n	80035be <__swbuf_r+0x42>
 80035b4:	4621      	mov	r1, r4
 80035b6:	4628      	mov	r0, r5
 80035b8:	f000 f926 	bl	8003808 <_fflush_r>
 80035bc:	bb30      	cbnz	r0, 800360c <__swbuf_r+0x90>
 80035be:	68a3      	ldr	r3, [r4, #8]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	60a3      	str	r3, [r4, #8]
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	6022      	str	r2, [r4, #0]
 80035ca:	701e      	strb	r6, [r3, #0]
 80035cc:	6963      	ldr	r3, [r4, #20]
 80035ce:	3001      	adds	r0, #1
 80035d0:	4283      	cmp	r3, r0
 80035d2:	d004      	beq.n	80035de <__swbuf_r+0x62>
 80035d4:	89a3      	ldrh	r3, [r4, #12]
 80035d6:	07db      	lsls	r3, r3, #31
 80035d8:	d506      	bpl.n	80035e8 <__swbuf_r+0x6c>
 80035da:	2e0a      	cmp	r6, #10
 80035dc:	d104      	bne.n	80035e8 <__swbuf_r+0x6c>
 80035de:	4621      	mov	r1, r4
 80035e0:	4628      	mov	r0, r5
 80035e2:	f000 f911 	bl	8003808 <_fflush_r>
 80035e6:	b988      	cbnz	r0, 800360c <__swbuf_r+0x90>
 80035e8:	4638      	mov	r0, r7
 80035ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <__swbuf_r+0x9c>)
 80035ee:	429c      	cmp	r4, r3
 80035f0:	d101      	bne.n	80035f6 <__swbuf_r+0x7a>
 80035f2:	68ac      	ldr	r4, [r5, #8]
 80035f4:	e7cf      	b.n	8003596 <__swbuf_r+0x1a>
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <__swbuf_r+0xa0>)
 80035f8:	429c      	cmp	r4, r3
 80035fa:	bf08      	it	eq
 80035fc:	68ec      	ldreq	r4, [r5, #12]
 80035fe:	e7ca      	b.n	8003596 <__swbuf_r+0x1a>
 8003600:	4621      	mov	r1, r4
 8003602:	4628      	mov	r0, r5
 8003604:	f000 f80c 	bl	8003620 <__swsetup_r>
 8003608:	2800      	cmp	r0, #0
 800360a:	d0cb      	beq.n	80035a4 <__swbuf_r+0x28>
 800360c:	f04f 37ff 	mov.w	r7, #4294967295
 8003610:	e7ea      	b.n	80035e8 <__swbuf_r+0x6c>
 8003612:	bf00      	nop
 8003614:	08003e90 	.word	0x08003e90
 8003618:	08003eb0 	.word	0x08003eb0
 800361c:	08003e70 	.word	0x08003e70

08003620 <__swsetup_r>:
 8003620:	4b32      	ldr	r3, [pc, #200]	; (80036ec <__swsetup_r+0xcc>)
 8003622:	b570      	push	{r4, r5, r6, lr}
 8003624:	681d      	ldr	r5, [r3, #0]
 8003626:	4606      	mov	r6, r0
 8003628:	460c      	mov	r4, r1
 800362a:	b125      	cbz	r5, 8003636 <__swsetup_r+0x16>
 800362c:	69ab      	ldr	r3, [r5, #24]
 800362e:	b913      	cbnz	r3, 8003636 <__swsetup_r+0x16>
 8003630:	4628      	mov	r0, r5
 8003632:	f000 f97d 	bl	8003930 <__sinit>
 8003636:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <__swsetup_r+0xd0>)
 8003638:	429c      	cmp	r4, r3
 800363a:	d10f      	bne.n	800365c <__swsetup_r+0x3c>
 800363c:	686c      	ldr	r4, [r5, #4]
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003644:	0719      	lsls	r1, r3, #28
 8003646:	d42c      	bmi.n	80036a2 <__swsetup_r+0x82>
 8003648:	06dd      	lsls	r5, r3, #27
 800364a:	d411      	bmi.n	8003670 <__swsetup_r+0x50>
 800364c:	2309      	movs	r3, #9
 800364e:	6033      	str	r3, [r6, #0]
 8003650:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003654:	81a3      	strh	r3, [r4, #12]
 8003656:	f04f 30ff 	mov.w	r0, #4294967295
 800365a:	e03e      	b.n	80036da <__swsetup_r+0xba>
 800365c:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <__swsetup_r+0xd4>)
 800365e:	429c      	cmp	r4, r3
 8003660:	d101      	bne.n	8003666 <__swsetup_r+0x46>
 8003662:	68ac      	ldr	r4, [r5, #8]
 8003664:	e7eb      	b.n	800363e <__swsetup_r+0x1e>
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <__swsetup_r+0xd8>)
 8003668:	429c      	cmp	r4, r3
 800366a:	bf08      	it	eq
 800366c:	68ec      	ldreq	r4, [r5, #12]
 800366e:	e7e6      	b.n	800363e <__swsetup_r+0x1e>
 8003670:	0758      	lsls	r0, r3, #29
 8003672:	d512      	bpl.n	800369a <__swsetup_r+0x7a>
 8003674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003676:	b141      	cbz	r1, 800368a <__swsetup_r+0x6a>
 8003678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800367c:	4299      	cmp	r1, r3
 800367e:	d002      	beq.n	8003686 <__swsetup_r+0x66>
 8003680:	4630      	mov	r0, r6
 8003682:	f000 fa59 	bl	8003b38 <_free_r>
 8003686:	2300      	movs	r3, #0
 8003688:	6363      	str	r3, [r4, #52]	; 0x34
 800368a:	89a3      	ldrh	r3, [r4, #12]
 800368c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003690:	81a3      	strh	r3, [r4, #12]
 8003692:	2300      	movs	r3, #0
 8003694:	6063      	str	r3, [r4, #4]
 8003696:	6923      	ldr	r3, [r4, #16]
 8003698:	6023      	str	r3, [r4, #0]
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	f043 0308 	orr.w	r3, r3, #8
 80036a0:	81a3      	strh	r3, [r4, #12]
 80036a2:	6923      	ldr	r3, [r4, #16]
 80036a4:	b94b      	cbnz	r3, 80036ba <__swsetup_r+0x9a>
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b0:	d003      	beq.n	80036ba <__swsetup_r+0x9a>
 80036b2:	4621      	mov	r1, r4
 80036b4:	4630      	mov	r0, r6
 80036b6:	f000 f9ff 	bl	8003ab8 <__smakebuf_r>
 80036ba:	89a0      	ldrh	r0, [r4, #12]
 80036bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036c0:	f010 0301 	ands.w	r3, r0, #1
 80036c4:	d00a      	beq.n	80036dc <__swsetup_r+0xbc>
 80036c6:	2300      	movs	r3, #0
 80036c8:	60a3      	str	r3, [r4, #8]
 80036ca:	6963      	ldr	r3, [r4, #20]
 80036cc:	425b      	negs	r3, r3
 80036ce:	61a3      	str	r3, [r4, #24]
 80036d0:	6923      	ldr	r3, [r4, #16]
 80036d2:	b943      	cbnz	r3, 80036e6 <__swsetup_r+0xc6>
 80036d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036d8:	d1ba      	bne.n	8003650 <__swsetup_r+0x30>
 80036da:	bd70      	pop	{r4, r5, r6, pc}
 80036dc:	0781      	lsls	r1, r0, #30
 80036de:	bf58      	it	pl
 80036e0:	6963      	ldrpl	r3, [r4, #20]
 80036e2:	60a3      	str	r3, [r4, #8]
 80036e4:	e7f4      	b.n	80036d0 <__swsetup_r+0xb0>
 80036e6:	2000      	movs	r0, #0
 80036e8:	e7f7      	b.n	80036da <__swsetup_r+0xba>
 80036ea:	bf00      	nop
 80036ec:	2000000c 	.word	0x2000000c
 80036f0:	08003e90 	.word	0x08003e90
 80036f4:	08003eb0 	.word	0x08003eb0
 80036f8:	08003e70 	.word	0x08003e70

080036fc <__sflush_r>:
 80036fc:	898a      	ldrh	r2, [r1, #12]
 80036fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003702:	4605      	mov	r5, r0
 8003704:	0710      	lsls	r0, r2, #28
 8003706:	460c      	mov	r4, r1
 8003708:	d458      	bmi.n	80037bc <__sflush_r+0xc0>
 800370a:	684b      	ldr	r3, [r1, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	dc05      	bgt.n	800371c <__sflush_r+0x20>
 8003710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	dc02      	bgt.n	800371c <__sflush_r+0x20>
 8003716:	2000      	movs	r0, #0
 8003718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800371c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800371e:	2e00      	cmp	r6, #0
 8003720:	d0f9      	beq.n	8003716 <__sflush_r+0x1a>
 8003722:	2300      	movs	r3, #0
 8003724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003728:	682f      	ldr	r7, [r5, #0]
 800372a:	602b      	str	r3, [r5, #0]
 800372c:	d032      	beq.n	8003794 <__sflush_r+0x98>
 800372e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	075a      	lsls	r2, r3, #29
 8003734:	d505      	bpl.n	8003742 <__sflush_r+0x46>
 8003736:	6863      	ldr	r3, [r4, #4]
 8003738:	1ac0      	subs	r0, r0, r3
 800373a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800373c:	b10b      	cbz	r3, 8003742 <__sflush_r+0x46>
 800373e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003740:	1ac0      	subs	r0, r0, r3
 8003742:	2300      	movs	r3, #0
 8003744:	4602      	mov	r2, r0
 8003746:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003748:	6a21      	ldr	r1, [r4, #32]
 800374a:	4628      	mov	r0, r5
 800374c:	47b0      	blx	r6
 800374e:	1c43      	adds	r3, r0, #1
 8003750:	89a3      	ldrh	r3, [r4, #12]
 8003752:	d106      	bne.n	8003762 <__sflush_r+0x66>
 8003754:	6829      	ldr	r1, [r5, #0]
 8003756:	291d      	cmp	r1, #29
 8003758:	d82c      	bhi.n	80037b4 <__sflush_r+0xb8>
 800375a:	4a2a      	ldr	r2, [pc, #168]	; (8003804 <__sflush_r+0x108>)
 800375c:	40ca      	lsrs	r2, r1
 800375e:	07d6      	lsls	r6, r2, #31
 8003760:	d528      	bpl.n	80037b4 <__sflush_r+0xb8>
 8003762:	2200      	movs	r2, #0
 8003764:	6062      	str	r2, [r4, #4]
 8003766:	04d9      	lsls	r1, r3, #19
 8003768:	6922      	ldr	r2, [r4, #16]
 800376a:	6022      	str	r2, [r4, #0]
 800376c:	d504      	bpl.n	8003778 <__sflush_r+0x7c>
 800376e:	1c42      	adds	r2, r0, #1
 8003770:	d101      	bne.n	8003776 <__sflush_r+0x7a>
 8003772:	682b      	ldr	r3, [r5, #0]
 8003774:	b903      	cbnz	r3, 8003778 <__sflush_r+0x7c>
 8003776:	6560      	str	r0, [r4, #84]	; 0x54
 8003778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800377a:	602f      	str	r7, [r5, #0]
 800377c:	2900      	cmp	r1, #0
 800377e:	d0ca      	beq.n	8003716 <__sflush_r+0x1a>
 8003780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003784:	4299      	cmp	r1, r3
 8003786:	d002      	beq.n	800378e <__sflush_r+0x92>
 8003788:	4628      	mov	r0, r5
 800378a:	f000 f9d5 	bl	8003b38 <_free_r>
 800378e:	2000      	movs	r0, #0
 8003790:	6360      	str	r0, [r4, #52]	; 0x34
 8003792:	e7c1      	b.n	8003718 <__sflush_r+0x1c>
 8003794:	6a21      	ldr	r1, [r4, #32]
 8003796:	2301      	movs	r3, #1
 8003798:	4628      	mov	r0, r5
 800379a:	47b0      	blx	r6
 800379c:	1c41      	adds	r1, r0, #1
 800379e:	d1c7      	bne.n	8003730 <__sflush_r+0x34>
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0c4      	beq.n	8003730 <__sflush_r+0x34>
 80037a6:	2b1d      	cmp	r3, #29
 80037a8:	d001      	beq.n	80037ae <__sflush_r+0xb2>
 80037aa:	2b16      	cmp	r3, #22
 80037ac:	d101      	bne.n	80037b2 <__sflush_r+0xb6>
 80037ae:	602f      	str	r7, [r5, #0]
 80037b0:	e7b1      	b.n	8003716 <__sflush_r+0x1a>
 80037b2:	89a3      	ldrh	r3, [r4, #12]
 80037b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037b8:	81a3      	strh	r3, [r4, #12]
 80037ba:	e7ad      	b.n	8003718 <__sflush_r+0x1c>
 80037bc:	690f      	ldr	r7, [r1, #16]
 80037be:	2f00      	cmp	r7, #0
 80037c0:	d0a9      	beq.n	8003716 <__sflush_r+0x1a>
 80037c2:	0793      	lsls	r3, r2, #30
 80037c4:	680e      	ldr	r6, [r1, #0]
 80037c6:	bf08      	it	eq
 80037c8:	694b      	ldreq	r3, [r1, #20]
 80037ca:	600f      	str	r7, [r1, #0]
 80037cc:	bf18      	it	ne
 80037ce:	2300      	movne	r3, #0
 80037d0:	eba6 0807 	sub.w	r8, r6, r7
 80037d4:	608b      	str	r3, [r1, #8]
 80037d6:	f1b8 0f00 	cmp.w	r8, #0
 80037da:	dd9c      	ble.n	8003716 <__sflush_r+0x1a>
 80037dc:	6a21      	ldr	r1, [r4, #32]
 80037de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037e0:	4643      	mov	r3, r8
 80037e2:	463a      	mov	r2, r7
 80037e4:	4628      	mov	r0, r5
 80037e6:	47b0      	blx	r6
 80037e8:	2800      	cmp	r0, #0
 80037ea:	dc06      	bgt.n	80037fa <__sflush_r+0xfe>
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f2:	81a3      	strh	r3, [r4, #12]
 80037f4:	f04f 30ff 	mov.w	r0, #4294967295
 80037f8:	e78e      	b.n	8003718 <__sflush_r+0x1c>
 80037fa:	4407      	add	r7, r0
 80037fc:	eba8 0800 	sub.w	r8, r8, r0
 8003800:	e7e9      	b.n	80037d6 <__sflush_r+0xda>
 8003802:	bf00      	nop
 8003804:	20400001 	.word	0x20400001

08003808 <_fflush_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	690b      	ldr	r3, [r1, #16]
 800380c:	4605      	mov	r5, r0
 800380e:	460c      	mov	r4, r1
 8003810:	b913      	cbnz	r3, 8003818 <_fflush_r+0x10>
 8003812:	2500      	movs	r5, #0
 8003814:	4628      	mov	r0, r5
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	b118      	cbz	r0, 8003822 <_fflush_r+0x1a>
 800381a:	6983      	ldr	r3, [r0, #24]
 800381c:	b90b      	cbnz	r3, 8003822 <_fflush_r+0x1a>
 800381e:	f000 f887 	bl	8003930 <__sinit>
 8003822:	4b14      	ldr	r3, [pc, #80]	; (8003874 <_fflush_r+0x6c>)
 8003824:	429c      	cmp	r4, r3
 8003826:	d11b      	bne.n	8003860 <_fflush_r+0x58>
 8003828:	686c      	ldr	r4, [r5, #4]
 800382a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ef      	beq.n	8003812 <_fflush_r+0xa>
 8003832:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003834:	07d0      	lsls	r0, r2, #31
 8003836:	d404      	bmi.n	8003842 <_fflush_r+0x3a>
 8003838:	0599      	lsls	r1, r3, #22
 800383a:	d402      	bmi.n	8003842 <_fflush_r+0x3a>
 800383c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800383e:	f000 f915 	bl	8003a6c <__retarget_lock_acquire_recursive>
 8003842:	4628      	mov	r0, r5
 8003844:	4621      	mov	r1, r4
 8003846:	f7ff ff59 	bl	80036fc <__sflush_r>
 800384a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800384c:	07da      	lsls	r2, r3, #31
 800384e:	4605      	mov	r5, r0
 8003850:	d4e0      	bmi.n	8003814 <_fflush_r+0xc>
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	059b      	lsls	r3, r3, #22
 8003856:	d4dd      	bmi.n	8003814 <_fflush_r+0xc>
 8003858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800385a:	f000 f908 	bl	8003a6e <__retarget_lock_release_recursive>
 800385e:	e7d9      	b.n	8003814 <_fflush_r+0xc>
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <_fflush_r+0x70>)
 8003862:	429c      	cmp	r4, r3
 8003864:	d101      	bne.n	800386a <_fflush_r+0x62>
 8003866:	68ac      	ldr	r4, [r5, #8]
 8003868:	e7df      	b.n	800382a <_fflush_r+0x22>
 800386a:	4b04      	ldr	r3, [pc, #16]	; (800387c <_fflush_r+0x74>)
 800386c:	429c      	cmp	r4, r3
 800386e:	bf08      	it	eq
 8003870:	68ec      	ldreq	r4, [r5, #12]
 8003872:	e7da      	b.n	800382a <_fflush_r+0x22>
 8003874:	08003e90 	.word	0x08003e90
 8003878:	08003eb0 	.word	0x08003eb0
 800387c:	08003e70 	.word	0x08003e70

08003880 <std>:
 8003880:	2300      	movs	r3, #0
 8003882:	b510      	push	{r4, lr}
 8003884:	4604      	mov	r4, r0
 8003886:	e9c0 3300 	strd	r3, r3, [r0]
 800388a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800388e:	6083      	str	r3, [r0, #8]
 8003890:	8181      	strh	r1, [r0, #12]
 8003892:	6643      	str	r3, [r0, #100]	; 0x64
 8003894:	81c2      	strh	r2, [r0, #14]
 8003896:	6183      	str	r3, [r0, #24]
 8003898:	4619      	mov	r1, r3
 800389a:	2208      	movs	r2, #8
 800389c:	305c      	adds	r0, #92	; 0x5c
 800389e:	f7ff fdef 	bl	8003480 <memset>
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <std+0x38>)
 80038a4:	6263      	str	r3, [r4, #36]	; 0x24
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <std+0x3c>)
 80038a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <std+0x40>)
 80038ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <std+0x44>)
 80038b0:	6224      	str	r4, [r4, #32]
 80038b2:	6323      	str	r3, [r4, #48]	; 0x30
 80038b4:	bd10      	pop	{r4, pc}
 80038b6:	bf00      	nop
 80038b8:	08003cad 	.word	0x08003cad
 80038bc:	08003ccf 	.word	0x08003ccf
 80038c0:	08003d07 	.word	0x08003d07
 80038c4:	08003d2b 	.word	0x08003d2b

080038c8 <_cleanup_r>:
 80038c8:	4901      	ldr	r1, [pc, #4]	; (80038d0 <_cleanup_r+0x8>)
 80038ca:	f000 b8af 	b.w	8003a2c <_fwalk_reent>
 80038ce:	bf00      	nop
 80038d0:	08003809 	.word	0x08003809

080038d4 <__sfmoreglue>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	1e4a      	subs	r2, r1, #1
 80038d8:	2568      	movs	r5, #104	; 0x68
 80038da:	4355      	muls	r5, r2
 80038dc:	460e      	mov	r6, r1
 80038de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038e2:	f000 f979 	bl	8003bd8 <_malloc_r>
 80038e6:	4604      	mov	r4, r0
 80038e8:	b140      	cbz	r0, 80038fc <__sfmoreglue+0x28>
 80038ea:	2100      	movs	r1, #0
 80038ec:	e9c0 1600 	strd	r1, r6, [r0]
 80038f0:	300c      	adds	r0, #12
 80038f2:	60a0      	str	r0, [r4, #8]
 80038f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038f8:	f7ff fdc2 	bl	8003480 <memset>
 80038fc:	4620      	mov	r0, r4
 80038fe:	bd70      	pop	{r4, r5, r6, pc}

08003900 <__sfp_lock_acquire>:
 8003900:	4801      	ldr	r0, [pc, #4]	; (8003908 <__sfp_lock_acquire+0x8>)
 8003902:	f000 b8b3 	b.w	8003a6c <__retarget_lock_acquire_recursive>
 8003906:	bf00      	nop
 8003908:	200001e4 	.word	0x200001e4

0800390c <__sfp_lock_release>:
 800390c:	4801      	ldr	r0, [pc, #4]	; (8003914 <__sfp_lock_release+0x8>)
 800390e:	f000 b8ae 	b.w	8003a6e <__retarget_lock_release_recursive>
 8003912:	bf00      	nop
 8003914:	200001e4 	.word	0x200001e4

08003918 <__sinit_lock_acquire>:
 8003918:	4801      	ldr	r0, [pc, #4]	; (8003920 <__sinit_lock_acquire+0x8>)
 800391a:	f000 b8a7 	b.w	8003a6c <__retarget_lock_acquire_recursive>
 800391e:	bf00      	nop
 8003920:	200001df 	.word	0x200001df

08003924 <__sinit_lock_release>:
 8003924:	4801      	ldr	r0, [pc, #4]	; (800392c <__sinit_lock_release+0x8>)
 8003926:	f000 b8a2 	b.w	8003a6e <__retarget_lock_release_recursive>
 800392a:	bf00      	nop
 800392c:	200001df 	.word	0x200001df

08003930 <__sinit>:
 8003930:	b510      	push	{r4, lr}
 8003932:	4604      	mov	r4, r0
 8003934:	f7ff fff0 	bl	8003918 <__sinit_lock_acquire>
 8003938:	69a3      	ldr	r3, [r4, #24]
 800393a:	b11b      	cbz	r3, 8003944 <__sinit+0x14>
 800393c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003940:	f7ff bff0 	b.w	8003924 <__sinit_lock_release>
 8003944:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003948:	6523      	str	r3, [r4, #80]	; 0x50
 800394a:	4b13      	ldr	r3, [pc, #76]	; (8003998 <__sinit+0x68>)
 800394c:	4a13      	ldr	r2, [pc, #76]	; (800399c <__sinit+0x6c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	62a2      	str	r2, [r4, #40]	; 0x28
 8003952:	42a3      	cmp	r3, r4
 8003954:	bf04      	itt	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	61a3      	streq	r3, [r4, #24]
 800395a:	4620      	mov	r0, r4
 800395c:	f000 f820 	bl	80039a0 <__sfp>
 8003960:	6060      	str	r0, [r4, #4]
 8003962:	4620      	mov	r0, r4
 8003964:	f000 f81c 	bl	80039a0 <__sfp>
 8003968:	60a0      	str	r0, [r4, #8]
 800396a:	4620      	mov	r0, r4
 800396c:	f000 f818 	bl	80039a0 <__sfp>
 8003970:	2200      	movs	r2, #0
 8003972:	60e0      	str	r0, [r4, #12]
 8003974:	2104      	movs	r1, #4
 8003976:	6860      	ldr	r0, [r4, #4]
 8003978:	f7ff ff82 	bl	8003880 <std>
 800397c:	68a0      	ldr	r0, [r4, #8]
 800397e:	2201      	movs	r2, #1
 8003980:	2109      	movs	r1, #9
 8003982:	f7ff ff7d 	bl	8003880 <std>
 8003986:	68e0      	ldr	r0, [r4, #12]
 8003988:	2202      	movs	r2, #2
 800398a:	2112      	movs	r1, #18
 800398c:	f7ff ff78 	bl	8003880 <std>
 8003990:	2301      	movs	r3, #1
 8003992:	61a3      	str	r3, [r4, #24]
 8003994:	e7d2      	b.n	800393c <__sinit+0xc>
 8003996:	bf00      	nop
 8003998:	08003e6c 	.word	0x08003e6c
 800399c:	080038c9 	.word	0x080038c9

080039a0 <__sfp>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	4607      	mov	r7, r0
 80039a4:	f7ff ffac 	bl	8003900 <__sfp_lock_acquire>
 80039a8:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <__sfp+0x84>)
 80039aa:	681e      	ldr	r6, [r3, #0]
 80039ac:	69b3      	ldr	r3, [r6, #24]
 80039ae:	b913      	cbnz	r3, 80039b6 <__sfp+0x16>
 80039b0:	4630      	mov	r0, r6
 80039b2:	f7ff ffbd 	bl	8003930 <__sinit>
 80039b6:	3648      	adds	r6, #72	; 0x48
 80039b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039bc:	3b01      	subs	r3, #1
 80039be:	d503      	bpl.n	80039c8 <__sfp+0x28>
 80039c0:	6833      	ldr	r3, [r6, #0]
 80039c2:	b30b      	cbz	r3, 8003a08 <__sfp+0x68>
 80039c4:	6836      	ldr	r6, [r6, #0]
 80039c6:	e7f7      	b.n	80039b8 <__sfp+0x18>
 80039c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80039cc:	b9d5      	cbnz	r5, 8003a04 <__sfp+0x64>
 80039ce:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <__sfp+0x88>)
 80039d0:	60e3      	str	r3, [r4, #12]
 80039d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039d6:	6665      	str	r5, [r4, #100]	; 0x64
 80039d8:	f000 f847 	bl	8003a6a <__retarget_lock_init_recursive>
 80039dc:	f7ff ff96 	bl	800390c <__sfp_lock_release>
 80039e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80039e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80039e8:	6025      	str	r5, [r4, #0]
 80039ea:	61a5      	str	r5, [r4, #24]
 80039ec:	2208      	movs	r2, #8
 80039ee:	4629      	mov	r1, r5
 80039f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039f4:	f7ff fd44 	bl	8003480 <memset>
 80039f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a00:	4620      	mov	r0, r4
 8003a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a04:	3468      	adds	r4, #104	; 0x68
 8003a06:	e7d9      	b.n	80039bc <__sfp+0x1c>
 8003a08:	2104      	movs	r1, #4
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	f7ff ff62 	bl	80038d4 <__sfmoreglue>
 8003a10:	4604      	mov	r4, r0
 8003a12:	6030      	str	r0, [r6, #0]
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d1d5      	bne.n	80039c4 <__sfp+0x24>
 8003a18:	f7ff ff78 	bl	800390c <__sfp_lock_release>
 8003a1c:	230c      	movs	r3, #12
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	e7ee      	b.n	8003a00 <__sfp+0x60>
 8003a22:	bf00      	nop
 8003a24:	08003e6c 	.word	0x08003e6c
 8003a28:	ffff0001 	.word	0xffff0001

08003a2c <_fwalk_reent>:
 8003a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a30:	4606      	mov	r6, r0
 8003a32:	4688      	mov	r8, r1
 8003a34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a38:	2700      	movs	r7, #0
 8003a3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a3e:	f1b9 0901 	subs.w	r9, r9, #1
 8003a42:	d505      	bpl.n	8003a50 <_fwalk_reent+0x24>
 8003a44:	6824      	ldr	r4, [r4, #0]
 8003a46:	2c00      	cmp	r4, #0
 8003a48:	d1f7      	bne.n	8003a3a <_fwalk_reent+0xe>
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a50:	89ab      	ldrh	r3, [r5, #12]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d907      	bls.n	8003a66 <_fwalk_reent+0x3a>
 8003a56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	d003      	beq.n	8003a66 <_fwalk_reent+0x3a>
 8003a5e:	4629      	mov	r1, r5
 8003a60:	4630      	mov	r0, r6
 8003a62:	47c0      	blx	r8
 8003a64:	4307      	orrs	r7, r0
 8003a66:	3568      	adds	r5, #104	; 0x68
 8003a68:	e7e9      	b.n	8003a3e <_fwalk_reent+0x12>

08003a6a <__retarget_lock_init_recursive>:
 8003a6a:	4770      	bx	lr

08003a6c <__retarget_lock_acquire_recursive>:
 8003a6c:	4770      	bx	lr

08003a6e <__retarget_lock_release_recursive>:
 8003a6e:	4770      	bx	lr

08003a70 <__swhatbuf_r>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	460e      	mov	r6, r1
 8003a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a78:	2900      	cmp	r1, #0
 8003a7a:	b096      	sub	sp, #88	; 0x58
 8003a7c:	4614      	mov	r4, r2
 8003a7e:	461d      	mov	r5, r3
 8003a80:	da07      	bge.n	8003a92 <__swhatbuf_r+0x22>
 8003a82:	2300      	movs	r3, #0
 8003a84:	602b      	str	r3, [r5, #0]
 8003a86:	89b3      	ldrh	r3, [r6, #12]
 8003a88:	061a      	lsls	r2, r3, #24
 8003a8a:	d410      	bmi.n	8003aae <__swhatbuf_r+0x3e>
 8003a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a90:	e00e      	b.n	8003ab0 <__swhatbuf_r+0x40>
 8003a92:	466a      	mov	r2, sp
 8003a94:	f000 f970 	bl	8003d78 <_fstat_r>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	dbf2      	blt.n	8003a82 <__swhatbuf_r+0x12>
 8003a9c:	9a01      	ldr	r2, [sp, #4]
 8003a9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003aa2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003aa6:	425a      	negs	r2, r3
 8003aa8:	415a      	adcs	r2, r3
 8003aaa:	602a      	str	r2, [r5, #0]
 8003aac:	e7ee      	b.n	8003a8c <__swhatbuf_r+0x1c>
 8003aae:	2340      	movs	r3, #64	; 0x40
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	b016      	add	sp, #88	; 0x58
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}

08003ab8 <__smakebuf_r>:
 8003ab8:	898b      	ldrh	r3, [r1, #12]
 8003aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003abc:	079d      	lsls	r5, r3, #30
 8003abe:	4606      	mov	r6, r0
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	d507      	bpl.n	8003ad4 <__smakebuf_r+0x1c>
 8003ac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	6123      	str	r3, [r4, #16]
 8003acc:	2301      	movs	r3, #1
 8003ace:	6163      	str	r3, [r4, #20]
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
 8003ad4:	ab01      	add	r3, sp, #4
 8003ad6:	466a      	mov	r2, sp
 8003ad8:	f7ff ffca 	bl	8003a70 <__swhatbuf_r>
 8003adc:	9900      	ldr	r1, [sp, #0]
 8003ade:	4605      	mov	r5, r0
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	f000 f879 	bl	8003bd8 <_malloc_r>
 8003ae6:	b948      	cbnz	r0, 8003afc <__smakebuf_r+0x44>
 8003ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aec:	059a      	lsls	r2, r3, #22
 8003aee:	d4ef      	bmi.n	8003ad0 <__smakebuf_r+0x18>
 8003af0:	f023 0303 	bic.w	r3, r3, #3
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	81a3      	strh	r3, [r4, #12]
 8003afa:	e7e3      	b.n	8003ac4 <__smakebuf_r+0xc>
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <__smakebuf_r+0x7c>)
 8003afe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	6020      	str	r0, [r4, #0]
 8003b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b08:	81a3      	strh	r3, [r4, #12]
 8003b0a:	9b00      	ldr	r3, [sp, #0]
 8003b0c:	6163      	str	r3, [r4, #20]
 8003b0e:	9b01      	ldr	r3, [sp, #4]
 8003b10:	6120      	str	r0, [r4, #16]
 8003b12:	b15b      	cbz	r3, 8003b2c <__smakebuf_r+0x74>
 8003b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f000 f93f 	bl	8003d9c <_isatty_r>
 8003b1e:	b128      	cbz	r0, 8003b2c <__smakebuf_r+0x74>
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	89a0      	ldrh	r0, [r4, #12]
 8003b2e:	4305      	orrs	r5, r0
 8003b30:	81a5      	strh	r5, [r4, #12]
 8003b32:	e7cd      	b.n	8003ad0 <__smakebuf_r+0x18>
 8003b34:	080038c9 	.word	0x080038c9

08003b38 <_free_r>:
 8003b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b3a:	2900      	cmp	r1, #0
 8003b3c:	d048      	beq.n	8003bd0 <_free_r+0x98>
 8003b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b42:	9001      	str	r0, [sp, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f1a1 0404 	sub.w	r4, r1, #4
 8003b4a:	bfb8      	it	lt
 8003b4c:	18e4      	addlt	r4, r4, r3
 8003b4e:	f000 f947 	bl	8003de0 <__malloc_lock>
 8003b52:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <_free_r+0x9c>)
 8003b54:	9801      	ldr	r0, [sp, #4]
 8003b56:	6813      	ldr	r3, [r2, #0]
 8003b58:	4615      	mov	r5, r2
 8003b5a:	b933      	cbnz	r3, 8003b6a <_free_r+0x32>
 8003b5c:	6063      	str	r3, [r4, #4]
 8003b5e:	6014      	str	r4, [r2, #0]
 8003b60:	b003      	add	sp, #12
 8003b62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b66:	f000 b941 	b.w	8003dec <__malloc_unlock>
 8003b6a:	42a3      	cmp	r3, r4
 8003b6c:	d90b      	bls.n	8003b86 <_free_r+0x4e>
 8003b6e:	6821      	ldr	r1, [r4, #0]
 8003b70:	1862      	adds	r2, r4, r1
 8003b72:	4293      	cmp	r3, r2
 8003b74:	bf04      	itt	eq
 8003b76:	681a      	ldreq	r2, [r3, #0]
 8003b78:	685b      	ldreq	r3, [r3, #4]
 8003b7a:	6063      	str	r3, [r4, #4]
 8003b7c:	bf04      	itt	eq
 8003b7e:	1852      	addeq	r2, r2, r1
 8003b80:	6022      	streq	r2, [r4, #0]
 8003b82:	602c      	str	r4, [r5, #0]
 8003b84:	e7ec      	b.n	8003b60 <_free_r+0x28>
 8003b86:	461a      	mov	r2, r3
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	b10b      	cbz	r3, 8003b90 <_free_r+0x58>
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	d9fa      	bls.n	8003b86 <_free_r+0x4e>
 8003b90:	6811      	ldr	r1, [r2, #0]
 8003b92:	1855      	adds	r5, r2, r1
 8003b94:	42a5      	cmp	r5, r4
 8003b96:	d10b      	bne.n	8003bb0 <_free_r+0x78>
 8003b98:	6824      	ldr	r4, [r4, #0]
 8003b9a:	4421      	add	r1, r4
 8003b9c:	1854      	adds	r4, r2, r1
 8003b9e:	42a3      	cmp	r3, r4
 8003ba0:	6011      	str	r1, [r2, #0]
 8003ba2:	d1dd      	bne.n	8003b60 <_free_r+0x28>
 8003ba4:	681c      	ldr	r4, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	6053      	str	r3, [r2, #4]
 8003baa:	4421      	add	r1, r4
 8003bac:	6011      	str	r1, [r2, #0]
 8003bae:	e7d7      	b.n	8003b60 <_free_r+0x28>
 8003bb0:	d902      	bls.n	8003bb8 <_free_r+0x80>
 8003bb2:	230c      	movs	r3, #12
 8003bb4:	6003      	str	r3, [r0, #0]
 8003bb6:	e7d3      	b.n	8003b60 <_free_r+0x28>
 8003bb8:	6825      	ldr	r5, [r4, #0]
 8003bba:	1961      	adds	r1, r4, r5
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	bf04      	itt	eq
 8003bc0:	6819      	ldreq	r1, [r3, #0]
 8003bc2:	685b      	ldreq	r3, [r3, #4]
 8003bc4:	6063      	str	r3, [r4, #4]
 8003bc6:	bf04      	itt	eq
 8003bc8:	1949      	addeq	r1, r1, r5
 8003bca:	6021      	streq	r1, [r4, #0]
 8003bcc:	6054      	str	r4, [r2, #4]
 8003bce:	e7c7      	b.n	8003b60 <_free_r+0x28>
 8003bd0:	b003      	add	sp, #12
 8003bd2:	bd30      	pop	{r4, r5, pc}
 8003bd4:	20000090 	.word	0x20000090

08003bd8 <_malloc_r>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	1ccd      	adds	r5, r1, #3
 8003bdc:	f025 0503 	bic.w	r5, r5, #3
 8003be0:	3508      	adds	r5, #8
 8003be2:	2d0c      	cmp	r5, #12
 8003be4:	bf38      	it	cc
 8003be6:	250c      	movcc	r5, #12
 8003be8:	2d00      	cmp	r5, #0
 8003bea:	4606      	mov	r6, r0
 8003bec:	db01      	blt.n	8003bf2 <_malloc_r+0x1a>
 8003bee:	42a9      	cmp	r1, r5
 8003bf0:	d903      	bls.n	8003bfa <_malloc_r+0x22>
 8003bf2:	230c      	movs	r3, #12
 8003bf4:	6033      	str	r3, [r6, #0]
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bfa:	f000 f8f1 	bl	8003de0 <__malloc_lock>
 8003bfe:	4921      	ldr	r1, [pc, #132]	; (8003c84 <_malloc_r+0xac>)
 8003c00:	680a      	ldr	r2, [r1, #0]
 8003c02:	4614      	mov	r4, r2
 8003c04:	b99c      	cbnz	r4, 8003c2e <_malloc_r+0x56>
 8003c06:	4f20      	ldr	r7, [pc, #128]	; (8003c88 <_malloc_r+0xb0>)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	b923      	cbnz	r3, 8003c16 <_malloc_r+0x3e>
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f000 f83c 	bl	8003c8c <_sbrk_r>
 8003c14:	6038      	str	r0, [r7, #0]
 8003c16:	4629      	mov	r1, r5
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f000 f837 	bl	8003c8c <_sbrk_r>
 8003c1e:	1c43      	adds	r3, r0, #1
 8003c20:	d123      	bne.n	8003c6a <_malloc_r+0x92>
 8003c22:	230c      	movs	r3, #12
 8003c24:	6033      	str	r3, [r6, #0]
 8003c26:	4630      	mov	r0, r6
 8003c28:	f000 f8e0 	bl	8003dec <__malloc_unlock>
 8003c2c:	e7e3      	b.n	8003bf6 <_malloc_r+0x1e>
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	1b5b      	subs	r3, r3, r5
 8003c32:	d417      	bmi.n	8003c64 <_malloc_r+0x8c>
 8003c34:	2b0b      	cmp	r3, #11
 8003c36:	d903      	bls.n	8003c40 <_malloc_r+0x68>
 8003c38:	6023      	str	r3, [r4, #0]
 8003c3a:	441c      	add	r4, r3
 8003c3c:	6025      	str	r5, [r4, #0]
 8003c3e:	e004      	b.n	8003c4a <_malloc_r+0x72>
 8003c40:	6863      	ldr	r3, [r4, #4]
 8003c42:	42a2      	cmp	r2, r4
 8003c44:	bf0c      	ite	eq
 8003c46:	600b      	streq	r3, [r1, #0]
 8003c48:	6053      	strne	r3, [r2, #4]
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	f000 f8ce 	bl	8003dec <__malloc_unlock>
 8003c50:	f104 000b 	add.w	r0, r4, #11
 8003c54:	1d23      	adds	r3, r4, #4
 8003c56:	f020 0007 	bic.w	r0, r0, #7
 8003c5a:	1ac2      	subs	r2, r0, r3
 8003c5c:	d0cc      	beq.n	8003bf8 <_malloc_r+0x20>
 8003c5e:	1a1b      	subs	r3, r3, r0
 8003c60:	50a3      	str	r3, [r4, r2]
 8003c62:	e7c9      	b.n	8003bf8 <_malloc_r+0x20>
 8003c64:	4622      	mov	r2, r4
 8003c66:	6864      	ldr	r4, [r4, #4]
 8003c68:	e7cc      	b.n	8003c04 <_malloc_r+0x2c>
 8003c6a:	1cc4      	adds	r4, r0, #3
 8003c6c:	f024 0403 	bic.w	r4, r4, #3
 8003c70:	42a0      	cmp	r0, r4
 8003c72:	d0e3      	beq.n	8003c3c <_malloc_r+0x64>
 8003c74:	1a21      	subs	r1, r4, r0
 8003c76:	4630      	mov	r0, r6
 8003c78:	f000 f808 	bl	8003c8c <_sbrk_r>
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d1dd      	bne.n	8003c3c <_malloc_r+0x64>
 8003c80:	e7cf      	b.n	8003c22 <_malloc_r+0x4a>
 8003c82:	bf00      	nop
 8003c84:	20000090 	.word	0x20000090
 8003c88:	20000094 	.word	0x20000094

08003c8c <_sbrk_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4d06      	ldr	r5, [pc, #24]	; (8003ca8 <_sbrk_r+0x1c>)
 8003c90:	2300      	movs	r3, #0
 8003c92:	4604      	mov	r4, r0
 8003c94:	4608      	mov	r0, r1
 8003c96:	602b      	str	r3, [r5, #0]
 8003c98:	f7fc ff3a 	bl	8000b10 <_sbrk>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	d102      	bne.n	8003ca6 <_sbrk_r+0x1a>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	b103      	cbz	r3, 8003ca6 <_sbrk_r+0x1a>
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
 8003ca8:	200001e8 	.word	0x200001e8

08003cac <__sread>:
 8003cac:	b510      	push	{r4, lr}
 8003cae:	460c      	mov	r4, r1
 8003cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb4:	f000 f8a0 	bl	8003df8 <_read_r>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	bfab      	itete	ge
 8003cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8003cc0:	181b      	addge	r3, r3, r0
 8003cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cc6:	bfac      	ite	ge
 8003cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cca:	81a3      	strhlt	r3, [r4, #12]
 8003ccc:	bd10      	pop	{r4, pc}

08003cce <__swrite>:
 8003cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd2:	461f      	mov	r7, r3
 8003cd4:	898b      	ldrh	r3, [r1, #12]
 8003cd6:	05db      	lsls	r3, r3, #23
 8003cd8:	4605      	mov	r5, r0
 8003cda:	460c      	mov	r4, r1
 8003cdc:	4616      	mov	r6, r2
 8003cde:	d505      	bpl.n	8003cec <__swrite+0x1e>
 8003ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f000 f868 	bl	8003dbc <_lseek_r>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf6:	81a3      	strh	r3, [r4, #12]
 8003cf8:	4632      	mov	r2, r6
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d02:	f000 b817 	b.w	8003d34 <_write_r>

08003d06 <__sseek>:
 8003d06:	b510      	push	{r4, lr}
 8003d08:	460c      	mov	r4, r1
 8003d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d0e:	f000 f855 	bl	8003dbc <_lseek_r>
 8003d12:	1c43      	adds	r3, r0, #1
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	bf15      	itete	ne
 8003d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d22:	81a3      	strheq	r3, [r4, #12]
 8003d24:	bf18      	it	ne
 8003d26:	81a3      	strhne	r3, [r4, #12]
 8003d28:	bd10      	pop	{r4, pc}

08003d2a <__sclose>:
 8003d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d2e:	f000 b813 	b.w	8003d58 <_close_r>
	...

08003d34 <_write_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	4d07      	ldr	r5, [pc, #28]	; (8003d54 <_write_r+0x20>)
 8003d38:	4604      	mov	r4, r0
 8003d3a:	4608      	mov	r0, r1
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	2200      	movs	r2, #0
 8003d40:	602a      	str	r2, [r5, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f7fc fe93 	bl	8000a6e <_write>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d102      	bne.n	8003d52 <_write_r+0x1e>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	b103      	cbz	r3, 8003d52 <_write_r+0x1e>
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	bd38      	pop	{r3, r4, r5, pc}
 8003d54:	200001e8 	.word	0x200001e8

08003d58 <_close_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	4d06      	ldr	r5, [pc, #24]	; (8003d74 <_close_r+0x1c>)
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	4604      	mov	r4, r0
 8003d60:	4608      	mov	r0, r1
 8003d62:	602b      	str	r3, [r5, #0]
 8003d64:	f7fc fe9f 	bl	8000aa6 <_close>
 8003d68:	1c43      	adds	r3, r0, #1
 8003d6a:	d102      	bne.n	8003d72 <_close_r+0x1a>
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	b103      	cbz	r3, 8003d72 <_close_r+0x1a>
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	bd38      	pop	{r3, r4, r5, pc}
 8003d74:	200001e8 	.word	0x200001e8

08003d78 <_fstat_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	4d07      	ldr	r5, [pc, #28]	; (8003d98 <_fstat_r+0x20>)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	4604      	mov	r4, r0
 8003d80:	4608      	mov	r0, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	602b      	str	r3, [r5, #0]
 8003d86:	f7fc fe9a 	bl	8000abe <_fstat>
 8003d8a:	1c43      	adds	r3, r0, #1
 8003d8c:	d102      	bne.n	8003d94 <_fstat_r+0x1c>
 8003d8e:	682b      	ldr	r3, [r5, #0]
 8003d90:	b103      	cbz	r3, 8003d94 <_fstat_r+0x1c>
 8003d92:	6023      	str	r3, [r4, #0]
 8003d94:	bd38      	pop	{r3, r4, r5, pc}
 8003d96:	bf00      	nop
 8003d98:	200001e8 	.word	0x200001e8

08003d9c <_isatty_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	4d06      	ldr	r5, [pc, #24]	; (8003db8 <_isatty_r+0x1c>)
 8003da0:	2300      	movs	r3, #0
 8003da2:	4604      	mov	r4, r0
 8003da4:	4608      	mov	r0, r1
 8003da6:	602b      	str	r3, [r5, #0]
 8003da8:	f7fc fe99 	bl	8000ade <_isatty>
 8003dac:	1c43      	adds	r3, r0, #1
 8003dae:	d102      	bne.n	8003db6 <_isatty_r+0x1a>
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	b103      	cbz	r3, 8003db6 <_isatty_r+0x1a>
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	bd38      	pop	{r3, r4, r5, pc}
 8003db8:	200001e8 	.word	0x200001e8

08003dbc <_lseek_r>:
 8003dbc:	b538      	push	{r3, r4, r5, lr}
 8003dbe:	4d07      	ldr	r5, [pc, #28]	; (8003ddc <_lseek_r+0x20>)
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	4608      	mov	r0, r1
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	602a      	str	r2, [r5, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f7fc fe92 	bl	8000af4 <_lseek>
 8003dd0:	1c43      	adds	r3, r0, #1
 8003dd2:	d102      	bne.n	8003dda <_lseek_r+0x1e>
 8003dd4:	682b      	ldr	r3, [r5, #0]
 8003dd6:	b103      	cbz	r3, 8003dda <_lseek_r+0x1e>
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	bd38      	pop	{r3, r4, r5, pc}
 8003ddc:	200001e8 	.word	0x200001e8

08003de0 <__malloc_lock>:
 8003de0:	4801      	ldr	r0, [pc, #4]	; (8003de8 <__malloc_lock+0x8>)
 8003de2:	f7ff be43 	b.w	8003a6c <__retarget_lock_acquire_recursive>
 8003de6:	bf00      	nop
 8003de8:	200001e0 	.word	0x200001e0

08003dec <__malloc_unlock>:
 8003dec:	4801      	ldr	r0, [pc, #4]	; (8003df4 <__malloc_unlock+0x8>)
 8003dee:	f7ff be3e 	b.w	8003a6e <__retarget_lock_release_recursive>
 8003df2:	bf00      	nop
 8003df4:	200001e0 	.word	0x200001e0

08003df8 <_read_r>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	4d07      	ldr	r5, [pc, #28]	; (8003e18 <_read_r+0x20>)
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	4608      	mov	r0, r1
 8003e00:	4611      	mov	r1, r2
 8003e02:	2200      	movs	r2, #0
 8003e04:	602a      	str	r2, [r5, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f7fc fe14 	bl	8000a34 <_read>
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	d102      	bne.n	8003e16 <_read_r+0x1e>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	b103      	cbz	r3, 8003e16 <_read_r+0x1e>
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	200001e8 	.word	0x200001e8

08003e1c <_init>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	bf00      	nop
 8003e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e22:	bc08      	pop	{r3}
 8003e24:	469e      	mov	lr, r3
 8003e26:	4770      	bx	lr

08003e28 <_fini>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	bf00      	nop
 8003e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2e:	bc08      	pop	{r3}
 8003e30:	469e      	mov	lr, r3
 8003e32:	4770      	bx	lr
